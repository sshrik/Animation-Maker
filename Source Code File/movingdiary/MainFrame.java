/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package movingdiary;

import tile.Drawable;
import tile.TileLine2D;
import tile.TileRoundRectangle2D;
import tile.TileEllipse2D;
import tile.TileImage2D;
import tile.TileRectangle2D;
import tile.TilePolygon2D;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Image;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.WindowConstants;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author chj87
 */
public class MainFrame extends javax.swing.JFrame implements MouseMotionListener, MouseListener {
    public final static int UPDATE_TIME_VAR = 20;
    
    
    private int firstX, firstY;
    private int secondX, secondY;
    private int draggedX = 0;
    private int draggedY = 0;
    private int selcetNumber;
    private int lineDiameter = 1;
    private boolean selectState, removeState, eraserState, polygonState;
    private boolean imageSlected, largerState, smallerState;
    private boolean selected;
    private Drawable tempShape;
    private BufferedImage bufferedImage;
    private ArrayList<Integer> xList = new ArrayList<Integer>();
    private ArrayList<Integer> yList = new ArrayList<Integer>();
    private ArrayList<Integer> Xpoint = new ArrayList<Integer>();
    private ArrayList<Integer> Ypoint = new ArrayList<Integer>();
    // Drawing State, Not have to serialize
    
    private int stageNumber = 0;
    private int maxStageNumber = 1;
    private int animationStageNumber = 0;
    private int animationMaxStageNumber = 1;
    private ArrayList<Stage> stageList;
    private ArrayList<ArrayList<Stage>> animationList;
    private animationStage[] as = new animationStage[5];
    private Stage stage;
    // Drawable State, Have to Serializing
    
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        addStage();
        setSelectState(false);
        setRemoveState(false);
        setEraserState(false);
        setPolygonState(false);
        setImageSelected(false);
        setSelected(false);
        setLargerState(true);
        setSmallerState(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void addStage() {
        setAnimationList(new ArrayList<ArrayList<Stage>>());
        setStageList(new ArrayList<Stage>());
        getAnimationList().add(getStageList());
        
        setStage(new Stage());
        getStage().setBackground(Color.WHITE);
        getStage().addMouseListener(this);
        getStage().addMouseMotionListener(this);
        jPanel1.add(getStage(),BorderLayout.CENTER);
        getStage().setBoderColor(borderColorLabel.getBackground());
        getStage().setFillingColor(fillingColorLabel.getBackground());
        getStage().setTextColor(textColorPanel.getBackground());
        getStage().setAllBoolean(false);
        
        getStageList().add(getStage().clone());
        
        
        for(int i = 0; i < 5; i++)  {
            as[i] = new animationStage(getStage());
            as[i].setLayout(new BorderLayout());
            as[i].addingStage();
        }
        
        animationPanel1.add(as[0] , BorderLayout.CENTER );
        animationPanel2.add(as[1] , BorderLayout.CENTER );
        animationPanel3.add(as[2] , BorderLayout.CENTER );
        animationPanel4.add(as[3] , BorderLayout.CENTER );
        animationPanel5.add(as[4] , BorderLayout.CENTER );
    }
    
    private void addStage(Stage stage)  {
        setStage(stage.clone());
        getStage().setBackground(Color.WHITE);
        getStage().addMouseListener(this);
        getStage().addMouseMotionListener(this);
        getStage().setAllBoolean(false);
        jPanel1.add(getStage(),BorderLayout.CENTER);
        jPanel1.setVisible(true);
    }
    
    private void minusStage()   {
        jPanel1.setVisible(false);
        jPanel1.removeAll();
    }
    
    private void setDownStage() {
        if(getAnimationStageNumber() == 0)  {
            if(getAnimationMaxStageNumber() == getAnimationStageNumber() + 1)   {
                as[0].setThisStage(getAnimationList().get(getAnimationStageNumber()).get(getAnimationList().get(getAnimationStageNumber()).size() - 1));
                as[1].setThisStage(new Stage());
                as[2].setThisStage(new Stage());
                as[3].setThisStage(new Stage());
                as[4].setThisStage(new Stage());
            }
            else if(getAnimationMaxStageNumber() == getAnimationStageNumber() + 2)   {
                as[0].setThisStage(getAnimationList().get(getAnimationStageNumber()).get(getAnimationList().get(getAnimationStageNumber()).size() - 1));
                as[1].setThisStage(getAnimationList().get(getAnimationStageNumber() + 1).get(getAnimationList().get(getAnimationStageNumber() + 1).size() - 1));
                as[2].setThisStage(new Stage());
                as[3].setThisStage(new Stage());
                as[4].setThisStage(new Stage());
            }
            else if(getAnimationMaxStageNumber() == getAnimationStageNumber() + 3)   {
                as[0].setThisStage(getAnimationList().get(getAnimationStageNumber()).get(getAnimationList().get(getAnimationStageNumber()).size() - 1));
                as[1].setThisStage(getAnimationList().get(getAnimationStageNumber() + 1).get(getAnimationList().get(getAnimationStageNumber() + 1).size() - 1));
                as[2].setThisStage(getAnimationList().get(getAnimationStageNumber() + 2).get(getAnimationList().get(getAnimationStageNumber() + 2).size() - 1));
                as[3].setThisStage(new Stage());
                as[4].setThisStage(new Stage());
            }
            else if(getAnimationMaxStageNumber() == getAnimationStageNumber() + 4)   {
                as[0].setThisStage(getAnimationList().get(getAnimationStageNumber()).get(getAnimationList().get(getAnimationStageNumber()).size() - 1));
                as[1].setThisStage(getAnimationList().get(getAnimationStageNumber() + 1).get(getAnimationList().get(getAnimationStageNumber() + 1).size() - 1));
                as[2].setThisStage(getAnimationList().get(getAnimationStageNumber() + 2).get(getAnimationList().get(getAnimationStageNumber()+ 2).size() - 1));
                as[3].setThisStage(getAnimationList().get(getAnimationStageNumber() + 3).get(getAnimationList().get(getAnimationStageNumber() + 3).size() - 1));
                as[4].setThisStage(new Stage());
            }
            else if(getAnimationMaxStageNumber() >= getAnimationStageNumber() + 5)   {
                as[0].setThisStage(getAnimationList().get(getAnimationStageNumber()).get(getAnimationList().get(getAnimationStageNumber()).size() - 1));
                as[1].setThisStage(getAnimationList().get(getAnimationStageNumber() + 1).get(getAnimationList().get(getAnimationStageNumber() + 1).size() - 1));
                as[2].setThisStage(getAnimationList().get(getAnimationStageNumber() + 2).get(getAnimationList().get(getAnimationStageNumber() + 2).size() - 1));
                as[3].setThisStage(getAnimationList().get(getAnimationStageNumber() + 3).get(getAnimationList().get(getAnimationStageNumber() + 3).size() - 1));
                as[4].setThisStage(getAnimationList().get(getAnimationStageNumber() + 4).get(getAnimationList().get(getAnimationStageNumber() + 4).size() - 1));
            }
        }
        else if(getAnimationStageNumber() == 1)  {
            if(getAnimationMaxStageNumber() == getAnimationStageNumber() + 1)   {
                as[0].setThisStage(getAnimationList().get(getAnimationStageNumber() - 1).get(getAnimationList().get(getAnimationStageNumber() - 1).size() - 1));
                as[1].setThisStage(getAnimationList().get(getAnimationStageNumber()).get(getAnimationList().get(getAnimationStageNumber()).size() - 1));
                as[2].setThisStage(new Stage());
                as[3].setThisStage(new Stage());
                as[4].setThisStage(new Stage());
            }
            else if(getAnimationMaxStageNumber() == getAnimationStageNumber() + 2)   {
                as[0].setThisStage(getAnimationList().get(getAnimationStageNumber() - 1).get(getAnimationList().get(getAnimationStageNumber() - 1).size() - 1));
                as[1].setThisStage(getAnimationList().get(getAnimationStageNumber()).get(getAnimationList().get(getAnimationStageNumber()).size() - 1));
                as[2].setThisStage(getAnimationList().get(getAnimationStageNumber() + 1).get(getAnimationList().get(getAnimationStageNumber() + 1).size() - 1));
                as[3].setThisStage(new Stage());
                as[4].setThisStage(new Stage());
            }
            else if(getAnimationMaxStageNumber() == getAnimationStageNumber() + 3)   {
                as[0].setThisStage(getAnimationList().get(getAnimationStageNumber() - 1).get(getAnimationList().get(getAnimationStageNumber() - 1).size() - 1));
                as[1].setThisStage(getAnimationList().get(getAnimationStageNumber()).get(getAnimationList().get(getAnimationStageNumber()).size() - 1));
                as[2].setThisStage(getAnimationList().get(getAnimationStageNumber() + 1).get(getAnimationList().get(getAnimationStageNumber() + 1).size() - 1));
                as[3].setThisStage(getAnimationList().get(getAnimationStageNumber() + 2).get(getAnimationList().get(getAnimationStageNumber() + 2).size() - 1));
                as[4].setThisStage(new Stage());
            }
            else if(getAnimationMaxStageNumber() >= getAnimationStageNumber() + 4)   {
                as[0].setThisStage(getAnimationList().get(getAnimationStageNumber() - 1).get(getAnimationList().get(getAnimationStageNumber() - 1).size() - 1));
                as[1].setThisStage(getAnimationList().get(getAnimationStageNumber()).get(getAnimationList().get(getAnimationStageNumber()).size() - 1));
                as[2].setThisStage(getAnimationList().get(getAnimationStageNumber() + 1).get(getAnimationList().get(getAnimationStageNumber() + 1).size() - 1));
                as[3].setThisStage(getAnimationList().get(getAnimationStageNumber() + 2).get(getAnimationList().get(getAnimationStageNumber() + 2).size() - 1));
                as[4].setThisStage(getAnimationList().get(getAnimationStageNumber() + 3).get(getAnimationList().get(getAnimationStageNumber() + 3).size() - 1));
            }
        }
        else if(getAnimationStageNumber() >= 2)  {
            if(getAnimationMaxStageNumber() == getAnimationStageNumber() + 1)   {
                as[0].setThisStage(getAnimationList().get(getAnimationStageNumber() - 2).get(getAnimationList().get(getAnimationStageNumber() - 2).size() - 1));
                as[1].setThisStage(getAnimationList().get(getAnimationStageNumber() - 1).get(getAnimationList().get(getAnimationStageNumber() - 1).size() - 1));
                as[2].setThisStage(getAnimationList().get(getAnimationStageNumber()).get(getAnimationList().get(getAnimationStageNumber()).size() - 1));
                as[3].setThisStage(new Stage());
                as[4].setThisStage(new Stage());
            }
            else if(getAnimationMaxStageNumber() == getAnimationStageNumber() + 2)   {
                as[0].setThisStage(getAnimationList().get(getAnimationStageNumber() - 2).get(getAnimationList().get(getAnimationStageNumber() - 2).size() - 1));
                as[1].setThisStage(getAnimationList().get(getAnimationStageNumber() - 1).get(getAnimationList().get(getAnimationStageNumber() - 1).size() - 1));
                as[2].setThisStage(getAnimationList().get(getAnimationStageNumber()).get(getAnimationList().get(getAnimationStageNumber()).size() - 1));
                as[3].setThisStage(getAnimationList().get(getAnimationStageNumber() + 1).get(getAnimationList().get(getAnimationStageNumber() + 1).size() - 1));
                as[4].setThisStage(new Stage());
            }
            else if(getAnimationMaxStageNumber() >= getAnimationStageNumber() + 3)   {
                as[0].setThisStage(getAnimationList().get(getAnimationStageNumber() - 2).get(getAnimationList().get(getAnimationStageNumber() - 2).size() - 1));
                as[1].setThisStage(getAnimationList().get(getAnimationStageNumber() - 1).get(getAnimationList().get(getAnimationStageNumber() - 1).size() - 1));
                as[2].setThisStage(getAnimationList().get(getAnimationStageNumber()).get(getAnimationList().get(getAnimationStageNumber()).size() - 1));
                as[3].setThisStage(getAnimationList().get(getAnimationStageNumber() + 1).get(getAnimationList().get(getAnimationStageNumber() + 1).size() - 1));
                as[4].setThisStage(getAnimationList().get(getAnimationStageNumber() + 2).get(getAnimationList().get(getAnimationStageNumber() + 2).size() - 1));
                
            }
        }
        for(int i = 0 ; i <  5; i++)    {
            as[i].repaint();
        }
    }
    
    
    
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        freeArcBtn = new javax.swing.JButton();
        lineBtn = new javax.swing.JButton();
        rectangleBtn = new javax.swing.JButton();
        circleBtn = new javax.swing.JButton();
        ovalBtn = new javax.swing.JButton();
        borderLineColorBtn = new javax.swing.JButton();
        fillingColorBtn = new javax.swing.JButton();
        borderColorLabel = new javax.swing.JPanel();
        fillingColorLabel = new javax.swing.JPanel();
        lineSizePanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        selectBtn = new javax.swing.JButton();
        selectStateLabel = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        circularPercentText = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        polygonBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        redoBtn = new javax.swing.JButton();
        undoBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        diameterTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        rotationTextField = new javax.swing.JTextField();
        depthTextField = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        inputTextBtn = new javax.swing.JButton();
        textSize = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        textInput = new javax.swing.JTextArea();
        removeBtn = new javax.swing.JButton();
        eraserBtn = new javax.swing.JButton();
        removeStateLabel = new javax.swing.JLabel();
        eraserStateLabel = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        textColorPanel = new javax.swing.JPanel();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jButton18 = new javax.swing.JButton();
        jButton19 = new javax.swing.JButton();
        jButton20 = new javax.swing.JButton();
        jButton21 = new javax.swing.JButton();
        jButton22 = new javax.swing.JButton();
        jButton23 = new javax.swing.JButton();
        jButton24 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        localX = new javax.swing.JTextField();
        localY = new javax.swing.JTextField();
        jButton25 = new javax.swing.JButton();
        jButton26 = new javax.swing.JButton();
        jButton27 = new javax.swing.JButton();
        jButton28 = new javax.swing.JButton();
        jButton29 = new javax.swing.JButton();
        sizeY = new javax.swing.JTextField();
        sizeX = new javax.swing.JTextField();
        sizeUp = new javax.swing.JButton();
        sizeDown = new javax.swing.JButton();
        sizeRight = new javax.swing.JButton();
        sizeLeft = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jButton34 = new javax.swing.JButton();
        largerBtn = new javax.swing.JButton();
        smallerBtn = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        textLocalX = new javax.swing.JTextField();
        textLocalY = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        animationPanel1 = new javax.swing.JPanel();
        animationPanel2 = new javax.swing.JPanel();
        animationPanel3 = new javax.swing.JPanel();
        animationPanel4 = new javax.swing.JPanel();
        animationPanel5 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jButton15 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        stageLabel = new javax.swing.JLabel();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        loadFileItem = new javax.swing.JMenuItem();
        saveFileItem = new javax.swing.JMenuItem();
        saveOtherName = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        aniSettingMenu = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Moving Diary");
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(250, 250, 250));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        jPanel2.setBackground(new java.awt.Color(240, 240, 241));

        freeArcBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/movingdiary/Icon Image/FreeLine.png"))); // NOI18N
        freeArcBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                freeArcBtnActionPerformed(evt);
            }
        });

        lineBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/movingdiary/Icon Image/Line.png"))); // NOI18N
        lineBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineBtnActionPerformed(evt);
            }
        });

        rectangleBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/movingdiary/Icon Image/Rectanle.png"))); // NOI18N
        rectangleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectangleBtnActionPerformed(evt);
            }
        });

        circleBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/movingdiary/Icon Image/Circke.png"))); // NOI18N
        circleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                circleBtnActionPerformed(evt);
            }
        });

        ovalBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/movingdiary/Icon Image/Oval.png"))); // NOI18N
        ovalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ovalBtnActionPerformed(evt);
            }
        });

        borderLineColorBtn.setText("Line Color");
        borderLineColorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borderLineColorBtnActionPerformed(evt);
            }
        });

        fillingColorBtn.setText("Filli Color");
        fillingColorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fillingColorBtnActionPerformed(evt);
            }
        });

        borderColorLabel.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout borderColorLabelLayout = new javax.swing.GroupLayout(borderColorLabel);
        borderColorLabel.setLayout(borderColorLabelLayout);
        borderColorLabelLayout.setHorizontalGroup(
            borderColorLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        borderColorLabelLayout.setVerticalGroup(
            borderColorLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 29, Short.MAX_VALUE)
        );

        fillingColorLabel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout fillingColorLabelLayout = new javax.swing.GroupLayout(fillingColorLabel);
        fillingColorLabel.setLayout(fillingColorLabelLayout);
        fillingColorLabelLayout.setHorizontalGroup(
            fillingColorLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        fillingColorLabelLayout.setVerticalGroup(
            fillingColorLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );

        lineSizePanel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout lineSizePanelLayout = new javax.swing.GroupLayout(lineSizePanel);
        lineSizePanel.setLayout(lineSizePanelLayout);
        lineSizePanelLayout.setHorizontalGroup(
            lineSizePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 70, Short.MAX_VALUE)
        );
        lineSizePanelLayout.setVerticalGroup(
            lineSizePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 70, Short.MAX_VALUE)
        );

        jButton1.setText("Reset All");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        selectBtn.setText("Select");
        selectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectBtnActionPerformed(evt);
            }
        });

        selectStateLabel.setText("X");

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/movingdiary/Icon Image/RoundRectangle.png"))); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        circularPercentText.setText("4");
        circularPercentText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                circularPercentTextActionPerformed(evt);
            }
        });

        jLabel1.setText("Arc %");

        polygonBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/movingdiary/Icon Image/Polygon.png"))); // NOI18N
        polygonBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                polygonBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("Depth");

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/movingdiary/Icon Image/PutImage.png"))); // NOI18N
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jLabel3.setText("Step");

        redoBtn.setText(">");
        redoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoBtnActionPerformed(evt);
            }
        });

        undoBtn.setText("<");
        undoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoBtnActionPerformed(evt);
            }
        });

        jLabel4.setText("Diameter");
        jLabel4.setToolTipText("");

        diameterTextField.setText("1");

        jLabel5.setText("Degree");

        rotationTextField.setText("0");

        depthTextField.setText("0");

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/movingdiary/Icon Image/Do.png"))); // NOI18N
        jButton2.setToolTipText("");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/movingdiary/Icon Image/Do.png"))); // NOI18N
        jButton3.setToolTipText("");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel6.setText("Text");

        inputTextBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/movingdiary/Icon Image/Do.png"))); // NOI18N
        inputTextBtn.setToolTipText("");
        inputTextBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputTextBtnActionPerformed(evt);
            }
        });

        textSize.setText("15");

        textInput.setColumns(20);
        textInput.setRows(5);
        textInput.setText("Text Here");
        jScrollPane1.setViewportView(textInput);

        removeBtn.setText("Delete");
        removeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBtnActionPerformed(evt);
            }
        });

        eraserBtn.setText("Eraser");
        eraserBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eraserBtnActionPerformed(evt);
            }
        });

        removeStateLabel.setText("X");

        eraserStateLabel.setText("X");

        jButton6.setText("Text Color");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        textColorPanel.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout textColorPanelLayout = new javax.swing.GroupLayout(textColorPanel);
        textColorPanel.setLayout(textColorPanelLayout);
        textColorPanelLayout.setHorizontalGroup(
            textColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 57, Short.MAX_VALUE)
        );
        textColorPanelLayout.setVerticalGroup(
            textColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );

        jButton13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/movingdiary/Icon Image/Do.png"))); // NOI18N
        jButton13.setToolTipText("");

        jButton14.setText("Copy & Paste");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jButton17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/movingdiary/Icon Image/up.png"))); // NOI18N
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        jButton18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/movingdiary/Icon Image/down.png"))); // NOI18N
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });

        jButton19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/movingdiary/Icon Image/up.png"))); // NOI18N
        jButton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton19ActionPerformed(evt);
            }
        });

        jButton20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/movingdiary/Icon Image/down.png"))); // NOI18N
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });

        jButton21.setIcon(new javax.swing.ImageIcon(getClass().getResource("/movingdiary/Icon Image/up.png"))); // NOI18N
        jButton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton21ActionPerformed(evt);
            }
        });

        jButton22.setIcon(new javax.swing.ImageIcon(getClass().getResource("/movingdiary/Icon Image/down.png"))); // NOI18N

        jButton23.setIcon(new javax.swing.ImageIcon(getClass().getResource("/movingdiary/Icon Image/up.png"))); // NOI18N

        jButton24.setIcon(new javax.swing.ImageIcon(getClass().getResource("/movingdiary/Icon Image/down.png"))); // NOI18N
        jButton24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton24ActionPerformed(evt);
            }
        });

        jLabel10.setText("Location");

        localX.setText("0");

        localY.setText("0");

        jButton25.setIcon(new javax.swing.ImageIcon(getClass().getResource("/movingdiary/Icon Image/down.png"))); // NOI18N
        jButton25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton25ActionPerformed(evt);
            }
        });

        jButton26.setIcon(new javax.swing.ImageIcon(getClass().getResource("/movingdiary/Icon Image/up.png"))); // NOI18N
        jButton26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton26ActionPerformed(evt);
            }
        });

        jButton27.setIcon(new javax.swing.ImageIcon(getClass().getResource("/movingdiary/Icon Image/Do.png"))); // NOI18N
        jButton27.setToolTipText("");
        jButton27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton27ActionPerformed(evt);
            }
        });

        jButton28.setIcon(new javax.swing.ImageIcon(getClass().getResource("/movingdiary/Icon Image/right.png"))); // NOI18N
        jButton28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton28ActionPerformed(evt);
            }
        });

        jButton29.setIcon(new javax.swing.ImageIcon(getClass().getResource("/movingdiary/Icon Image/left.png"))); // NOI18N
        jButton29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton29ActionPerformed(evt);
            }
        });

        sizeY.setText("0");

        sizeX.setText("0");

        sizeUp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/movingdiary/Icon Image/up.png"))); // NOI18N
        sizeUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sizeUpActionPerformed(evt);
            }
        });

        sizeDown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/movingdiary/Icon Image/down.png"))); // NOI18N
        sizeDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sizeDownActionPerformed(evt);
            }
        });

        sizeRight.setIcon(new javax.swing.ImageIcon(getClass().getResource("/movingdiary/Icon Image/left.png"))); // NOI18N
        sizeRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sizeRightActionPerformed(evt);
            }
        });

        sizeLeft.setIcon(new javax.swing.ImageIcon(getClass().getResource("/movingdiary/Icon Image/right.png"))); // NOI18N
        sizeLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sizeLeftActionPerformed(evt);
            }
        });

        jLabel9.setText("Size");

        jButton34.setIcon(new javax.swing.ImageIcon(getClass().getResource("/movingdiary/Icon Image/Do.png"))); // NOI18N
        jButton34.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton34ActionPerformed(evt);
            }
        });

        largerBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/movingdiary/Icon Image/Larger.png"))); // NOI18N
        largerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                largerBtnActionPerformed(evt);
            }
        });

        smallerBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/movingdiary/Icon Image/smaller.png"))); // NOI18N
        smallerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smallerBtnActionPerformed(evt);
            }
        });

        jLabel11.setText("LacalText");

        textLocalX.setText("0");

        textLocalY.setText("0");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(sizeRight, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sizeUp, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(sizeDown, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sizeLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sizeX, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sizeY, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton29, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton26, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jButton25, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton28, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(localX, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(localY, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(fillingColorBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(borderLineColorBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE))
                            .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(fillingColorLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(borderColorLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textColorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(2, 2, 2)
                                .addComponent(circleBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addComponent(ovalBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(freeArcBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(rectangleBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(2, 2, 2)
                                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(circularPercentText, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(lineBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(polygonBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(removeBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(eraserBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(removeStateLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(eraserStateLabel, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(selectBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(selectStateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(22, 22, 22))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(rotationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(textSize, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(depthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(inputTextBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton21, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jButton17, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButton19, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(9, 9, 9)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton22, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton18, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton20, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(textLocalX, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(textLocalY))))
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(largerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(smallerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton34, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton27, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGap(2, 2, 2)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(diameterTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addGap(38, 38, 38)
                                            .addComponent(jButton24, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jButton23, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(8, 8, 8)
                            .addComponent(lineSizePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(undoBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(redoBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(freeArcBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(circularPercentText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(rectangleBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(circleBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ovalBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lineBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(polygonBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(borderLineColorBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fillingColorBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(borderColorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fillingColorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textColorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton24, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                            .addComponent(jButton23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(diameterTextField)))
                    .addComponent(lineSizePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(undoBtn)
                            .addComponent(redoBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(selectBtn)
                            .addComponent(selectStateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton18, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton20, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton22, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(7, 7, 7)
                                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(inputTextBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addComponent(jButton17, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton19, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton21, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(depthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(rotationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(textSize, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(2, 2, 2)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textLocalX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textLocalY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton27, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton26, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(localX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jButton25, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton29, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton28, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(localY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton34, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(largerBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(smallerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sizeUp, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sizeX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(sizeDown, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(sizeRight, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(sizeLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(sizeY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(removeBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(eraserBtn))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(removeStateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(eraserStateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(750, 699));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel4.setBackground(new java.awt.Color(150, 150, 150));
        jPanel4.setLayout(new java.awt.GridLayout(1, 10, 5, 5));

        animationPanel1.setBackground(new java.awt.Color(245, 245, 245));
        animationPanel1.setLayout(new java.awt.BorderLayout());
        jPanel4.add(animationPanel1);

        animationPanel2.setBackground(new java.awt.Color(245, 245, 245));
        animationPanel2.setLayout(new java.awt.BorderLayout());
        jPanel4.add(animationPanel2);

        animationPanel3.setBackground(new java.awt.Color(245, 245, 245));
        animationPanel3.setLayout(new java.awt.BorderLayout());
        jPanel4.add(animationPanel3);

        animationPanel4.setBackground(new java.awt.Color(245, 245, 245));
        animationPanel4.setLayout(new java.awt.BorderLayout());
        jPanel4.add(animationPanel4);

        animationPanel5.setBackground(new java.awt.Color(245, 245, 245));
        animationPanel5.setLayout(new java.awt.BorderLayout());
        jPanel4.add(animationPanel5);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 6, Short.MAX_VALUE)
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );

        jButton15.setText("<<<");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jButton8.setText("<<");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("<");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton4.setText("delete");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        stageLabel.setText("1 / 1");

        jButton10.setText(">");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setText(">>");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton16.setText(">>>");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(186, 186, 186)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton15)
                    .addComponent(jButton8)
                    .addComponent(jButton9)
                    .addComponent(jButton4)
                    .addComponent(stageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton10)
                    .addComponent(jButton11)
                    .addComponent(jButton16)))
        );

        fileMenu.setText("File");

        loadFileItem.setText("Load File");
        loadFileItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadFileItemActionPerformed(evt);
            }
        });
        fileMenu.add(loadFileItem);

        saveFileItem.setText("Save File");
        saveFileItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveFileItem);

        saveOtherName.setText("Save Other name");
        saveOtherName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveOtherNameActionPerformed(evt);
            }
        });
        fileMenu.add(saveOtherName);

        jMenuItem6.setText("Save to playable file");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem6);

        jMenuItem4.setText("Save all Stage to JPG");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem4);

        jMenuItem5.setText("Save all Stage to GIF");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem5);

        jMenuItem8.setText("Save to server");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem8);

        jMenuBar1.add(fileMenu);

        jMenu1.setText("Show");

        jMenuItem1.setText("Play this file");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem7.setText("Play pmd file");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem7);

        jMenuBar1.add(jMenu1);

        aniSettingMenu.setText("Setting");

        jMenuItem2.setText("Animation");
        aniSettingMenu.add(jMenuItem2);

        jMenuItem3.setText("Font");
        aniSettingMenu.add(jMenuItem3);

        jMenuBar1.add(aniSettingMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1072, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 1072, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(779, 779, 779)
                        .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 766, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        // One animation list step Back from now Stage.
        
        // Undoing Stage and go to another stage, it is exception. So need to StageList control.
        if(getStageList().size() > getMaxStageNumber()) {
            for(int i = getMaxStageNumber(); i < getStageList().size(); i++)   {
                getStageList().remove(i);
                i--;
            }
        }
        
        // If stage number is 0, we will create more stage under this, and if not, we will move and repaint all downPanel and now stage.
        if(getAnimationStageNumber() == 0)   {
            setAnimationMaxStageNumber(getAnimationMaxStageNumber() + 1);
            ArrayList<Stage> temp = new ArrayList<Stage>();
            
            for(int i = 0; i < getAnimationList().get(0).size(); i++)   {
                temp.add(getAnimationList().get(0).get(i).clone());
            }
            
            getAnimationList().add(0,temp);
            
            setAnimationStageNumber(0);
            setStageList(getAnimationList().get(getAnimationStageNumber()));
            setStageNumber(getStageList().size()-1);
            setMaxStageNumber(getStageList().size());
        }
        else {
            setStageList(getAnimationList().get(getAnimationStageNumber() - 1));
            setAnimationStageNumber(getAnimationStageNumber() - 1);
            setStageNumber(getStageList().size() - 1);
            setMaxStageNumber(getStageList().size());
            
            minusStage();
            addStage(getStageList().get(getStageNumber()).clone());
        }
        getStage().repaint();
        setDownStage();
        String str = String.valueOf(getAnimationStageNumber() + 1) + " / " + getAnimationList().size();
        stageLabel.setText(str);
    }//GEN-LAST:event_jButton9ActionPerformed

    private void saveFileItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileItemActionPerformed
        // TODO add your handling code here:
        // Save with file formet ".md".
        saveDiary("md");
    }//GEN-LAST:event_saveFileItemActionPerformed

    private void loadFileItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadFileItemActionPerformed
        // TODO add your handling code here:
        // Load with file formet ".md".
        loadDiary("md");
    }//GEN-LAST:event_loadFileItemActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        // Save file formet jpeg.
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileNameExtensionFilter("jpeg","jpeg"));
        fileChooser.setMultiSelectionEnabled(false);
        // File chooser window open.
        if(fileChooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            String fileName = fileChooser.getSelectedFile().toString();
            if(fileName.length() > 0)   {
                for(int i = 0; i < getAnimationList().size(); i++)  {
                    fileName = fileName.concat(String.valueOf(i));
                    getAnimationList().get(i).get(getAnimationList().get(i).size() - 1).saveToJPG(fileName.concat(".jpeg"));
                }
            }
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
        // One animation list step Front from now Stage.
        
        // Undoing Stage and go to another stage, it is exception. So need to StageList control.
        if(getStageList().size() > getMaxStageNumber()) {
            for(int i = getMaxStageNumber(); i < getStageList().size(); i++)   {
                getStageList().remove(i);
                i--;
            }
        }
        
        //If stage number is max size, we will make one more stage front of it.
        //If not, we will move stage and repaint downPanel and now stage.
        if(getAnimationStageNumber() == getAnimationMaxStageNumber() - 1)   {
            setAnimationMaxStageNumber(getAnimationMaxStageNumber() + 1);
            ArrayList<Stage> temp = new ArrayList<Stage>();
            
            for(int i = 0; i < getAnimationList().get(getAnimationStageNumber()).size(); i++)   {
                temp.add(getAnimationList().get(getAnimationStageNumber()).get(i).clone());
            }
            
            getAnimationList().add(temp);
            setAnimationStageNumber(getAnimationStageNumber() + 1);
            setStageList(getAnimationList().get(getAnimationStageNumber()));
            setStageNumber(getStageList().size()-1);
            setMaxStageNumber(getStageList().size());
            
        }
        else {
            setAnimationStageNumber(getAnimationStageNumber() + 1);
            setStageList(getAnimationList().get(getAnimationStageNumber()));
            setStageNumber(getStageList().size()-1);
            setMaxStageNumber(getStageList().size());
            
            minusStage();
            addStage(getStageList().get(getStageNumber()).clone());
        }
        getStage().repaint();
        setDownStage();
        String str = String.valueOf(getAnimationStageNumber() + 1) + " / " + getAnimationList().size();
        stageLabel.setText(str);
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
        // Five animation list step Front from now Stage.
        // Undoing Stage and go to another stage, it is exception. So need to StageList control.
        if(getStageList().size() > getMaxStageNumber()) {
            for(int i = getMaxStageNumber(); i < getStageList().size(); i++)   {
                getStageList().remove(i);
                i--;
            }
        }
        
        // If not more then 5 stage front, we will get error and if not, we can go to 5 step front stage.
        // And then repaint all.
        if(getAnimationStageNumber() + 5 > getAnimationMaxStageNumber() - 1)   {
            JOptionPane.showMessageDialog(null, "Not As many as five Front stage.", "Oveflow While Loading Back Stage", JOptionPane.ERROR_MESSAGE);
        }
        else {
            setAnimationStageNumber(getAnimationStageNumber() + 5);
            setStageList(getAnimationList().get(getAnimationStageNumber()));
            setStageNumber(getStageList().size()-1);
            setMaxStageNumber(getStageList().size());
            
            minusStage();
            addStage(getStageList().get(getStageNumber()).clone());
        }
        getStage().repaint();
        setDownStage();
        String str = String.valueOf(getAnimationStageNumber() + 1) + " / " + getAnimationList().size();
        stageLabel.setText(str);
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        // Five animation list step Back from now Stage.
        // Undoing Stage and go to another stage, it is exception. So need to StageList control.
        if(getStageList().size() > getMaxStageNumber()) {
            for(int i = getMaxStageNumber(); i < getStageList().size(); i++)   {
                getStageList().remove(i);
                i--;
            }
        }
        
        // If not more then 5 stage back, we will get error and if not, we can go to 5 step back stage.
        // And then repaint all.
        if(getAnimationStageNumber() - 5 < 0)   {
            JOptionPane.showMessageDialog(null, "Not As many as five Back stage.", "Oveflow While Loading Back Stage", JOptionPane.ERROR_MESSAGE);
        }
        else {
            setAnimationStageNumber(getAnimationStageNumber() - 5);
            setStageList(getAnimationList().get(getAnimationStageNumber()));
            setStageNumber(getStageList().size()-1);
            setMaxStageNumber(getStageList().size());
            
            minusStage();
            addStage(getStageList().get(getStageNumber()).clone());
        }
        getStage().repaint();
        setDownStage();
        String str = String.valueOf(getAnimationStageNumber() + 1) + " / " + getAnimationList().size();
        stageLabel.setText(str);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        // TODO add your handling code here:
        // Ten animation list step Back from now Stage.
        if(getStageList().size() > getMaxStageNumber()) {
            for(int i = getMaxStageNumber(); i < getStageList().size(); i++)   {
                getStageList().remove(i);
                i--;
            }
        }
        
        if(getAnimationStageNumber() - 10 < 0)   {
            JOptionPane.showMessageDialog(null, "Not As many as ten Back stage.", "Oveflow While Loading Back Stage", JOptionPane.ERROR_MESSAGE);
        }
        else {
            setAnimationStageNumber(getAnimationStageNumber() - 10);
            setStageList(getAnimationList().get(getAnimationStageNumber()));
            setStageNumber(getStageList().size()-1);
            setMaxStageNumber(getStageList().size());
            
            minusStage();
            addStage(getStageList().get(getStageNumber()).clone());
        }
        getStage().repaint();
        setDownStage();
        String str = String.valueOf(getAnimationStageNumber() + 1) + " / " + getAnimationList().size();
        stageLabel.setText(str);
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        // TODO add your handling code here:
        // Ten animation list step Front from now Stage.
        if(getStageList().size() > getMaxStageNumber()) {
            for(int i = getMaxStageNumber(); i < getStageList().size(); i++)   {
                getStageList().remove(i);
                i--;
            }
        }
        
        if(getAnimationStageNumber() + 10 > getAnimationMaxStageNumber() - 1)   {
            JOptionPane.showMessageDialog(null, "Not As many as ten Front stage.", "Oveflow While Loading Back Stage", JOptionPane.ERROR_MESSAGE);
        }
        else {
            setAnimationStageNumber(getAnimationStageNumber() + 10);
            setStageList(getAnimationList().get(getAnimationStageNumber()));
            setStageNumber(getStageList().size()-1);
            setMaxStageNumber(getStageList().size());
            
            minusStage();
            addStage(getStageList().get(getStageNumber()).clone());
        }
        getStage().repaint();
        setDownStage();
        String str = String.valueOf(getAnimationStageNumber() + 1) + " / " + getAnimationList().size();
        stageLabel.setText(str);
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        // This file palying
        
        JFrame tempFrame = new JFrame("Animation Play Screen.");
        JPanel tempPanel = new JPanel();
        JPanel temp2Panel = new JPanel();
        JButton startButton = new JButton("Start");
        JButton rotationButton = new JButton("Rotation");
        JButton stopButton = new JButton("Stop");
        AnimationVeiwer aniView = new AnimationVeiwer(getAnimationList());
        
        temp2Panel.setLayout(new BorderLayout());
        tempFrame.setLayout(new BorderLayout());
        tempPanel.setLayout(new BorderLayout());
        tempFrame.add(aniView, BorderLayout.CENTER);
        tempFrame.add(temp2Panel, BorderLayout.SOUTH);
        temp2Panel.add(tempPanel, BorderLayout.SOUTH);
        LoadingPanel nowPanel = new LoadingPanel(aniView.getMaxViewNumber(), aniView.getNowViewNumber(), 980);
        Thread veiwThread = new Thread() {
			@Override
			public void run() {
				while (true) {
                                    nowPanel.setNow(aniView.getNowViewNumber());
                                    aniView.repaint();
                                    nowPanel.repaint();
					try {
						this.sleep(UPDATE_TIME_VAR);  // Milliseconds
						} catch (InterruptedException ignore) {
                                                    nowPanel.setNow(0);
                                                    aniView.setNowViewNumber(0);
                                                }
					}
				}
			};
        
        temp2Panel.add(nowPanel, BorderLayout.NORTH);
        
        
        
        startButton.addActionListener(new ActionListener()  {
            @Override
            public void actionPerformed(ActionEvent e) {
                aniView.setStopped(false);
                if(!veiwThread.isAlive())    {
                    veiwThread.start();
                    aniView.setNowViewNumber(0);
                }
            }
        });
        tempPanel.add(startButton , BorderLayout.WEST );
        
        rotationButton.addActionListener(new ActionListener()  {
            @Override
            public void actionPerformed(ActionEvent e) {
                if(aniView.isRotation())    {
                    aniView.setRotation(false);
                }
                else {
                    aniView.setRotation(true);
                }
            }
        });
        tempPanel.add(rotationButton , BorderLayout.CENTER);
        
        stopButton.addActionListener(new ActionListener()  {
            @Override
                public void actionPerformed(ActionEvent e) {
                    aniView.setStopped(true);
            }
        });
        tempPanel.add(stopButton , BorderLayout.EAST);
        aniView.setSize(962, 771);
        tempFrame.setSize(980, 850);
        tempFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        tempFrame.setVisible(true);
        
        // To Control Heap memory.
            
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        saveDiary("pmd");
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void saveOtherNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveOtherNameActionPerformed
        // TODO add your handling code here:
        saveDiary("md");
    }//GEN-LAST:event_saveOtherNameActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        loadDiary("pmd");
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jButton24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton24ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton24ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        if(getSelectState())   {
            if(isSelected())    {
                if(getSelectNumber() == -1) {

                }
                else {
                    setTempShape(getStage().getTileList().get(getSelectNumber()));
                    getStage().getTileList().remove(getSelectNumber());
                    switch (getTempShape().getShapeType()) {
                        case 1:

                        break;
                        case 2:
                        setTempShape(new TileEllipse2D((int)((TileEllipse2D)getTempShape()).getMinX(), (int)((TileEllipse2D)getTempShape()).getMinY(), (int)((TileEllipse2D)getTempShape()).getMaxX(), (int)((TileEllipse2D)getTempShape()).getMaxY(),((TileEllipse2D)getTempShape()).getTd().getRotateDegree(), ((TileEllipse2D)getTempShape()).getTd().getDepth(),  (( TileEllipse2D )getTempShape()).getTtd().getTextContext(), (( TileEllipse2D )getTempShape()).getTtd().getX(), (( TileEllipse2D )getTempShape()).getTtd().getY(), (( TileEllipse2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TileEllipse2D )getTempShape()).getTtd().getTextFont().getStyle(), (( TileEllipse2D )getTempShape()).getTtd().getTextFont().getSize(), ((  TileEllipse2D)getTempShape()).getTtd().getTextColor(), ((TileEllipse2D)getTempShape()).getTd().getBorderColor(), ((TileEllipse2D)getTempShape()).getTd().getFillingColor()));
                        getStage().getTileList().add(getSelectNumber(),(TileEllipse2D)getTempShape());
                        getStage().getTileList().add(getSelectNumber()+1,new TileEllipse2D((int)((TileEllipse2D)getTempShape()).getMinX() + 10, (int)((TileEllipse2D)getTempShape()).getMinY() + 10, (int)((TileEllipse2D)getTempShape()).getMaxX() + 10, (int)((TileEllipse2D)getTempShape()).getMaxY() + 10,((TileEllipse2D)getTempShape()).getTd().getRotateDegree(), ((TileEllipse2D)getTempShape()).getTd().getDepth() + 1,  (( TileEllipse2D )getTempShape()).getTtd().getTextContext(), (( TileEllipse2D )getTempShape()).getTtd().getX() + 10, (( TileEllipse2D )getTempShape()).getTtd().getY() + 10, (( TileEllipse2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TileEllipse2D )getTempShape()).getTtd().getTextFont().getStyle(), (( TileEllipse2D )getTempShape()).getTtd().getTextFont().getSize(), ((  TileEllipse2D)getTempShape()).getTtd().getTextColor(), ((TileEllipse2D)getTempShape()).getTd().getBorderColor(), ((TileEllipse2D)getTempShape()).getTd().getFillingColor()));
                        break;
                        case 3:
                        setTempShape(new TileLine2D((int)((TileLine2D)getTempShape()).getX1(), (int)((TileLine2D)getTempShape()).getY1(), (int)((TileLine2D)getTempShape()).getX2(), (int)((TileLine2D)getTempShape()).getY2(), ((TileLine2D)getTempShape()).getTd().getRotateDegree(),((TileLine2D)getTempShape()).getTd().getDepth(), ((TileLine2D)getTempShape()).getTd().getBorderColor()));
                        getStage().getTileList().add(getSelectNumber(),(TileLine2D)getTempShape());
                        getStage().getTileList().add(getSelectNumber()+1,new TileLine2D((int)((TileLine2D)getTempShape()).getX1() + 10, (int)((TileLine2D)getTempShape()).getY1() + 10, (int)((TileLine2D)getTempShape()).getX2() + 10, (int)((TileLine2D)getTempShape()).getY2() + 10, ((TileLine2D)getTempShape()).getTd().getRotateDegree(),((TileLine2D)getTempShape()).getTd().getDepth() + 1, ((TileLine2D)getTempShape()).getTd().getBorderColor()));
                        break;
                        case 4:
                        int[] x1 = new int[((TilePolygon2D)getTempShape()).getPointSize()];
                        int[] y1 = new int[((TilePolygon2D)getTempShape()).getPointSize()];

                        for(int i = 0; i < ((TilePolygon2D)getTempShape()).getPointSize(); i++) {
                            x1[i] = ((TilePolygon2D)getTempShape()).getXpoint()[i];
                            y1[i] = ((TilePolygon2D)getTempShape()).getYpoint()[i];
                        }

                        setTempShape(new TilePolygon2D(x1, y1, ((TilePolygon2D)getTempShape()).getPointSize(), false, ((TilePolygon2D)getTempShape()).getTd().getRotateDegree(), ((TilePolygon2D)getTempShape()).getTd().getDepth(),  (( TilePolygon2D )getTempShape()).getTtd().getTextContext(), (( TilePolygon2D )getTempShape()).getTtd().getX(), (( TilePolygon2D )getTempShape()).getTtd().getY(), (( TilePolygon2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TilePolygon2D )getTempShape()).getTtd().getTextFont().getStyle(), ((TilePolygon2D  )getTempShape()).getTtd().getTextFont().getSize(), (( TilePolygon2D )getTempShape()).getTtd().getTextColor(), ((TilePolygon2D)getTempShape()).getTd().getBorderColor(),((TilePolygon2D)getTempShape()).getTd().getFillingColor()));
                        getStage().getTileList().add(getSelectNumber(),(TilePolygon2D)getTempShape());

                        for(int i = 0; i < ((TilePolygon2D)getTempShape()).getPointSize(); i++) {
                            x1[i] = ((TilePolygon2D)getTempShape()).getXpoint()[i] + 10;
                            y1[i] = ((TilePolygon2D)getTempShape()).getYpoint()[i] + 10;
                        }

                        getStage().getTileList().add(getSelectNumber() + 1,new TilePolygon2D(x1, y1, ((TilePolygon2D)getTempShape()).getPointSize(), false, ((TilePolygon2D)getTempShape()).getTd().getRotateDegree(), ((TilePolygon2D)getTempShape()).getTd().getDepth() + 1,  (( TilePolygon2D )getTempShape()).getTtd().getTextContext(), (( TilePolygon2D )getTempShape()).getTtd().getX(), (( TilePolygon2D )getTempShape()).getTtd().getY(), (( TilePolygon2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TilePolygon2D )getTempShape()).getTtd().getTextFont().getStyle(), ((TilePolygon2D  )getTempShape()).getTtd().getTextFont().getSize(), (( TilePolygon2D )getTempShape()).getTtd().getTextColor(), ((TilePolygon2D)getTempShape()).getTd().getBorderColor(),((TilePolygon2D)getTempShape()).getTd().getFillingColor()));
                        break;
                        case 5:
                        setTempShape(new TileRectangle2D(((TileRectangle2D)getTempShape()).getLeftTopX(), ((TileRectangle2D)getTempShape()).getLeftTopY(), ((TileRectangle2D)getTempShape()).getRightBottomX(), ((TileRectangle2D)getTempShape()).getRightBottomY(),((TileRectangle2D)getTempShape()).getTd().getRotateDegree(),((TileRectangle2D)getTempShape()).getTd().getDepth(),  (( TileRectangle2D )getTempShape()).getTtd().getTextContext(), (( TileRectangle2D )getTempShape()).getTtd().getX(), (( TileRectangle2D )getTempShape()).getTtd().getY(), (( TileRectangle2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TileRectangle2D )getTempShape()).getTtd().getTextFont().getStyle(), (( TileRectangle2D )getTempShape()).getTtd().getTextFont().getSize(), (( TileRectangle2D )getTempShape()).getTtd().getTextColor(), ((TileRectangle2D)getTempShape()).getTd().getBorderColor(), ((TileRectangle2D)getTempShape()).getTd().getFillingColor()));
                        getStage().getTileList().add(getSelectNumber(),(TileRectangle2D)getTempShape());
                        getStage().getTileList().add(getSelectNumber() + 1,new TileRectangle2D(((TileRectangle2D)getTempShape()).getLeftTopX() + 10, ((TileRectangle2D)getTempShape()).getLeftTopY() + 10, ((TileRectangle2D)getTempShape()).getRightBottomX() + 10, ((TileRectangle2D)getTempShape()).getRightBottomY() + 10,((TileRectangle2D)getTempShape()).getTd().getRotateDegree(),((TileRectangle2D)getTempShape()).getTd().getDepth() + 1,  (( TileRectangle2D )getTempShape()).getTtd().getTextContext(), (( TileRectangle2D )getTempShape()).getTtd().getX() + 10, (( TileRectangle2D )getTempShape()).getTtd().getY() + 10, (( TileRectangle2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TileRectangle2D )getTempShape()).getTtd().getTextFont().getStyle(), (( TileRectangle2D )getTempShape()).getTtd().getTextFont().getSize(), (( TileRectangle2D )getTempShape()).getTtd().getTextColor(), ((TileRectangle2D)getTempShape()).getTd().getBorderColor(), ((TileRectangle2D)getTempShape()).getTd().getFillingColor()));
                        break;
                        case 6:
                        setTempShape(new TileRoundRectangle2D((int)((TileRoundRectangle2D)getTempShape()).getLeftTopX(),(int)((TileRoundRectangle2D)getTempShape()).getLeftTopY(),(int)((TileRoundRectangle2D)getTempShape()).getRightBottomX(), (int)((TileRoundRectangle2D)getTempShape()).getRightBottomY(), (int)((TileRoundRectangle2D)getTempShape()).getArcWidth(), (int)((TileRoundRectangle2D)getTempShape()).getArcHeight(), (int)((TileRoundRectangle2D)getTempShape()).getTd().getRotateDegree() , ((TileRoundRectangle2D)getTempShape()).getTd().getDepth(),  (( TileRoundRectangle2D )getTempShape()).getTtd().getTextContext(), ((  TileRoundRectangle2D)getTempShape()).getTtd().getX(), (( TileRoundRectangle2D )getTempShape()).getTtd().getY(), (( TileRoundRectangle2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TileRoundRectangle2D )getTempShape()).getTtd().getTextFont().getStyle(), ((  TileRoundRectangle2D)getTempShape()).getTtd().getTextFont().getSize(), (( TileRoundRectangle2D )getTempShape()).getTtd().getTextColor(), ((TileRoundRectangle2D)getTempShape()).getTd().getBorderColor(), ((TileRoundRectangle2D)getTempShape()).getTd().getFillingColor()));
                        getStage().getTileList().add(getSelectNumber(),(TileRoundRectangle2D)getTempShape());
                        getStage().getTileList().add(getSelectNumber() + 1,new TileRoundRectangle2D((int)((TileRoundRectangle2D)getTempShape()).getLeftTopX() + 10,(int)((TileRoundRectangle2D)getTempShape()).getLeftTopY() + 10,(int)((TileRoundRectangle2D)getTempShape()).getRightBottomX() + 10, (int)((TileRoundRectangle2D)getTempShape()).getRightBottomY() + 10, (int)((TileRoundRectangle2D)getTempShape()).getArcWidth(), (int)((TileRoundRectangle2D)getTempShape()).getArcHeight(), (int)((TileRoundRectangle2D)getTempShape()).getTd().getRotateDegree() , ((TileRoundRectangle2D)getTempShape()).getTd().getDepth() + 1, (( TileRoundRectangle2D )getTempShape()).getTtd().getTextContext(), ((  TileRoundRectangle2D)getTempShape()).getTtd().getX() + 10, (( TileRoundRectangle2D )getTempShape()).getTtd().getY() + 10, (( TileRoundRectangle2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TileRoundRectangle2D )getTempShape()).getTtd().getTextFont().getStyle(), ((  TileRoundRectangle2D)getTempShape()).getTtd().getTextFont().getSize(), (( TileRoundRectangle2D )getTempShape()).getTtd().getTextColor(), ((TileRoundRectangle2D)getTempShape()).getTd().getBorderColor(), ((TileRoundRectangle2D)getTempShape()).getTd().getFillingColor()));
                        break;
                        case 7:
                        int[] x2 = new int[((TilePolygon2D)getTempShape()).getPointSize()];
                        int[] y2 = new int[((TilePolygon2D)getTempShape()).getPointSize()];

                        for(int i = 0; i < ((TilePolygon2D)getTempShape()).getPointSize(); i++) {
                            x2[i] = ((TilePolygon2D)getTempShape()).getXpoint()[i];
                            y2[i] = ((TilePolygon2D)getTempShape()).getYpoint()[i];
                        }
                        setTempShape(new TilePolygon2D(x2, y2, ((TilePolygon2D)getTempShape()).getPointSize(), true, ((TilePolygon2D)getTempShape()).getTd().getRotateDegree(), ((TilePolygon2D)getTempShape()).getTd().getDepth(),  (( TilePolygon2D )getTempShape()).getTtd().getTextContext(), (( TilePolygon2D )getTempShape()).getTtd().getX(), (( TilePolygon2D )getTempShape()).getTtd().getY(), (( TilePolygon2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TilePolygon2D )getTempShape()).getTtd().getTextFont().getStyle(), ((TilePolygon2D  )getTempShape()).getTtd().getTextFont().getSize(), (( TilePolygon2D )getTempShape()).getTtd().getTextColor(), ((TilePolygon2D)getTempShape()).getTd().getBorderColor(),((TilePolygon2D)getTempShape()).getTd().getFillingColor()));
                        getStage().getTileList().add(getSelectNumber(),(TilePolygon2D)getTempShape());

                        for(int i = 0; i < ((TilePolygon2D)getTempShape()).getPointSize(); i++) {
                            x2[i] = ((TilePolygon2D)getTempShape()).getXpoint()[i] + 10;
                            y2[i] = ((TilePolygon2D)getTempShape()).getYpoint()[i] + 10;
                        }

                        getStage().getTileList().add(getSelectNumber() + 1, new TilePolygon2D(x2, y2, ((TilePolygon2D)getTempShape()).getPointSize(), true, ((TilePolygon2D)getTempShape()).getTd().getRotateDegree(), ((TilePolygon2D)getTempShape()).getTd().getDepth() + 1,  (( TilePolygon2D )getTempShape()).getTtd().getTextContext(), (( TilePolygon2D )getTempShape()).getTtd().getX() + 10, (( TilePolygon2D )getTempShape()).getTtd().getY() + 10, (( TilePolygon2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TilePolygon2D )getTempShape()).getTtd().getTextFont().getStyle(), ((TilePolygon2D  )getTempShape()).getTtd().getTextFont().getSize(), (( TilePolygon2D )getTempShape()).getTtd().getTextColor(), ((TilePolygon2D)getTempShape()).getTd().getBorderColor(),((TilePolygon2D)getTempShape()).getTd().getFillingColor()));
                        break;
                        case 8:
                        setTempShape(new TileImage2D((int)((TileImage2D)getTempShape()).getX1(),(int)((TileImage2D)getTempShape()).getY1(),(int)((TileImage2D)getTempShape()).getX2() , (int)((TileImage2D)getTempShape()).getY2(),  (int)((TileImage2D)getTempShape()).getTd().getRotateDegree() , ((TileImage2D)getTempShape()).getTd().getDepth(), ((TileImage2D)getTempShape()).getBufferedImage(), ((TileImage2D)getTempShape()).getTd().getBorderColor(), ((TileImage2D)getTempShape()).getTd().getFillingColor() ));
                        getStage().getTileList().add(getSelectNumber(),(TileImage2D)getTempShape());
                        getStage().getTileList().add(getSelectNumber() + 1, new TileImage2D((int)((TileImage2D)getTempShape()).getX1() + 10,(int)((TileImage2D)getTempShape()).getY1() + 10,(int)((TileImage2D)getTempShape()).getX2()  + 10, (int)((TileImage2D)getTempShape()).getY2() + 10,  (int)((TileImage2D)getTempShape()).getTd().getRotateDegree() , ((TileImage2D)getTempShape()).getTd().getDepth() + 1, ((TileImage2D)getTempShape()).getBufferedImage(), ((TileImage2D)getTempShape()).getTd().getBorderColor(), ((TileImage2D)getTempShape()).getTd().getFillingColor() ));
                        break;
                        default:
                        break;
                    }

                    for(int i = 0; i < getStage().getTileList().size(); i++)    {
                        getStage().getTileList().get(i).setDepth(i);
                    }

                    getStage().repaint();
                    getStage().tempD = null;
                    setTempShape(null);
                    setSelectNumber(-1);

                    if(getStageList().size() > getMaxStageNumber()) {
                        for(int i = getMaxStageNumber(); i < getStageList().size(); i++)   {
                            getStageList().remove(i);
                            i--;
                        }
                    }

                    getStageList().add(getStage().clone());
                    setStageNumber(getStageNumber() + 1);
                    setMaxStageNumber(getStageNumber() + 1);

                    setDownStage();
                }
            }
        }
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        JFrame tempFrame = new JFrame("Color Choosing");
        JButton tempButton = new JButton("Accept");
        JColorChooser colorChooser = new JColorChooser();
        tempButton.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                getStage().setTextColor(colorChooser.getColor());
                textColorPanel.setBackground(getStage().getTextColor());
                if(getSelectState())   {
                    if(isSelected())    {
                        if(getSelectNumber() == -1) {

                        }
                        else {
                            setTempShape(getStage().getTileList().get(getSelectNumber()));
                            getStage().getTileList().remove(getSelectNumber());
                            getStage().tempD = getTempShape();

                            switch (getTempShape().getShapeType()) {
                                case 1:

                                break;
                                case 2:
                                setTempShape(new TileEllipse2D((int)((TileEllipse2D)getTempShape()).getMinX(), (int)((TileEllipse2D)getTempShape()).getMinY(), (int)((TileEllipse2D)getTempShape()).getMaxX(), (int)((TileEllipse2D)getTempShape()).getMaxY(), ((TileEllipse2D)getTempShape()).getTd().getRotateDegree(),((TileEllipse2D)getTempShape()).getTd().getDepth() ,  (( TileEllipse2D )getTempShape()).getTtd().getTextContext(), (( TileEllipse2D )getTempShape()).getTtd().getX(), (( TileEllipse2D )getTempShape()).getTtd().getY(), (( TileEllipse2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TileEllipse2D )getTempShape()).getTtd().getTextFont().getStyle(), (( TileEllipse2D )getTempShape()).getTtd().getTextFont().getSize(), getStage().getTextColor(), getStage().getBorderColor(), getStage().getFillingColor()));
                                getStage().getTileList().add(getSelectNumber(),(TileEllipse2D)getTempShape());
                                break;
                                case 3:
                                setTempShape(new TileLine2D((int)((TileLine2D)getTempShape()).getX1(), (int)((TileLine2D)getTempShape()).getY1(), (int)((TileLine2D)getTempShape()).getX2(), (int)((TileLine2D)getTempShape()).getY2(), ((TileLine2D)getTempShape()).getTd().getRotateDegree(), ((TileLine2D)getTempShape()).getTd().getDepth(), getStage().getBorderColor()));
                                getStage().getTileList().add(getSelectNumber(),(TileLine2D)getTempShape());
                                break;
                                case 4:
                                setTempShape(new TilePolygon2D(((TilePolygon2D)getTempShape()).getXpoint(), ((TilePolygon2D)getTempShape()).getYpoint(), ((TilePolygon2D)getTempShape()).getPointSize(), ((TilePolygon2D)getTempShape()).isComplete(),((TilePolygon2D)getTempShape()).getTd().getRotateDegree(), ((TilePolygon2D)getTempShape()).getTd().getDepth(),  (( TilePolygon2D )getTempShape()).getTtd().getTextContext(), (( TilePolygon2D )getTempShape()).getTtd().getX(), (( TilePolygon2D )getTempShape()).getTtd().getY(), (( TilePolygon2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TilePolygon2D )getTempShape()).getTtd().getTextFont().getStyle(), ((TilePolygon2D  )getTempShape()).getTtd().getTextFont().getSize(), (( TilePolygon2D )getTempShape()).getTtd().getTextColor(), getStage().getBorderColor(), getStage().getFillingColor()));
                                getStage().getTileList().add(getSelectNumber(),(TilePolygon2D)getTempShape());
                                break;
                                case 5:
                                setTempShape(new TileRectangle2D(((TileRectangle2D)getTempShape()).getLeftTopX(), ((TileRectangle2D)getTempShape()).getLeftTopY(), ((TileRectangle2D)getTempShape()).getRightBottomX(), ((TileRectangle2D)getTempShape()).getRightBottomY(), ((TileRectangle2D)getTempShape()).getTd().getRotateDegree(),((TileRectangle2D)getTempShape()).getTd().getDepth(), (( TileRectangle2D )getTempShape()).getTtd().getTextContext(), (( TileRectangle2D )getTempShape()).getTtd().getX(), (( TileRectangle2D )getTempShape()).getTtd().getY(), (( TileRectangle2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TileRectangle2D )getTempShape()).getTtd().getTextFont().getStyle(), (( TileRectangle2D )getTempShape()).getTtd().getTextFont().getSize(),getStage().getTextColor(), getStage().getBorderColor(), getStage().getFillingColor()));
                                getStage().getTileList().add(getSelectNumber(),(TileRectangle2D)getTempShape());
                                break;
                                case 6:
                                setTempShape(new TileRoundRectangle2D((int)((TileRoundRectangle2D)getTempShape()).getLeftTopX(),(int)((TileRoundRectangle2D)getTempShape()).getLeftTopY(),(int)((TileRoundRectangle2D)getTempShape()).getRightBottomX(), (int)((TileRoundRectangle2D)getTempShape()).getRightBottomY(), (int)((TileRoundRectangle2D)getTempShape()).getArcWidth(), (int)((TileRoundRectangle2D)getTempShape()).getArcHeight(), (int)((TileRoundRectangle2D)getTempShape()).getTd().getRotateDegree(), (int)((TileRoundRectangle2D)getTempShape()).getTd().getDepth(),  (( TileRoundRectangle2D )getTempShape()).getTtd().getTextContext(), ((  TileRoundRectangle2D)getTempShape()).getTtd().getX(), (( TileRoundRectangle2D )getTempShape()).getTtd().getY(), (( TileRoundRectangle2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TileRoundRectangle2D )getTempShape()).getTtd().getTextFont().getStyle(), ((  TileRoundRectangle2D)getTempShape()).getTtd().getTextFont().getSize(), getStage().getTextColor(), getStage().getBorderColor(), getStage().getFillingColor()));
                                getStage().getTileList().add(getSelectNumber(),(TileRoundRectangle2D)getTempShape());
                                break;
                                case 7:
                                setTempShape(new TilePolygon2D(((TilePolygon2D)getTempShape()).getXpoint(), ((TilePolygon2D)getTempShape()).getYpoint(), ((TilePolygon2D)getTempShape()).getPointSize(), ((TilePolygon2D)getTempShape()).isComplete(),((TilePolygon2D)getTempShape()).getTd().getRotateDegree(), ((TilePolygon2D)getTempShape()).getTd().getDepth(),   (( TilePolygon2D )getTempShape()).getTtd().getTextContext(), (( TilePolygon2D )getTempShape()).getTtd().getX(), (( TilePolygon2D )getTempShape()).getTtd().getY(), (( TilePolygon2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TilePolygon2D )getTempShape()).getTtd().getTextFont().getStyle(), ((TilePolygon2D  )getTempShape()).getTtd().getTextFont().getSize(), getStage().getTextColor(), getStage().getBorderColor(), getStage().getFillingColor()));
                                getStage().getTileList().add(getSelectNumber(),(TilePolygon2D)getTempShape());
                                break;
                                case 8:
                                setTempShape(new TileImage2D((int)((TileImage2D)getTempShape()).getX1(),(int)((TileImage2D)getTempShape()).getY1(),(int)((TileImage2D)getTempShape()).getX2() , (int)((TileImage2D)getTempShape()).getY2(),  (int)((TileImage2D)getTempShape()).getTd().getRotateDegree() , ((TileImage2D)getTempShape()).getTd().getDepth(), ((TileImage2D)getTempShape()).getBufferedImage(), getStage().getBorderColor(), getStage().getFillingColor()));
                                getStage().getTileList().add(getSelectNumber(),(TileImage2D)getTempShape());
                                break;
                                default:

                                break;
                            }
                            getStage().repaint();
                            setTempShape(null);
                            setSelectNumber(-1);
                        }
                    }
                }
                tempFrame.setVisible(false);
                tempFrame.dispose();

                getStage().tempD = null;

                if(getStageList().size() > getMaxStageNumber()) {
                    for(int i = getMaxStageNumber(); i < getStageList().size(); i++)   {
                        getStageList().remove(i);
                        i--;
                    }
                }

                getStageList().add(getStage().clone());
                setStageNumber(getStageNumber() + 1);
                setMaxStageNumber(getStageNumber() + 1);
                setDownStage();
            }
        });
        tempFrame.setLayout(new BorderLayout());
        tempFrame.add(colorChooser, BorderLayout.CENTER);
        tempFrame.add(tempButton, BorderLayout.SOUTH);
        tempFrame.setSize(450, 500);
        tempFrame.setVisible(true);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void eraserBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eraserBtnActionPerformed
        // TODO add your handling code here:
        if(getEraserState())    {
            setEraserState(false);
            eraserStateLabel.setText("X");
        }
        else {
            setSelectState(false);
            selectStateLabel.setText("X");
            setRemoveState(false);
            removeStateLabel.setText("X");
            setEraserState(false);
            eraserStateLabel.setText("X");
            setEraserState(true);
            eraserStateLabel.setText("O");
        }
    }//GEN-LAST:event_eraserBtnActionPerformed

    private void removeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBtnActionPerformed
        // TODO add your handling code here:
        if(getRemoveState())    {
            setRemoveState(false);
            removeStateLabel.setText("X");
        }
        else {
            setSelectState(false);
            selectStateLabel.setText("X");
            setRemoveState(false);
            removeStateLabel.setText("X");
            setEraserState(false);
            eraserStateLabel.setText("X");
            setRemoveState(true);
            removeStateLabel.setText("O");
        }
    }//GEN-LAST:event_removeBtnActionPerformed

    private void inputTextBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputTextBtnActionPerformed
        // TODO add your handling code here:
        if(isSelected())  {
            if(getSelectNumber() == -1) {

            }
            else {
                setTempShape(getStage().getTileList().get(getSelectNumber()));
                getStage().getTileList().remove(getSelectNumber());

                switch (getTempShape().getShapeType()) {
                    case 1:

                    break;
                    case 2:
                    setTempShape(new TileEllipse2D((int)((TileEllipse2D)getTempShape()).getMinX(), (int)((TileEllipse2D)getTempShape()).getMinY(), (int)((TileEllipse2D)getTempShape()).getMaxX(), (int)((TileEllipse2D)getTempShape()).getMaxY(), ((TileEllipse2D)getTempShape()).getTd().getRotateDegree(), ((TileEllipse2D)getTempShape()).getTd().getDepth(), textInput.getText(), Integer.parseInt( textLocalX.getText() ), Integer.parseInt( textLocalY.getText() ), "Serif", 0, Integer.parseInt( textSize.getText() ), ((TileEllipse2D)getTempShape()).getTtd().getTextColor(), ((TileEllipse2D)getTempShape()).getTd().getBorderColor(), ((TileEllipse2D)getTempShape()).getTd().getFillingColor()));
                    getStage().getTileList().add(getSelectNumber(),(TileEllipse2D)getTempShape());
                    break;
                    case 3:
                    setTempShape(new TileLine2D((int)((TileLine2D)getTempShape()).getX1(), (int)((TileLine2D)getTempShape()).getY1(), (int)((TileLine2D)getTempShape()).getX2(), (int)((TileLine2D)getTempShape()).getY2(), (( TileLine2D )getTempShape()).getTd().getRotateDegree() , ((TileLine2D)getTempShape()).getTd().getDepth(), ((TileLine2D)getTempShape()).getTd().getBorderColor()));
                    getStage().getTileList().add(getSelectNumber(),(TileLine2D)getTempShape());
                    break;
                    case 4:
                    int[] x1 = new int[((TilePolygon2D)getTempShape()).getPointSize()];
                    int[] y1 = new int[((TilePolygon2D)getTempShape()).getPointSize()];

                    for(int i = 0; i < ((TilePolygon2D)getTempShape()).getPointSize(); i++) {
                        x1[i] = ((TilePolygon2D)getTempShape()).getXpoint()[i];
                        y1[i] = ((TilePolygon2D)getTempShape()).getYpoint()[i];
                    }
                    setTempShape(new TilePolygon2D(x1, y1, ((TilePolygon2D)getTempShape()).getPointSize(), false, (( TilePolygon2D )getTempShape()).getTd().getRotateDegree(), ((TilePolygon2D)getTempShape()).getTd().getDepth(), ((TilePolygon2D)getTempShape()).getTtd().getTextContext(), ((TilePolygon2D)getTempShape()).getTtd().getX(), ((TilePolygon2D)getTempShape()).getTtd().getY(), ((TilePolygon2D)getTempShape()).getTtd().getTextFont().getFontName(), ((TilePolygon2D)getTempShape()).getTtd().getTextFont().getStyle(), ((TilePolygon2D)getTempShape()).getTtd().getTextFont().getSize(), ((TilePolygon2D)getTempShape()).getTtd().getTextColor(), ((TilePolygon2D)getTempShape()).getTd().getBorderColor(),((TilePolygon2D)getTempShape()).getTd().getFillingColor()));
                    getStage().getTileList().add(getSelectNumber(),(TilePolygon2D)getTempShape());
                    break;
                    case 5:
                    setTempShape(new TileRectangle2D(((TileRectangle2D)getTempShape()).getLeftTopX(), ((TileRectangle2D)getTempShape()).getLeftTopY(), ((TileRectangle2D)getTempShape()).getRightBottomX(), ((TileRectangle2D)getTempShape()).getRightBottomY(), (( TileRectangle2D )getTempShape()).getTd().getRotateDegree() , ((TileRectangle2D)getTempShape()).getTd().getDepth() ,  textInput.getText() , Integer.parseInt( textLocalX.getText() ), Integer.parseInt( textLocalY.getText() ), "Serif", 0, Integer.parseInt( textSize.getText() ), (( TileRectangle2D )getTempShape()).getTtd().getTextColor(),((TileRectangle2D)getTempShape()).getTd().getBorderColor(), ((TileRectangle2D)getTempShape()).getTd().getFillingColor()));
                    getStage().getTileList().add(getSelectNumber(),(TileRectangle2D)getTempShape());
                    break;
                    case 6:
                    setTempShape(new TileRoundRectangle2D((int)((TileRoundRectangle2D)getTempShape()).getLeftTopX(),(int)((TileRoundRectangle2D)getTempShape()).getLeftTopY(),(int)((TileRoundRectangle2D)getTempShape()).getRightBottomX(), (int)((TileRoundRectangle2D)getTempShape()).getRightBottomY(), (int)((TileRoundRectangle2D)getTempShape()).getArcWidth(), (int)((TileRoundRectangle2D)getTempShape()).getArcHeight(),(( TileRoundRectangle2D )getTempShape()).getTd().getRotateDegree() , (int)((TileRoundRectangle2D)getTempShape()).getTd().getDepth(),  textInput.getText() , Integer.parseInt( textLocalX.getText() ), Integer.parseInt( textLocalY.getText() ), "Serif", 0, Integer.parseInt( textSize.getText() ) , (( TileRoundRectangle2D )getTempShape()).getTtd().getTextColor(), ((TileRoundRectangle2D)getTempShape()).getTd().getBorderColor(), ((TileRoundRectangle2D)getTempShape()).getTd().getFillingColor()));
                    getStage().getTileList().add(getSelectNumber(),(TileRoundRectangle2D)getTempShape());
                    break;
                    case 7:
                    int[] x2 = new int[((TilePolygon2D)getTempShape()).getPointSize()];
                    int[] y2 = new int[((TilePolygon2D)getTempShape()).getPointSize()];

                    for(int i = 0; i < ((TilePolygon2D)getTempShape()).getPointSize(); i++) {
                        x2[i] = ((TilePolygon2D)getTempShape()).getXpoint()[i];
                        y2[i] = ((TilePolygon2D)getTempShape()).getYpoint()[i];
                    }
                    setTempShape(new TilePolygon2D(x2, y2, ((TilePolygon2D)getTempShape()).getPointSize(), true, (( TilePolygon2D )getTempShape()).getTd().getRotateDegree() , ((TilePolygon2D)getTempShape()).getTd().getDepth(),  textInput.getText() , Integer.parseInt( textLocalX.getText() ), Integer.parseInt( textLocalY.getText() ), "Serif", 0, Integer.parseInt( textSize.getText() ) , ((TilePolygon2D)getTempShape()).getTtd().getTextColor(), ((TilePolygon2D)getTempShape()).getTd().getBorderColor(),((TilePolygon2D)getTempShape()).getTd().getFillingColor()));
                    getStage().getTileList().add(getSelectNumber(),(TilePolygon2D)getTempShape());
                    break;
                    case 8 :
                    setTempShape(new TileImage2D((int)((TileImage2D)getTempShape()).getX1(),(int)((TileImage2D)getTempShape()).getY1(),(int)((TileImage2D)getTempShape()).getX2() , (int)((TileImage2D)getTempShape()).getY2(),  (int)((TileImage2D)getTempShape()).getTd().getRotateDegree() , ((TileImage2D)getTempShape()).getTd().getDepth(), ((TileImage2D)getTempShape()).getBufferedImage(), ((TileImage2D)getTempShape()).getTd().getBorderColor(), ((TileImage2D)getTempShape()).getTd().getFillingColor()));
                    getStage().getTileList().add(getSelectNumber(),(TileImage2D)getTempShape());
                    break;
                    default:
                    break;
                }
                getStage().repaint();
                getStage().tempD = null;
                setTempShape(null);
                setSelectNumber(-1);
                if(getStageList().size() > getMaxStageNumber()) {
                    for(int i = getMaxStageNumber(); i < getStageList().size(); i++)   {
                        getStageList().remove(i);
                        i--;
                    }
                }
                getStageList().add(getStage().clone());
                setStageNumber(getStageNumber() + 1);
                setMaxStageNumber(getStageNumber() + 1);
                setDownStage();
            }
        }
    }//GEN-LAST:event_inputTextBtnActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        // Rotate button
        if(isSelected())  {
            if(getSelectNumber() == -1) {

            }
            else {
                setTempShape(getStage().getTileList().get(getSelectNumber()));
                getStage().getTileList().remove(getSelectNumber());

                switch (getTempShape().getShapeType()) {
                    case 1:

                    break;
                    case 2:
                    setTempShape(new TileEllipse2D((int)((TileEllipse2D)getTempShape()).getMinX(), (int)((TileEllipse2D)getTempShape()).getMinY(), (int)((TileEllipse2D)getTempShape()).getMaxX(), (int)((TileEllipse2D)getTempShape()).getMaxY(), Integer.parseInt(rotationTextField.getText()), ((TileEllipse2D)getTempShape()).getTd().getDepth(), ((TileEllipse2D)getTempShape()).getTtd().getTextContext(), ((TileEllipse2D)getTempShape()).getTtd().getX(), ((TileEllipse2D)getTempShape()).getTtd().getY(), ((TileEllipse2D)getTempShape()).getTtd().getTextFont().getFontName(), ((TileEllipse2D)getTempShape()).getTtd().getTextFont().getStyle(), ((TileEllipse2D)getTempShape()).getTtd().getTextFont().getSize(), ((TileEllipse2D)getTempShape()).getTtd().getTextColor(), ((TileEllipse2D)getTempShape()).getTd().getBorderColor(), ((TileEllipse2D)getTempShape()).getTd().getFillingColor()));
                    getStage().getTileList().add(getSelectNumber(),(TileEllipse2D)getTempShape());
                    break;
                    case 3:
                    setTempShape(new TileLine2D((int)((TileLine2D)getTempShape()).getX1(), (int)((TileLine2D)getTempShape()).getY1(), (int)((TileLine2D)getTempShape()).getX2(), (int)((TileLine2D)getTempShape()).getY2(), Integer.parseInt(rotationTextField.getText()), ((TileLine2D)getTempShape()).getTd().getDepth(), ((TileLine2D)getTempShape()).getTd().getBorderColor()));
                    getStage().getTileList().add(getSelectNumber(),(TileLine2D)getTempShape());
                    break;
                    case 4:
                    int[] x1 = new int[((TilePolygon2D)getTempShape()).getPointSize()];
                    int[] y1 = new int[((TilePolygon2D)getTempShape()).getPointSize()];

                    for(int i = 0; i < ((TilePolygon2D)getTempShape()).getPointSize(); i++) {
                        x1[i] = ((TilePolygon2D)getTempShape()).getXpoint()[i];
                        y1[i] = ((TilePolygon2D)getTempShape()).getYpoint()[i];
                    }
                    setTempShape(new TilePolygon2D(x1, y1, ((TilePolygon2D)getTempShape()).getPointSize(), false, Integer.parseInt(rotationTextField.getText()), ((TilePolygon2D)getTempShape()).getTd().getDepth(), ((TilePolygon2D)getTempShape()).getTtd().getTextContext(), ((TilePolygon2D)getTempShape()).getTtd().getX(), ((TilePolygon2D)getTempShape()).getTtd().getY(), ((TilePolygon2D)getTempShape()).getTtd().getTextFont().getFontName(), ((TilePolygon2D)getTempShape()).getTtd().getTextFont().getStyle(), ((TilePolygon2D)getTempShape()).getTtd().getTextFont().getSize(), ((TilePolygon2D)getTempShape()).getTtd().getTextColor(), ((TilePolygon2D)getTempShape()).getTd().getBorderColor(),((TilePolygon2D)getTempShape()).getTd().getFillingColor()));
                    getStage().getTileList().add(getSelectNumber(),(TilePolygon2D)getTempShape());
                    break;
                    case 5:
                    setTempShape(new TileRectangle2D(((TileRectangle2D)getTempShape()).getLeftTopX(), ((TileRectangle2D)getTempShape()).getLeftTopY(), ((TileRectangle2D)getTempShape()).getRightBottomX(), ((TileRectangle2D)getTempShape()).getRightBottomY(),Integer.parseInt(rotationTextField.getText()), ((TileRectangle2D)getTempShape()).getTd().getDepth() ,  (( TileRectangle2D )getTempShape()).getTtd().getTextContext(), (( TileRectangle2D )getTempShape()).getTtd().getX(), (( TileRectangle2D )getTempShape()).getTtd().getY(), (( TileRectangle2D )getTempShape()).getTtd().getTextFont().getFontName(), ((  TileRectangle2D )getTempShape()).getTtd().getTextFont().getStyle(), (( TileRectangle2D )getTempShape()).getTtd().getTextFont().getSize(), (( TileRectangle2D )getTempShape()).getTtd().getTextColor(),((TileRectangle2D)getTempShape()).getTd().getBorderColor(), ((TileRectangle2D)getTempShape()).getTd().getFillingColor()));
                    getStage().getTileList().add(getSelectNumber(),(TileRectangle2D)getTempShape());
                    break;
                    case 6:
                    setTempShape(new TileRoundRectangle2D((int)((TileRoundRectangle2D)getTempShape()).getLeftTopX(),(int)((TileRoundRectangle2D)getTempShape()).getLeftTopY(),(int)((TileRoundRectangle2D)getTempShape()).getRightBottomX(), (int)((TileRoundRectangle2D)getTempShape()).getRightBottomY(), (int)((TileRoundRectangle2D)getTempShape()).getArcWidth(), (int)((TileRoundRectangle2D)getTempShape()).getArcHeight(),Integer.parseInt(rotationTextField.getText()), (int)((TileRoundRectangle2D)getTempShape()).getTd().getDepth(),  (( TileRoundRectangle2D )getTempShape()).getTtd().getTextContext(), (( TileRoundRectangle2D )getTempShape()).getTtd().getX(), (( TileRoundRectangle2D )getTempShape()).getTtd().getY(), (( TileRoundRectangle2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TileRoundRectangle2D )getTempShape()).getTtd().getTextFont().getStyle(), (( TileRoundRectangle2D )getTempShape()).getTtd().getTextFont().getSize(), (( TileRoundRectangle2D )getTempShape()).getTtd().getTextColor(), ((TileRoundRectangle2D)getTempShape()).getTd().getBorderColor(), ((TileRoundRectangle2D)getTempShape()).getTd().getFillingColor()));
                    getStage().getTileList().add(getSelectNumber(),(TileRoundRectangle2D)getTempShape());
                    break;
                    case 7:
                    int[] x2 = new int[((TilePolygon2D)getTempShape()).getPointSize()];
                    int[] y2 = new int[((TilePolygon2D)getTempShape()).getPointSize()];

                    for(int i = 0; i < ((TilePolygon2D)getTempShape()).getPointSize(); i++) {
                        x2[i] = ((TilePolygon2D)getTempShape()).getXpoint()[i];
                        y2[i] = ((TilePolygon2D)getTempShape()).getYpoint()[i];
                    }
                    setTempShape(new TilePolygon2D(x2, y2, ((TilePolygon2D)getTempShape()).getPointSize(), true, Integer.parseInt(rotationTextField.getText()), ((TilePolygon2D)getTempShape()).getTd().getDepth(),  ((TilePolygon2D)getTempShape()).getTtd().getTextContext(), ((TilePolygon2D)getTempShape()).getTtd().getX(), ((TilePolygon2D)getTempShape()).getTtd().getY(), ((TilePolygon2D)getTempShape()).getTtd().getTextFont().getFontName(), ((TilePolygon2D)getTempShape()).getTtd().getTextFont().getStyle(), ((TilePolygon2D)getTempShape()).getTtd().getTextFont().getSize(), ((TilePolygon2D)getTempShape()).getTtd().getTextColor(), ((TilePolygon2D)getTempShape()).getTd().getBorderColor(),((TilePolygon2D)getTempShape()).getTd().getFillingColor()));
                    getStage().getTileList().add(getSelectNumber(),(TilePolygon2D)getTempShape());
                    break;
                    case 8 :
                    setTempShape(new TileImage2D((int)((TileImage2D)getTempShape()).getX1(),(int)((TileImage2D)getTempShape()).getY1(),(int)((TileImage2D)getTempShape()).getX2(), (int)((TileImage2D)getTempShape()).getY2(),  Integer.parseInt(rotationTextField.getText()) , ((TileImage2D)getTempShape()).getTd().getDepth(), ((TileImage2D)getTempShape()).getBufferedImage(), ((TileImage2D)getTempShape()).getTd().getBorderColor(), ((TileImage2D)getTempShape()).getTd().getFillingColor()));
                    getStage().getTileList().add(getSelectNumber(),(TileImage2D)getTempShape());
                    break;
                    default:
                    break;
                }
                getStage().repaint();
                getStage().tempD = null;
                setTempShape(null);
                setSelectNumber(-1);
                if(getStageList().size() > getMaxStageNumber()) {
                    for(int i = getMaxStageNumber(); i < getStageList().size(); i++)   {
                        getStageList().remove(i);
                        i--;
                    }
                }
                getStageList().add(getStage().clone());
                setStageNumber(getStageNumber() + 1);
                setMaxStageNumber(getStageNumber() + 1);
                setDownStage();
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        // Depth button
        if(isSelected())  {
            if(getSelectNumber() == -1) {

            }
            else {
                setTempShape(getStage().getTileList().get(getSelectNumber()));
                getStage().getTileList().remove(getSelectNumber());
                if(Integer.parseInt(depthTextField.getText()) > getStage().getTileList().size())    {
                    depthTextField.setText(String.valueOf(getStage().getTileList().size()));
                }

                switch (getTempShape().getShapeType()) {
                    case 1:

                    break;
                    case 2:
                    setTempShape(new TileEllipse2D((int)((TileEllipse2D)getTempShape()).getMinX(), (int)((TileEllipse2D)getTempShape()).getMinY(), (int)((TileEllipse2D)getTempShape()).getMaxX(), (int)((TileEllipse2D)getTempShape()).getMaxY(), ((TileEllipse2D)getTempShape()).getTd().getRotateDegree(), Integer.parseInt(depthTextField.getText()),  (( TileEllipse2D )getTempShape()).getTtd().getTextContext(), (( TileEllipse2D )getTempShape()).getTtd().getX(), (( TileEllipse2D )getTempShape()).getTtd().getY(), (( TileEllipse2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TileEllipse2D )getTempShape()).getTtd().getTextFont().getStyle(), (( TileEllipse2D )getTempShape()).getTtd().getTextFont().getSize(), (( TileEllipse2D )getTempShape()).getTtd().getTextColor(), ((TileEllipse2D)getTempShape()).getTd().getBorderColor(), ((TileEllipse2D)getTempShape()).getTd().getFillingColor()));
                    getStage().getTileList().add(Integer.parseInt(depthTextField.getText()), (TileEllipse2D)getTempShape());
                    break;
                    case 3:
                    setTempShape(new TileLine2D((int)((TileLine2D)getTempShape()).getX1(), (int)((TileLine2D)getTempShape()).getY1(), (int)((TileLine2D)getTempShape()).getX2(), (int)((TileLine2D)getTempShape()).getY2(),  ((TileLine2D)getTempShape()).getTd().getRotateDegree(), Integer.parseInt(depthTextField.getText()), ((TileLine2D)getTempShape()).getTd().getBorderColor()));
                    getStage().getTileList().add(Integer.parseInt(depthTextField.getText()), (TileLine2D)getTempShape());
                    break;
                    case 4:
                    int[] x1 = new int[((TilePolygon2D)getTempShape()).getPointSize()];
                    int[] y1 = new int[((TilePolygon2D)getTempShape()).getPointSize()];

                    for(int i = 0; i < ((TilePolygon2D)getTempShape()).getPointSize(); i++) {
                        x1[i] = ((TilePolygon2D)getTempShape()).getXpoint()[i];
                        y1[i] = ((TilePolygon2D)getTempShape()).getYpoint()[i];
                    }
                    setTempShape(new TilePolygon2D(x1, y1, ((TilePolygon2D)getTempShape()).getPointSize(), false,  ((TilePolygon2D)getTempShape()).getTd().getRotateDegree(), Integer.parseInt(depthTextField.getText()),  (( TilePolygon2D )getTempShape()).getTtd().getTextContext(), (( TilePolygon2D )getTempShape()).getTtd().getX(), (( TilePolygon2D )getTempShape()).getTtd().getY(), (( TilePolygon2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TilePolygon2D )getTempShape()).getTtd().getTextFont().getStyle(), (( TilePolygon2D )getTempShape()).getTtd().getTextFont().getSize(), (( TilePolygon2D )getTempShape()).getTtd().getTextColor(), ((TilePolygon2D)getTempShape()).getTd().getBorderColor(),((TilePolygon2D)getTempShape()).getTd().getFillingColor()));
                    getStage().getTileList().add(Integer.parseInt(depthTextField.getText()),(TilePolygon2D)getTempShape());
                    break;
                    case 5:
                    setTempShape(new TileRectangle2D(((TileRectangle2D)getTempShape()).getLeftTopX(), ((TileRectangle2D)getTempShape()).getLeftTopY(), ((TileRectangle2D)getTempShape()).getRightBottomX(), ((TileRectangle2D)getTempShape()).getRightBottomY(),((TileRectangle2D)getTempShape()).getTd().getRotateDegree(), Integer.parseInt(depthTextField.getText()),  (( TileRectangle2D )getTempShape()).getTtd().getTextContext(), (( TileRectangle2D )getTempShape()).getTtd().getX(), (( TileRectangle2D )getTempShape()).getTtd().getY(), (( TileRectangle2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TileRectangle2D )getTempShape()).getTtd().getTextFont().getStyle(), (( TileRectangle2D )getTempShape()).getTtd().getTextFont().getSize(), (( TileRectangle2D )getTempShape()).getTtd().getTextColor(), ((TileRectangle2D)getTempShape()).getTd().getBorderColor(), ((TileRectangle2D)getTempShape()).getTd().getFillingColor()));
                    getStage().getTileList().add(Integer.parseInt(depthTextField.getText()),(TileRectangle2D)getTempShape());
                    break;
                    case 6:
                    setTempShape(new TileRoundRectangle2D((int)((TileRoundRectangle2D)getTempShape()).getLeftTopX(),(int)((TileRoundRectangle2D)getTempShape()).getLeftTopY(),(int)((TileRoundRectangle2D)getTempShape()).getRightBottomX(), (int)((TileRoundRectangle2D)getTempShape()).getRightBottomY(), (int)((TileRoundRectangle2D)getTempShape()).getArcWidth(), (int)((TileRoundRectangle2D)getTempShape()).getArcHeight(), (int)((TileRoundRectangle2D)getTempShape()).getTd().getRotateDegree(), Integer.parseInt(depthTextField.getText()),  (( TileRoundRectangle2D )getTempShape()).getTtd().getTextContext(), (( TileRoundRectangle2D )getTempShape()).getTtd().getX(), (( TileRoundRectangle2D )getTempShape()).getTtd().getY(), (( TileRoundRectangle2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TileRoundRectangle2D )getTempShape()).getTtd().getTextFont().getStyle(), (( TileRoundRectangle2D )getTempShape()).getTtd().getTextFont().getSize(), (( TileRoundRectangle2D )getTempShape()).getTtd().getTextColor(), ((TileRoundRectangle2D)getTempShape()).getTd().getBorderColor(), ((TileRoundRectangle2D)getTempShape()).getTd().getFillingColor()));
                    getStage().getTileList().add(Integer.parseInt(depthTextField.getText()), (TileRoundRectangle2D)getTempShape());
                    break;
                    case 7:
                    int[] x2 = new int[((TilePolygon2D)getTempShape()).getPointSize()];
                    int[] y2 = new int[((TilePolygon2D)getTempShape()).getPointSize()];

                    for(int i = 0; i < ((TilePolygon2D)getTempShape()).getPointSize(); i++) {
                        x2[i] = ((TilePolygon2D)getTempShape()).getXpoint()[i];
                        y2[i] = ((TilePolygon2D)getTempShape()).getYpoint()[i];
                    }
                    setTempShape(new TilePolygon2D(x2, y2, ((TilePolygon2D)getTempShape()).getPointSize(), true, ((TilePolygon2D)getTempShape()).getTd().getRotateDegree() , Integer.parseInt(depthTextField.getText()),  (( TilePolygon2D )getTempShape()).getTtd().getTextContext(), (( TilePolygon2D )getTempShape()).getTtd().getX(), (( TilePolygon2D )getTempShape()).getTtd().getY(), (( TilePolygon2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TilePolygon2D )getTempShape()).getTtd().getTextFont().getStyle(), (( TilePolygon2D )getTempShape()).getTtd().getTextFont().getSize(), (( TilePolygon2D )getTempShape()).getTtd().getTextColor(), ((TilePolygon2D)getTempShape()).getTd().getBorderColor(),((TilePolygon2D)getTempShape()).getTd().getFillingColor()));
                    getStage().getTileList().add(Integer.parseInt(depthTextField.getText()),(TilePolygon2D)getTempShape());
                    break;
                    case 8 :
                    setTempShape(new TileImage2D((int)((TileImage2D)getTempShape()).getX1(),(int)((TileImage2D)getTempShape()).getY1(),(int)((TileImage2D)getTempShape()).getX2() , (int)((TileImage2D)getTempShape()).getY2(),  (int)((TileImage2D)getTempShape()).getTd().getRotateDegree() , ((TileImage2D)getTempShape()).getTd().getDepth(), ((TileImage2D)getTempShape()).getBufferedImage(), ((TileImage2D)getTempShape()).getTd().getBorderColor(), ((TileImage2D)getTempShape()).getTd().getFillingColor()));
                    getStage().getTileList().add(Integer.parseInt(depthTextField.getText()),(TileImage2D)getTempShape());
                    break;
                    default:
                    break;
                }
                getStage().repaint();
                getStage().tempD = null;

                setTempShape(null);
                setSelectNumber(-1);
            }
            for(int i = 0; i < getStage().getTileList().size(); i++)    {
                getStage().getTileList().get(i).setDepth(i);
            }

            if(getStageList().size() > getMaxStageNumber()) {
                for(int i = getMaxStageNumber(); i < getStageList().size(); i++)   {
                    getStageList().remove(i);
                    i--;
                }
            }

            getStageList().add(getStage().clone());
            setStageNumber(getStageNumber() + 1);
            setMaxStageNumber(getStageNumber() + 1);

            setDownStage();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void undoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoBtnActionPerformed
        // TODO add your handling code here:
        if(isSelected())    {
            JOptionPane.showMessageDialog(null, "Please Unlock Tile.", "Tile is Locked.", JOptionPane.ERROR_MESSAGE);
        }
        else if(getStageNumber() > 0)    {
            minusStage();
            addStage(getStageList().get(getStageNumber() - 1).clone());
            setStageNumber(getStageNumber() - 1);
            setMaxStageNumber(getStageNumber() + 1);
            setDownStage();
            getStage().repaint();
            setDownStage();
        }
        else {
            JOptionPane.showMessageDialog(null, "No more back stage.", "Underflow While Loading Back Stage", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_undoBtnActionPerformed

    private void redoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoBtnActionPerformed
        // TODO add your handling code here:
        if(isSelected())    {
            JOptionPane.showMessageDialog(null, "Please Unlock Tile.", "Tile is Locked.", JOptionPane.ERROR_MESSAGE);
        }
        else if(getStageList().size() == getStageNumber() + 1){
            JOptionPane.showMessageDialog(null, "No more front stage.", "Overflow While Loading Front Stage", JOptionPane.ERROR_MESSAGE);
        }
        else {
            minusStage();
            addStage(getStageList().get(getStageNumber() + 1).clone());
            setStageNumber(getStageNumber() + 1);
            setMaxStageNumber(getStageNumber() + 1);
            setDownStage();
            getStage().repaint();
            setDownStage();
        }

    }//GEN-LAST:event_redoBtnActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        // Add ImageButton

        if(getStage().isImage() == false){
            getStage().setAllBoolean(false);
            getStage().setImage(true);
        }

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setMultiSelectionEnabled(false);
        if(fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            String fileName = fileChooser.getSelectedFile().toString();
            if(fileName.endsWith(".jpg") || fileName.endsWith(".png") || fileName.endsWith(".jpeg") )   {
                File sourceimage = new File(fileName);
                try {
                    Image image = ImageIO.read(sourceimage);
                    setBufferedImage(new BufferedImage(1000,1000,BufferedImage.TYPE_INT_RGB));
                    Graphics2D g2d = getBufferedImage().createGraphics();
                    g2d.drawImage(image, 0, 0, 1000,1000, this);
                    setImageSelected(true);
                } catch (IOException ex) {

                }
            }
            else {
                JOptionPane.showMessageDialog(null, "Please Select Picture.", "Picture Error.", JOptionPane.ERROR_MESSAGE);
            }

        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void polygonBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_polygonBtnActionPerformed
        // TODO add your handling code here:
        if(getStage().isPolygon() == false) {
            getStage().setAllBoolean(false);
            getStage().setPolygon(true);
        }
    }//GEN-LAST:event_polygonBtnActionPerformed

    private void circularPercentTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_circularPercentTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_circularPercentTextActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        if(getStage().isRoundRect() == false) {
            getStage().setAllBoolean(false);
            getStage().setRoundRect(true);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void selectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectBtnActionPerformed
        // TODO add your handling code here:
        if(getSelectState())    {
            setSelectState(false);
            setSelected(false);
            selectStateLabel.setText("X");
            for(int i = 0 ; i < getStage().getTileList().size(); i++)   {
                getStage().getTileList().get(i).setClicked(false);
                getStage().repaint();
            }
        }
        else {
            setSelectState(false);
            selectStateLabel.setText("X");
            setRemoveState(false);
            removeStateLabel.setText("X");
            setEraserState(false);
            eraserStateLabel.setText("X");
            setSelectState(true);
            selectStateLabel.setText("O");
        }
    }//GEN-LAST:event_selectBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int a = 0;
        a = JOptionPane.showOptionDialog(null,"Remove all?","Clear Message",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE,null,null,null);
        switch (a) {
            case JOptionPane.CLOSED_OPTION:
            break;
            case JOptionPane.YES_OPTION:
            Stage temp = getStageList().get(0).clone();
            getStage().getTileList().clear();
            getStage().repaint();
            getStageList().clear();

            getStageList().add(temp);
            setStageNumber(0);
            setMaxStageNumber(1);
            setDownStage();
            break;
            case JOptionPane.NO_OPTION:
            break;
            default:
            break;
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void fillingColorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fillingColorBtnActionPerformed
        JFrame tempFrame = new JFrame("Color Choosing");
        JButton tempButton = new JButton("Accept");
        JColorChooser colorChooser = new JColorChooser();
        tempButton.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                setFillingColor(colorChooser.getColor());
                fillingColorLabel.setBackground(getStage().getFillingColor());
                if(getSelectState())   {
                    if(isSelected())    {
                        if(getSelectNumber() == -1) {

                        }
                        else {
                            setTempShape(getStage().getTileList().get(getSelectNumber()));
                            getStage().getTileList().remove(getSelectNumber());
                            getStage().tempD = getTempShape();

                            switch (getTempShape().getShapeType()) {
                                case 1:

                                break;
                                case 2:
                                setTempShape(new TileEllipse2D((int)((TileEllipse2D)getTempShape()).getMinX(), (int)((TileEllipse2D)getTempShape()).getMinY(), (int)((TileEllipse2D)getTempShape()).getMaxX(), (int)((TileEllipse2D)getTempShape()).getMaxY(), ((TileEllipse2D)getTempShape()).getTd().getRotateDegree(),((TileEllipse2D)getTempShape()).getTd().getDepth(), (( TileEllipse2D )getTempShape()).getTtd().getTextContext(), (( TileEllipse2D )getTempShape()).getTtd().getX(), (( TileEllipse2D )getTempShape()).getTtd().getY(), (( TileEllipse2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TileEllipse2D )getTempShape()).getTtd().getTextFont().getStyle(), (( TileEllipse2D )getTempShape()).getTtd().getTextFont().getSize(), ((  TileEllipse2D)getTempShape()).getTtd().getTextColor(), getStage().getBorderColor(), getStage().getFillingColor()));
                                getStage().getTileList().add(getSelectNumber(),(TileEllipse2D)getTempShape());
                                break;
                                case 3:
                                setTempShape(new TileLine2D((int)((TileLine2D)getTempShape()).getX1(), (int)((TileLine2D)getTempShape()).getY1(), (int)((TileLine2D)getTempShape()).getX2(), (int)((TileLine2D)getTempShape()).getY2(), ((TileLine2D)getTempShape()).getTd().getRotateDegree(), ((TileLine2D)getTempShape()).getTd().getDepth(), getStage().getBorderColor()));
                                getStage().getTileList().add(getSelectNumber(),(TileLine2D)getTempShape());
                                break;
                                case 4:
                                setTempShape(new TilePolygon2D(((TilePolygon2D)getTempShape()).getXpoint(), ((TilePolygon2D)getTempShape()).getYpoint(), ((TilePolygon2D)getTempShape()).getPointSize(), ((TilePolygon2D)getTempShape()).isComplete(),((TilePolygon2D)getTempShape()).getTd().getRotateDegree(), ((TilePolygon2D)getTempShape()).getTd().getDepth(), (( TilePolygon2D )getTempShape()).getTtd().getTextContext(), (( TilePolygon2D )getTempShape()).getTtd().getX(), (( TilePolygon2D )getTempShape()).getTtd().getY(), (( TilePolygon2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TilePolygon2D )getTempShape()).getTtd().getTextFont().getStyle(), ((TilePolygon2D  )getTempShape()).getTtd().getTextFont().getSize(), (( TilePolygon2D )getTempShape()).getTtd().getTextColor(), getStage().getBorderColor(), getStage().getFillingColor()));
                                getStage().getTileList().add(getSelectNumber(),(TilePolygon2D)getTempShape());
                                break;
                                case 5:
                                setTempShape(new TileRectangle2D(((TileRectangle2D)getTempShape()).getLeftTopX(), ((TileRectangle2D)getTempShape()).getLeftTopY(), ((TileRectangle2D)getTempShape()).getRightBottomX(), ((TileRectangle2D)getTempShape()).getRightBottomY(),((TileRectangle2D)getTempShape()).getTd().getRotateDegree(),((TileRectangle2D)getTempShape()).getTd().getDepth(), (( TileRectangle2D )getTempShape()).getTtd().getTextContext(), (( TileRectangle2D )getTempShape()).getTtd().getX(), (( TileRectangle2D )getTempShape()).getTtd().getY(), (( TileRectangle2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TileRectangle2D )getTempShape()).getTtd().getTextFont().getStyle(), (( TileRectangle2D )getTempShape()).getTtd().getTextFont().getSize(), (( TileRectangle2D )getTempShape()).getTtd().getTextColor(), getStage().getBorderColor(), getStage().getFillingColor()));
                                getStage().getTileList().add(getSelectNumber(),(TileRectangle2D)getTempShape());
                                break;
                                case 6:
                                setTempShape(new TileRoundRectangle2D((int)((TileRoundRectangle2D)getTempShape()).getLeftTopX(),(int)((TileRoundRectangle2D)getTempShape()).getLeftTopY(),(int)((TileRoundRectangle2D)getTempShape()).getRightBottomX(), (int)((TileRoundRectangle2D)getTempShape()).getRightBottomY(), (int)((TileRoundRectangle2D)getTempShape()).getArcWidth(), (int)((TileRoundRectangle2D)getTempShape()).getArcHeight(),(int)((TileRoundRectangle2D)getTempShape()).getTd().getRotateDegree(), (int)((TileRoundRectangle2D)getTempShape()).getTd().getDepth(), (( TileRoundRectangle2D )getTempShape()).getTtd().getTextContext(), ((  TileRoundRectangle2D)getTempShape()).getTtd().getX(), (( TileRoundRectangle2D )getTempShape()).getTtd().getY(), (( TileRoundRectangle2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TileRoundRectangle2D )getTempShape()).getTtd().getTextFont().getStyle(), ((  TileRoundRectangle2D)getTempShape()).getTtd().getTextFont().getSize(), (( TileRoundRectangle2D )getTempShape()).getTtd().getTextColor(), getStage().getBorderColor(), getStage().getFillingColor()));
                                getStage().getTileList().add(getSelectNumber(),(TileRoundRectangle2D)getTempShape());
                                break;
                                case 7:
                                setTempShape(new TilePolygon2D(((TilePolygon2D)getTempShape()).getXpoint(), ((TilePolygon2D)getTempShape()).getYpoint(), ((TilePolygon2D)getTempShape()).getPointSize(), ((TilePolygon2D)getTempShape()).isComplete(),((TilePolygon2D)getTempShape()).getTd().getRotateDegree(),  ((TilePolygon2D)getTempShape()).getTd().getDepth(),  (( TilePolygon2D )getTempShape()).getTtd().getTextContext(), (( TilePolygon2D )getTempShape()).getTtd().getX(), (( TilePolygon2D )getTempShape()).getTtd().getY(), (( TilePolygon2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TilePolygon2D )getTempShape()).getTtd().getTextFont().getStyle(), ((TilePolygon2D  )getTempShape()).getTtd().getTextFont().getSize(), (( TilePolygon2D )getTempShape()).getTtd().getTextColor(), getStage().getBorderColor(), getStage().getFillingColor()));
                                getStage().getTileList().add(getSelectNumber(),(TilePolygon2D)getTempShape());
                                break;
                                case 8:
                                setTempShape(new TileImage2D((int)((TileImage2D)getTempShape()).getX1(),(int)((TileImage2D)getTempShape()).getY1(),(int)((TileImage2D)getTempShape()).getX2() , (int)((TileImage2D)getTempShape()).getY2(),  (int)((TileImage2D)getTempShape()).getTd().getRotateDegree() , ((TileImage2D)getTempShape()).getTd().getDepth(), ((TileImage2D)getTempShape()).getBufferedImage(), getStage().getBorderColor(), getStage().getFillingColor()));
                                getStage().getTileList().add(getSelectNumber(),(TileImage2D)getTempShape());
                                break;
                                default:
                                break;
                            }
                            getStage().repaint();
                            setTempShape(null);
                            setSelectNumber(-1);
                        }
                    }
                }
                tempFrame.setVisible(false);
                tempFrame.dispose();

                getStage().tempD = null;

                if(getStageList().size() > getMaxStageNumber()) {
                    for(int i = getMaxStageNumber(); i < getStageList().size(); i++)   {
                        getStageList().remove(i);
                        i--;
                    }
                }

                getStageList().add(getStage().clone());
                setStageNumber(getStageNumber() + 1);
                setMaxStageNumber(getStageNumber() + 1);
                setDownStage();
            }
        });
        tempFrame.setLayout(new BorderLayout());
        tempFrame.add(colorChooser, BorderLayout.CENTER);
        tempFrame.add(tempButton, BorderLayout.SOUTH);
        tempFrame.setSize(450, 500);
        tempFrame.setVisible(true);
    }//GEN-LAST:event_fillingColorBtnActionPerformed

    private void borderLineColorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borderLineColorBtnActionPerformed
        // TODO add your handling code here:
        JFrame tempFrame = new JFrame("Color Choosing");
        JButton tempButton = new JButton("Accept");
        JColorChooser colorChooser = new JColorChooser();
        tempButton.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                setBorderColor(colorChooser.getColor());
                borderColorLabel.setBackground(getStage().getBorderColor());
                if(getSelectState())   {
                    if(isSelected())    {
                        if(getSelectNumber() == -1) {

                        }
                        else {
                            setTempShape(getStage().getTileList().get(getSelectNumber()));
                            getStage().getTileList().remove(getSelectNumber());
                            getStage().tempD = getTempShape();

                            switch (getTempShape().getShapeType()) {
                                case 1:

                                break;
                                case 2:
                                setTempShape(new TileEllipse2D((int)((TileEllipse2D)getTempShape()).getMinX(), (int)((TileEllipse2D)getTempShape()).getMinY(), (int)((TileEllipse2D)getTempShape()).getMaxX(), (int)((TileEllipse2D)getTempShape()).getMaxY(), ((TileEllipse2D)getTempShape()).getTd().getRotateDegree(),((TileEllipse2D)getTempShape()).getTd().getDepth() ,  (( TileEllipse2D )getTempShape()).getTtd().getTextContext(), (( TileEllipse2D )getTempShape()).getTtd().getX(), (( TileEllipse2D )getTempShape()).getTtd().getY(), (( TileEllipse2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TileEllipse2D )getTempShape()).getTtd().getTextFont().getStyle(), (( TileEllipse2D )getTempShape()).getTtd().getTextFont().getSize(), ((  TileEllipse2D)getTempShape()).getTtd().getTextColor(), getStage().getBorderColor(), getStage().getFillingColor()));
                                getStage().getTileList().add(getSelectNumber(),(TileEllipse2D)getTempShape());
                                break;
                                case 3:
                                setTempShape(new TileLine2D((int)((TileLine2D)getTempShape()).getX1(), (int)((TileLine2D)getTempShape()).getY1(), (int)((TileLine2D)getTempShape()).getX2(), (int)((TileLine2D)getTempShape()).getY2(), ((TileLine2D)getTempShape()).getTd().getRotateDegree(), ((TileLine2D)getTempShape()).getTd().getDepth(), getStage().getBorderColor()));
                                getStage().getTileList().add(getSelectNumber(),(TileLine2D)getTempShape());
                                break;
                                case 4:
                                setTempShape(new TilePolygon2D(((TilePolygon2D)getTempShape()).getXpoint(), ((TilePolygon2D)getTempShape()).getYpoint(), ((TilePolygon2D)getTempShape()).getPointSize(), ((TilePolygon2D)getTempShape()).isComplete(),((TilePolygon2D)getTempShape()).getTd().getRotateDegree(), ((TilePolygon2D)getTempShape()).getTd().getDepth(),  (( TilePolygon2D )getTempShape()).getTtd().getTextContext(), (( TilePolygon2D )getTempShape()).getTtd().getX(), (( TilePolygon2D )getTempShape()).getTtd().getY(), (( TilePolygon2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TilePolygon2D )getTempShape()).getTtd().getTextFont().getStyle(), ((TilePolygon2D  )getTempShape()).getTtd().getTextFont().getSize(), (( TilePolygon2D )getTempShape()).getTtd().getTextColor(), getStage().getBorderColor(), getStage().getFillingColor()));
                                getStage().getTileList().add(getSelectNumber(),(TilePolygon2D)getTempShape());
                                break;
                                case 5:
                                setTempShape(new TileRectangle2D(((TileRectangle2D)getTempShape()).getLeftTopX(), ((TileRectangle2D)getTempShape()).getLeftTopY(), ((TileRectangle2D)getTempShape()).getRightBottomX(), ((TileRectangle2D)getTempShape()).getRightBottomY(), ((TileRectangle2D)getTempShape()).getTd().getRotateDegree(),((TileRectangle2D)getTempShape()).getTd().getDepth(), (( TileRectangle2D )getTempShape()).getTtd().getTextContext(), (( TileRectangle2D )getTempShape()).getTtd().getX(), (( TileRectangle2D )getTempShape()).getTtd().getY(), (( TileRectangle2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TileRectangle2D )getTempShape()).getTtd().getTextFont().getStyle(), (( TileRectangle2D )getTempShape()).getTtd().getTextFont().getSize(), (( TileRectangle2D )getTempShape()).getTtd().getTextColor(), getStage().getBorderColor(), getStage().getFillingColor()));
                                getStage().getTileList().add(getSelectNumber(),(TileRectangle2D)getTempShape());
                                break;
                                case 6:
                                setTempShape(new TileRoundRectangle2D((int)((TileRoundRectangle2D)getTempShape()).getLeftTopX(),(int)((TileRoundRectangle2D)getTempShape()).getLeftTopY(),(int)((TileRoundRectangle2D)getTempShape()).getRightBottomX(), (int)((TileRoundRectangle2D)getTempShape()).getRightBottomY(), (int)((TileRoundRectangle2D)getTempShape()).getArcWidth(), (int)((TileRoundRectangle2D)getTempShape()).getArcHeight(), (int)((TileRoundRectangle2D)getTempShape()).getTd().getRotateDegree(), (int)((TileRoundRectangle2D)getTempShape()).getTd().getDepth(),  (( TileRoundRectangle2D )getTempShape()).getTtd().getTextContext(), ((  TileRoundRectangle2D)getTempShape()).getTtd().getX(), (( TileRoundRectangle2D )getTempShape()).getTtd().getY(), (( TileRoundRectangle2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TileRoundRectangle2D )getTempShape()).getTtd().getTextFont().getStyle(), ((  TileRoundRectangle2D)getTempShape()).getTtd().getTextFont().getSize(), (( TileRoundRectangle2D )getTempShape()).getTtd().getTextColor(), getStage().getBorderColor(), getStage().getFillingColor()));
                                getStage().getTileList().add(getSelectNumber(),(TileRoundRectangle2D)getTempShape());
                                break;
                                case 7:
                                setTempShape(new TilePolygon2D(((TilePolygon2D)getTempShape()).getXpoint(), ((TilePolygon2D)getTempShape()).getYpoint(), ((TilePolygon2D)getTempShape()).getPointSize(), ((TilePolygon2D)getTempShape()).isComplete(),((TilePolygon2D)getTempShape()).getTd().getRotateDegree(), ((TilePolygon2D)getTempShape()).getTd().getDepth(),   (( TilePolygon2D )getTempShape()).getTtd().getTextContext(), (( TilePolygon2D )getTempShape()).getTtd().getX(), (( TilePolygon2D )getTempShape()).getTtd().getY(), (( TilePolygon2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TilePolygon2D )getTempShape()).getTtd().getTextFont().getStyle(), ((TilePolygon2D  )getTempShape()).getTtd().getTextFont().getSize(), (( TilePolygon2D )getTempShape()).getTtd().getTextColor(), getStage().getBorderColor(), getStage().getFillingColor()));
                                getStage().getTileList().add(getSelectNumber(),(TilePolygon2D)getTempShape());
                                break;
                                case 8:
                                setTempShape(new TileImage2D((int)((TileImage2D)getTempShape()).getX1(),(int)((TileImage2D)getTempShape()).getY1(),(int)((TileImage2D)getTempShape()).getX2() , (int)((TileImage2D)getTempShape()).getY2(),  (int)((TileImage2D)getTempShape()).getTd().getRotateDegree() , ((TileImage2D)getTempShape()).getTd().getDepth(), ((TileImage2D)getTempShape()).getBufferedImage(), getStage().getBorderColor(), getStage().getFillingColor()));
                                getStage().getTileList().add(getSelectNumber(),(TileImage2D)getTempShape());
                                break;
                                default:
                                break;
                            }
                            getStage().repaint();
                            setTempShape(null);
                            setSelectNumber(-1);
                        }
                    }
                }
                tempFrame.setVisible(false);
                tempFrame.dispose();

                getStage().tempD = null;

                if(getStageList().size() > getMaxStageNumber()) {
                    for(int i = getMaxStageNumber(); i < getStageList().size(); i++)   {
                        getStageList().remove(i);
                        i--;
                    }
                }

                getStageList().add(getStage().clone());
                setStageNumber(getStageNumber() + 1);
                setMaxStageNumber(getStageNumber() + 1);
                setDownStage();
            }
        });
        tempFrame.setLayout(new BorderLayout());
        tempFrame.add(colorChooser, BorderLayout.CENTER);
        tempFrame.add(tempButton, BorderLayout.SOUTH);
        tempFrame.setSize(450, 500);
        tempFrame.setVisible(true);
    }//GEN-LAST:event_borderLineColorBtnActionPerformed

    private void ovalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ovalBtnActionPerformed
        // TODO add your handling code here:
        // If ovalBtn is selected.
        if(getStage().isOval() == false) {
            getStage().setAllBoolean(false);
            getStage().setOval(true);
        }
    }//GEN-LAST:event_ovalBtnActionPerformed

    private void circleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_circleBtnActionPerformed
        // TODO add your handling code here:
        // If circleBtn is selected.
        if(getStage().isCircle() == false)  {
            getStage().setAllBoolean(false);
            getStage().setCircle(true);
        }
    }//GEN-LAST:event_circleBtnActionPerformed

    private void rectangleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectangleBtnActionPerformed
        // TODO add your handling code here:
        // If rectangleBtn is selected.
        if(getStage().isRectangle() == false) {
            getStage().setAllBoolean(false);
            getStage().setRectangle(true);
        }
    }//GEN-LAST:event_rectangleBtnActionPerformed

    private void lineBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineBtnActionPerformed
        // TODO add your handling code here:
        // If lineBtn is selected.
        if(getStage().isLine() == false)  {
            getStage().setAllBoolean(false);
            getStage().setLine(true);
        }
    }//GEN-LAST:event_lineBtnActionPerformed

    private void freeArcBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_freeArcBtnActionPerformed
        // TODO add your handling code here:
        if(getStage().isFreeLine() == false){
            getStage().setAllBoolean(false);
            getStage().setFreeLine(true);
        }
    }//GEN-LAST:event_freeArcBtnActionPerformed

    private void jButton27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton27ActionPerformed
        // TODO add your handling code here:
        // Make do button on location.
        if(getSelectState())   {
            if(isSelected())    {
                if(getSelectNumber() == -1) {

                }
                else {
                    Drawable compareTile = getStage().getTileList().get(getSelectNumber());
                    int changedX, changedY;
                    switch( compareTile.getShapeType() ) {
                        case 1:

                        break;
                        
                        case 2:
                            //localX, localY 2개의 위치로 바꾸기
                            TileEllipse2D oldte2D = (TileEllipse2D)compareTile;
                            TileEllipse2D te2D = oldte2D.clone();
                            
                            changedX = Integer.parseInt(localX.getText()) - (int)te2D.getMinX();
                            changedY = Integer.parseInt(localY.getText()) - (int)te2D.getMinY();
                            
                            te2D.setMinX(Integer.parseInt(localX.getText()));
                            te2D.setMinY(Integer.parseInt(localY.getText()));
                            te2D.setMaxX((int)te2D.getMaxX() + changedX);
                            te2D.setMaxY((int)te2D.getMaxY() + changedY);
                            te2D.getTtd().setX(te2D.getTtd().getX() + changedX);
                            te2D.getTtd().setY(te2D.getTtd().getY() + changedY);
                            
                            textLocalX.setText(String.valueOf(te2D.getTtd().getX() + changedX));
                            textLocalY.setText(String.valueOf(te2D.getTtd().getY() + changedY));

                            getStage().getTileList().remove(te2D.getDepth());
                            getStage().getTileList().add(te2D.getDepth(),te2D);
                        break;
                        
                        case 3:
                            TileLine2D oldtl2D = (TileLine2D)compareTile;
                            TileLine2D tl2D = oldtl2D.clone();
                            
                            changedX = Integer.parseInt(localX.getText()) - (int)tl2D.getX1();
                            changedY = Integer.parseInt(localY.getText()) - (int)tl2D.getY1();
                            
                            tl2D.setX1(Integer.parseInt(localX.getText()));
                            tl2D.setY1(Integer.parseInt(localY.getText()));
                            tl2D.setX2((int)tl2D.getX2() + changedX);
                            tl2D.setY2((int)tl2D.getY2() + changedY);

                            getStage().getTileList().remove(tl2D.getDepth());
                            getStage().getTileList().add(tl2D.getDepth(),tl2D);
                        break;
                        
                        case 4:
                            TilePolygon2D oldtp2D = (TilePolygon2D)compareTile;
                            TilePolygon2D tp2D = oldtp2D.clone();
                            
                            changedX = Integer.parseInt(localX.getText()) - (int)tp2D.getXpoint()[0];
                            changedY = Integer.parseInt(localY.getText()) - (int)tp2D.getYpoint()[0];
                            
                            int[] tempX = new int[tp2D.getPointSize()];
                            int[] tempY = new int[tp2D.getPointSize()];
                            
                            for(int i = 0 ; i < tp2D.getPointSize(); i++)   {
                                tempX[i] = tp2D.getXpoint()[i] + changedX;
                                tempY[i] = tp2D.getYpoint()[i] + changedY;
                            }
                            
                            tp2D.setXpoint(tempX);
                            tp2D.setYpoint(tempY);
                            
                            tp2D.setBorderPoint();
                            
                            getStage().getTileList().remove(tp2D.getDepth());
                            getStage().getTileList().add(tp2D.getDepth(),tp2D);
                        break;
                        
                        case 5:
                            TileRectangle2D oldtr2D = (TileRectangle2D)compareTile;
                            TileRectangle2D tr2D = oldtr2D.clone();
                            
                            changedX = Integer.parseInt(localX.getText()) - (int)tr2D.getLeftTopX();
                            changedY = Integer.parseInt(localY.getText()) - (int)tr2D.getLeftTopY();
                            
                            tr2D.setLeftTopX(Integer.parseInt(localX.getText()));
                            tr2D.setLeftTopY(Integer.parseInt(localY.getText()));
                            tr2D.setRightBottomX((int)tr2D.getRightBottomX() + changedX);
                            tr2D.setRightBottomY((int)tr2D.getRightBottomY() + changedY);
                            tr2D.getTtd().setX(tr2D.getTtd().getX() + changedX);
                            tr2D.getTtd().setY(tr2D.getTtd().getY() + changedY);
                            
                            textLocalX.setText(String.valueOf(tr2D.getTtd().getX() + changedX));
                            textLocalY.setText(String.valueOf(tr2D.getTtd().getY() + changedY));

                            getStage().getTileList().remove(tr2D.getDepth());
                            getStage().getTileList().add(tr2D.getDepth(),tr2D);
                        break;
                        
                        case 6:
                            TileRoundRectangle2D oldtrr2D = (TileRoundRectangle2D)compareTile;
                            TileRoundRectangle2D trr2D = oldtrr2D.clone();
                            
                            changedX = Integer.parseInt(localX.getText()) - (int)trr2D.getLeftTopX();
                            changedY = Integer.parseInt(localY.getText()) - (int)trr2D.getLeftTopY();
                            
                            trr2D.setLeftTopX(Integer.parseInt(localX.getText()));
                            trr2D.setLeftTopY(Integer.parseInt(localY.getText()));
                            trr2D.setRightBottomX((int)trr2D.getRightBottomX() + changedX);
                            trr2D.setRightBottomY((int)trr2D.getRightBottomY() + changedY);
                            trr2D.getTtd().setX(trr2D.getTtd().getX() + changedX);
                            trr2D.getTtd().setY(trr2D.getTtd().getY() + changedY);
                            
                            textLocalX.setText(String.valueOf(trr2D.getTtd().getX() + changedX));
                            textLocalY.setText(String.valueOf(trr2D.getTtd().getY() + changedY));

                            getStage().getTileList().remove(trr2D.getDepth());
                            getStage().getTileList().add(trr2D.getDepth(),trr2D);
                        break;
                        
                        case 7:
                            TilePolygon2D oldtpp2D = (TilePolygon2D)compareTile;
                            TilePolygon2D tpp2D = oldtpp2D.clone();
                            
                            changedX = Integer.parseInt(localX.getText()) - (int)tpp2D.getXpoint()[0];
                            changedY = Integer.parseInt(localY.getText()) - (int)tpp2D.getYpoint()[0];
                            
                            int[] tempX2 = new int[tpp2D.getPointSize()];
                            int[] tempY2 = new int[tpp2D.getPointSize()];
                            
                            for(int i = 0 ; i < tpp2D.getPointSize(); i++)   {
                                tempX2[i] = tpp2D.getXpoint()[i] + changedX;
                                tempY2[i] = tpp2D.getYpoint()[i] + changedY;
                            }
                            
                            tpp2D.setXpoint(tempX2);
                            tpp2D.setYpoint(tempY2);
                            
                            tpp2D.getTtd().setX(tpp2D.getTtd().getX() + changedX);
                            tpp2D.getTtd().setY(tpp2D.getTtd().getY() + changedY);
                            
                            textLocalX.setText(String.valueOf(tpp2D.getTtd().getX() + changedX));
                            textLocalY.setText(String.valueOf(tpp2D.getTtd().getY() + changedY));
                            
                            tpp2D.setBorderPoint();
                            
                            getStage().getTileList().remove(tpp2D.getDepth());
                            getStage().getTileList().add(tpp2D.getDepth(),tpp2D);
                        break;
                        
                        case 8:
                            TileImage2D oldti2D = (TileImage2D)compareTile;
                            TileImage2D ti2D = oldti2D.clone();
                            
                            changedX = Integer.parseInt(localX.getText()) - (int)ti2D.getX1();
                            changedY = Integer.parseInt(localY.getText()) - (int)ti2D.getY1();
                            
                            ti2D.setX1(Integer.parseInt(localX.getText()));
                            ti2D.setY1(Integer.parseInt(localY.getText()));
                            ti2D.setX2((int)ti2D.getX2() + changedX);
                            ti2D.setY2((int)ti2D.getY2() + changedY);
                            
                            getStage().getTileList().remove(ti2D.getDepth());
                            getStage().getTileList().add(ti2D.getDepth(),ti2D);
                        break;
                        
                        default:
                            
                        break;
                    }
                    
                    setDepth();
                    setPastState();
                    setDownStage();
                    getStage().repaint();
                }
            }
        }
    }//GEN-LAST:event_jButton27ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        // TODO add your handling code here:
        if(getSelectState())   {
            if(isSelected())    {
                if(getSelectNumber() == -1) {

                }
                else {
                    Drawable compareTile = getStage().getTileList().get(getSelectNumber());
                    
                    switch( compareTile.getShapeType() ) {
                        case 1:

                        break;
                        
                        case 2:
                            TileEllipse2D oldte2D = (TileEllipse2D)compareTile;
                            TileEllipse2D te2D = oldte2D.clone();
                            
                            if(te2D.getDepth() + 1 != getStage().getTileList().size())    {
                                te2D.setDepth(te2D.getDepth()+1);
                                depthTextField.setText(String.valueOf(te2D.getDepth()));
                                
                                getStage().getTileList().remove(getSelectNumber());
                                setSelectNumber(getSelectNumber() + 1);
                                getStage().getTileList().add(te2D.getDepth(),te2D);
                            }
                            else {
                                
                            }
                        break;
                        
                        case 3:
                            TileLine2D oldtl2D = (TileLine2D)compareTile;
                            TileLine2D tl2D = oldtl2D.clone();
                            
                            if(tl2D.getDepth() + 1 != getStage().getTileList().size())    {
                                tl2D.setDepth(tl2D.getDepth()+1);
                                depthTextField.setText(String.valueOf(tl2D.getDepth()));
                                
                                getStage().getTileList().remove(getSelectNumber());
                                setSelectNumber(getSelectNumber() + 1);
                                getStage().getTileList().add(tl2D.getDepth(),tl2D);
                            }
                            else {
                                
                            }
                        break;
                        
                        case 4:
                            TilePolygon2D oldtp2D = (TilePolygon2D)compareTile;
                            TilePolygon2D tp2D = oldtp2D.clone();
                            
                            if(tp2D.getDepth() + 1 != getStage().getTileList().size())    {
                                tp2D.setDepth(tp2D.getDepth()+1);
                                depthTextField.setText(String.valueOf(tp2D.getDepth()));
                                
                                getStage().getTileList().remove(getSelectNumber());
                                setSelectNumber(getSelectNumber() + 1);
                                getStage().getTileList().add(tp2D.getDepth(),tp2D);
                            }
                            else {
                                
                            }
                        break;
                        
                        case 5:
                            TileRectangle2D oldtr2D = (TileRectangle2D)compareTile;
                            TileRectangle2D tr2D = oldtr2D.clone();
                            
                            if(tr2D.getDepth() + 1 != getStage().getTileList().size())    {
                                tr2D.setDepth(tr2D.getDepth()+1);
                                depthTextField.setText(String.valueOf(tr2D.getDepth()));
                                
                                getStage().getTileList().remove(getSelectNumber());
                                setSelectNumber(getSelectNumber() + 1);
                                getStage().getTileList().add(tr2D.getDepth(),tr2D);
                            }
                            else {
                                
                            }
                        break;
                        
                        case 6:
                            TileRoundRectangle2D oldtrr2D = (TileRoundRectangle2D)compareTile;
                            TileRoundRectangle2D trr2D = oldtrr2D.clone();
                            
                            if(trr2D.getDepth() + 1 != getStage().getTileList().size())    {
                                trr2D.setDepth(trr2D.getDepth()+1);
                                depthTextField.setText(String.valueOf(trr2D.getDepth()));
                                
                                getStage().getTileList().remove(getSelectNumber());
                                setSelectNumber(getSelectNumber() + 1);
                                getStage().getTileList().add(trr2D.getDepth(),trr2D);
                            }
                            else {
                                
                            }
                        break;
                        
                        case 7:
                            TilePolygon2D oldtpp2D = (TilePolygon2D)compareTile;
                            TilePolygon2D tpp2D = oldtpp2D.clone();
                            
                            if(tpp2D.getDepth() + 1 != getStage().getTileList().size())    {
                                tpp2D.setDepth(tpp2D.getDepth()+1);
                                depthTextField.setText(String.valueOf(tpp2D.getDepth()));
                                
                                getStage().getTileList().remove(getSelectNumber());
                                setSelectNumber(getSelectNumber() + 1);
                                getStage().getTileList().add(tpp2D.getDepth(),tpp2D);
                            }
                            else {
                                
                            }
                        break;
                        
                        case 8:
                            TileImage2D oldti2D = (TileImage2D)compareTile;
                            TileImage2D ti2D = oldti2D.clone();
                            
                            if(ti2D.getDepth() + 1 != getStage().getTileList().size())    {
                                ti2D.setDepth(ti2D.getDepth()+1);
                                depthTextField.setText(String.valueOf(ti2D.getDepth()));
                                
                                getStage().getTileList().remove(getSelectNumber());
                                setSelectNumber(getSelectNumber() + 1);
                                getStage().getTileList().add(ti2D.getDepth(),ti2D);
                            }
                            else {
                                
                            }
                        break;
                        default:
                            
                        break;
                    }
                    
                    setDepth();
                    setPastState();
                    setDownStage();
                    getStage().repaint();
                }
            }
        }
    }//GEN-LAST:event_jButton17ActionPerformed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        // TODO add your handling code here:
        if(getSelectState())   {
            if(isSelected())    {
                if(getSelectNumber() == -1) {

                }
                else {
                    Drawable compareTile = getStage().getTileList().get(getSelectNumber());
                    
                    switch( compareTile.getShapeType() ) {
                        case 1:

                        break;
                        
                        case 2:
                            TileEllipse2D oldte2D = (TileEllipse2D)compareTile;
                            TileEllipse2D te2D = oldte2D.clone();
                            
                            if(te2D.getDepth() != 0)    {
                                te2D.setDepth(te2D.getDepth()-1);
                                depthTextField.setText(String.valueOf(te2D.getDepth()));
                                
                                getStage().getTileList().remove(getSelectNumber());
                                getStage().getTileList().add(te2D.getDepth(),te2D);
                                setSelectNumber(getSelectNumber() - 1);
                            }
                            else {
                                
                            }
                        break;
                        
                        case 3:
                            TileLine2D oldtl2D = (TileLine2D)compareTile;
                            TileLine2D tl2D = oldtl2D.clone();
                            
                            if(tl2D.getDepth() != 0)    {
                                tl2D.setDepth(tl2D.getDepth()-1);
                                depthTextField.setText(String.valueOf(tl2D.getDepth()));
                                
                                getStage().getTileList().remove(getSelectNumber());
                                getStage().getTileList().add(tl2D.getDepth(),tl2D);
                                setSelectNumber(getSelectNumber() - 1);
                            }
                            else {
                                
                            }
                        break;
                        
                        case 4:
                            TilePolygon2D oldtp2D = (TilePolygon2D)compareTile;
                            TilePolygon2D tp2D = oldtp2D.clone();
                            
                            if(tp2D.getDepth() != 0)    {
                                tp2D.setDepth(tp2D.getDepth()-1);
                                depthTextField.setText(String.valueOf(tp2D.getDepth()));
                                
                                getStage().getTileList().remove(getSelectNumber());
                                getStage().getTileList().add(tp2D.getDepth(),tp2D);
                                setSelectNumber(getSelectNumber() - 1);
                            }
                            else {
                                
                            }
                        break;
                        
                        case 5:
                            TileRectangle2D oldtr2D = (TileRectangle2D)compareTile;
                            TileRectangle2D tr2D = oldtr2D.clone();
                            
                            if(tr2D.getDepth() != 0)    {
                                tr2D.setDepth(tr2D.getDepth()-1);
                                depthTextField.setText(String.valueOf(tr2D.getDepth()));
                                
                                getStage().getTileList().remove(getSelectNumber());
                                getStage().getTileList().add(tr2D.getDepth(),tr2D);
                                setSelectNumber(getSelectNumber() - 1);
                            }
                            else {
                                
                            }
                        break;
                        
                        case 6:
                            TileRoundRectangle2D oldtrr2D = (TileRoundRectangle2D)compareTile;
                            TileRoundRectangle2D trr2D = oldtrr2D.clone();
                            
                            if(trr2D.getDepth() != 0)    {
                                trr2D.setDepth(trr2D.getDepth()-1);
                                depthTextField.setText(String.valueOf(trr2D.getDepth()));
                                
                                getStage().getTileList().remove(getSelectNumber());
                                getStage().getTileList().add(trr2D.getDepth(),trr2D);
                                setSelectNumber(getSelectNumber() - 1);
                            }
                            else {
                                
                            }
                        break;
                        
                        case 7:
                            TilePolygon2D oldtpp2D = (TilePolygon2D)compareTile;
                            TilePolygon2D tpp2D = oldtpp2D.clone();
                            
                            if(tpp2D.getDepth() != 0)    {
                                tpp2D.setDepth(tpp2D.getDepth()-1);
                                depthTextField.setText(String.valueOf(tpp2D.getDepth()));
                                
                                getStage().getTileList().remove(getSelectNumber());
                                getStage().getTileList().add(tpp2D.getDepth(),tpp2D);
                                setSelectNumber(getSelectNumber() - 1);
                            }
                            else {
                                
                            }
                        break;
                        
                        case 8:
                            TileImage2D oldti2D = (TileImage2D)compareTile;
                            TileImage2D ti2D = oldti2D.clone();
                            
                            if(ti2D.getDepth() != 0)    {
                                ti2D.setDepth(ti2D.getDepth()-1);
                                depthTextField.setText(String.valueOf(ti2D.getDepth()));
                                
                                getStage().getTileList().remove(getSelectNumber());
                                getStage().getTileList().add(ti2D.getDepth(),ti2D);
                                setSelectNumber(getSelectNumber() - 1);
                            }
                            else {
                                
                            }
                        break;
                        default:
                            
                        break;
                    }
                    
                    setDepth();
                    setPastState();
                    setDownStage();
                    getStage().repaint();
                }
            }
        }
    }//GEN-LAST:event_jButton18ActionPerformed

    private void jButton19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton19ActionPerformed
        // TODO add your handling code here:
        if(getSelectState())   {
            if(isSelected())    {
                if(getSelectNumber() == -1) {

                }
                else {
                    Drawable compareTile = getStage().getTileList().get(getSelectNumber());
                    
                    switch( compareTile.getShapeType() ) {
                        case 1:

                        break;
                        
                        case 2:
                            TileEllipse2D oldte2D = (TileEllipse2D)compareTile;
                            TileEllipse2D te2D = oldte2D.clone();
                            
                            te2D.getTd().setRotateDegree(te2D.getTd().getRotateDegree() + 5);
                            rotationTextField.setText(String.valueOf(te2D.getTd().getRotateDegree()));

                            getStage().getTileList().remove(te2D.getDepth());
                            getStage().getTileList().add(te2D.getDepth(),te2D);
                        break;
                        
                        case 3:
                            TileLine2D oldtl2D = (TileLine2D)compareTile;
                            TileLine2D tl2D = oldtl2D.clone();
                            
                            tl2D.getTd().setRotateDegree(tl2D.getTd().getRotateDegree() + 5);
                            rotationTextField.setText(String.valueOf(tl2D.getTd().getRotateDegree()));

                            getStage().getTileList().remove(tl2D.getDepth());
                            getStage().getTileList().add(tl2D.getDepth(),tl2D);
                        break;
                        
                        case 4:
                            TilePolygon2D oldtp2D = (TilePolygon2D)compareTile;
                            TilePolygon2D tp2D = oldtp2D.clone();
                            
                            tp2D.getTd().setRotateDegree(tp2D.getTd().getRotateDegree() + 5);
                            rotationTextField.setText(String.valueOf(tp2D.getTd().getRotateDegree()));

                            getStage().getTileList().remove(tp2D.getDepth());
                            getStage().getTileList().add(tp2D.getDepth(),tp2D);
                        break;
                        
                        case 5:
                            TileRectangle2D oldtr2D = (TileRectangle2D)compareTile;
                            TileRectangle2D tr2D = oldtr2D.clone();
                            
                            tr2D.getTd().setRotateDegree(tr2D.getTd().getRotateDegree() + 5);
                            rotationTextField.setText(String.valueOf(tr2D.getTd().getRotateDegree()));

                            getStage().getTileList().remove(tr2D.getDepth());
                            getStage().getTileList().add(tr2D.getDepth(),tr2D);
                        break;
                        
                        case 6:
                            TileRoundRectangle2D oldtrr2D = (TileRoundRectangle2D)compareTile;
                            TileRoundRectangle2D trr2D = oldtrr2D.clone();
                            
                            trr2D.getTd().setRotateDegree(trr2D.getTd().getRotateDegree() + 5);
                            rotationTextField.setText(String.valueOf(trr2D.getTd().getRotateDegree()));

                            getStage().getTileList().remove(trr2D.getDepth());
                            getStage().getTileList().add(trr2D.getDepth(),trr2D);
                        break;
                        
                        case 7:
                            TilePolygon2D oldtpp2D = (TilePolygon2D)compareTile;
                            TilePolygon2D tpp2D = oldtpp2D.clone();
                            
                            tpp2D.getTd().setRotateDegree(tpp2D.getTd().getRotateDegree() + 5);
                            rotationTextField.setText(String.valueOf(tpp2D.getTd().getRotateDegree()));

                            getStage().getTileList().remove(tpp2D.getDepth());
                            getStage().getTileList().add(tpp2D.getDepth(),tpp2D);
                        break;
                        
                        case 8:
                            TileImage2D oldti2D = (TileImage2D)compareTile;
                            TileImage2D ti2D = oldti2D.clone();
                            
                            ti2D.getTd().setRotateDegree(ti2D.getTd().getRotateDegree() + 5);
                            rotationTextField.setText(String.valueOf(ti2D.getTd().getRotateDegree()));

                            getStage().getTileList().remove(ti2D.getDepth());
                            getStage().getTileList().add(ti2D.getDepth(),ti2D);
                        break;
                        
                        default:
                            
                        break;
                    }
                    
                    setDepth();
                    setPastState();
                    setDownStage();
                    getStage().repaint();
                }
            }
        }
    }//GEN-LAST:event_jButton19ActionPerformed

    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed
        // TODO add your handling code here:
        if(getSelectState())   {
            if(isSelected())    {
                if(getSelectNumber() == -1) {

                }
                else {
                    Drawable compareTile = getStage().getTileList().get(getSelectNumber());
                    
                    switch( compareTile.getShapeType() ) {
                        case 1:

                        break;
                        
                        case 2:
                            TileEllipse2D oldte2D = (TileEllipse2D)compareTile;
                            TileEllipse2D te2D = oldte2D.clone();
                            
                            te2D.getTd().setRotateDegree(te2D.getTd().getRotateDegree() - 5);
                            rotationTextField.setText(String.valueOf(te2D.getTd().getRotateDegree()));

                            getStage().getTileList().remove(te2D.getDepth());
                            getStage().getTileList().add(te2D.getDepth(),te2D);
                        break;
                        
                        case 3:
                            TileLine2D oldtl2D = (TileLine2D)compareTile;
                            TileLine2D tl2D = oldtl2D.clone();
                            
                            tl2D.getTd().setRotateDegree(tl2D.getTd().getRotateDegree() - 5);
                            rotationTextField.setText(String.valueOf(tl2D.getTd().getRotateDegree()));

                            getStage().getTileList().remove(tl2D.getDepth());
                            getStage().getTileList().add(tl2D.getDepth(),tl2D);
                        break;
                        
                        case 4:
                            TilePolygon2D oldtp2D = (TilePolygon2D)compareTile;
                            TilePolygon2D tp2D = oldtp2D.clone();
                            
                            tp2D.getTd().setRotateDegree(tp2D.getTd().getRotateDegree() - 5);
                            rotationTextField.setText(String.valueOf(tp2D.getTd().getRotateDegree()));

                            getStage().getTileList().remove(tp2D.getDepth());
                            getStage().getTileList().add(tp2D.getDepth(),tp2D);
                        break;
                        
                        case 5:
                            TileRectangle2D oldtr2D = (TileRectangle2D)compareTile;
                            TileRectangle2D tr2D = oldtr2D.clone();
                            
                            tr2D.getTd().setRotateDegree(tr2D.getTd().getRotateDegree() - 5);
                            rotationTextField.setText(String.valueOf(tr2D.getTd().getRotateDegree()));

                            getStage().getTileList().remove(tr2D.getDepth());
                            getStage().getTileList().add(tr2D.getDepth(),tr2D);
                        break;
                        
                        case 6:
                            TileRoundRectangle2D oldtrr2D = (TileRoundRectangle2D)compareTile;
                            TileRoundRectangle2D trr2D = oldtrr2D.clone();
                            
                            trr2D.getTd().setRotateDegree(trr2D.getTd().getRotateDegree() - 5);
                            rotationTextField.setText(String.valueOf(trr2D.getTd().getRotateDegree()));

                            getStage().getTileList().remove(trr2D.getDepth());
                            getStage().getTileList().add(trr2D.getDepth(),trr2D);
                        break;
                        
                        case 7:
                            TilePolygon2D oldtpp2D = (TilePolygon2D)compareTile;
                            TilePolygon2D tpp2D = oldtpp2D.clone();
                            
                            tpp2D.getTd().setRotateDegree(tpp2D.getTd().getRotateDegree() - 5);
                            rotationTextField.setText(String.valueOf(tpp2D.getTd().getRotateDegree()));

                            getStage().getTileList().remove(tpp2D.getDepth());
                            getStage().getTileList().add(tpp2D.getDepth(),tpp2D);
                        break;
                        
                        case 8:
                            TileImage2D oldti2D = (TileImage2D)compareTile;
                            TileImage2D ti2D = oldti2D.clone();
                            
                            ti2D.getTd().setRotateDegree(ti2D.getTd().getRotateDegree() - 5);
                            rotationTextField.setText(String.valueOf(ti2D.getTd().getRotateDegree()));

                            getStage().getTileList().remove(ti2D.getDepth());
                            getStage().getTileList().add(ti2D.getDepth(),ti2D);
                        break;
                        
                        default:
                            
                        break;
                    }
                    
                    setDepth();
                    setPastState();
                    setDownStage();
                    getStage().repaint();
                }
            }
        }
    }//GEN-LAST:event_jButton20ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setMultiSelectionEnabled(false);
        
        if(fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            String fileName = fileChooser.getSelectedFile().toString();
            File file = new File(fileName);
            try {
                Socket s = new Socket("125.176.22.23",8000);
                /*
                OutputStream out;
                FileInputStream fis = null;
                DataOutputStream dout = null;
                
                try {
                Socket s = new Socket("127.0.0.1",8000);
                out = s.getOutputStream();
                dout = new DataOutputStream(out);
                
                fis = new FileInputStream(new File(fileName));
                byte[] buffer = new byte[1024 * 1024 * 1024]; 
                int len, data;
                data = 0;

                while((len = (fis.read(buffer)))>0){
                data++;
                }

                int tempData = data;

                fis.close();
                
                fis = new FileInputStream(fileName);
                dout.writeInt(data);
                dout.writeUTF(fileName);

                len = 0;

                for(;data>0;data--){
                len = fis.read(buffer);
                out.write(buffer,0,len);
                }
                
                out.flush();
                out.close();
                
                } catch (FileNotFoundException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }*/
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }  
        }
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        getAnimationList().remove(getAnimationStageNumber());
        setAnimationStageNumber(getAnimationStageNumber() - 1);
        setAnimationMaxStageNumber(getAnimationMaxStageNumber() - 1);
        setStage(getAnimationList().get(getAnimationStageNumber()).get(getAnimationList().get(getAnimationStageNumber()).size() - 1));
        
        getStage().repaint();
        setDownStage();
        String str = String.valueOf(getAnimationStageNumber() + 1) + " / " + getAnimationList().size();
        stageLabel.setText(str);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void largerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_largerBtnActionPerformed
        // TODO add your handling code here:
        setLargerState(true);
        setSmallerState(false);
    }//GEN-LAST:event_largerBtnActionPerformed

    private void smallerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smallerBtnActionPerformed
        // TODO add your handling code here:
        setLargerState(false);
        setSmallerState(true);
    }//GEN-LAST:event_smallerBtnActionPerformed

    private void jButton26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton26ActionPerformed
        // TODO add your handling code here:
        
        if(getSelectState())   {
            if(isSelected())    {
                if(getSelectNumber() == -1) {

                }
                else {
                    Drawable compareTile = getStage().getTileList().get(getSelectNumber());
                    int changedX = 0;
                    int changedY = -5;
                    switch( compareTile.getShapeType() ) {
                        case 1:

                        break;
                        
                        case 2:
                            TileEllipse2D oldte2D = (TileEllipse2D)compareTile;
                            TileEllipse2D te2D = oldte2D.clone();
                            
                            te2D.setMinX((int)te2D.getMinX() + changedX);
                            te2D.setMinY((int)te2D.getMinY() + changedY);
                            te2D.setMaxX((int)te2D.getMaxX() + changedX);
                            te2D.setMaxY((int)te2D.getMaxY() + changedY);
                            te2D.getTtd().setX(te2D.getTtd().getX() + changedX);
                            te2D.getTtd().setY(te2D.getTtd().getY() + changedY);
                            
                            textLocalX.setText(String.valueOf(te2D.getTtd().getX() + changedX));
                            textLocalY.setText(String.valueOf(te2D.getTtd().getY() + changedY));

                            localX.setText(String.valueOf((int)te2D.getMinX()));
                            localY.setText(String.valueOf((int)te2D.getMinY()));
                            
                            getStage().getTileList().remove(te2D.getDepth());
                            getStage().getTileList().add(te2D.getDepth(),te2D);
                        break;
                        
                        case 3:
                            TileLine2D oldtl2D = (TileLine2D)compareTile;
                            TileLine2D tl2D = oldtl2D.clone();
                            
                            tl2D.setX1((int)tl2D.getX1() + changedX);
                            tl2D.setY1((int)tl2D.getY1() + changedY);
                            tl2D.setX2((int)tl2D.getX2() + changedX);
                            tl2D.setY2((int)tl2D.getY2() + changedY);

                            localX.setText(String.valueOf((int)tl2D.getX1()));
                            localY.setText(String.valueOf((int)tl2D.getY1()));

                            getStage().getTileList().remove(tl2D.getDepth());
                            getStage().getTileList().add(tl2D.getDepth(),tl2D);
                        break;
                        
                        case 4:
                            TilePolygon2D oldtp2D = (TilePolygon2D)compareTile;
                            TilePolygon2D tp2D = oldtp2D.clone();
                           
                            int[] tempX = new int[tp2D.getPointSize()];
                            int[] tempY = new int[tp2D.getPointSize()];
                            
                            for(int i = 0 ; i < tp2D.getPointSize(); i++)   {
                                tempX[i] = tp2D.getXpoint()[i] + changedX;
                                tempY[i] = tp2D.getYpoint()[i] + changedY;
                            }
                            
                            tp2D.setXpoint(tempX);
                            tp2D.setYpoint(tempY);
                            
                            tp2D.setBorderPoint();
                            
                            localX.setText(String.valueOf(tp2D.getXpoint()[0]));
                            localY.setText(String.valueOf(tp2D.getYpoint()[0]));

                            getStage().getTileList().remove(tp2D.getDepth());
                            getStage().getTileList().add(tp2D.getDepth(),tp2D);
                        break;
                        
                        case 5:
                            TileRectangle2D oldtr2D = (TileRectangle2D)compareTile;
                            TileRectangle2D tr2D = oldtr2D.clone();
                            
                            tr2D.setLeftTopX((int)tr2D.getLeftTopX() + changedX);
                            tr2D.setLeftTopY((int)tr2D.getLeftTopY() + changedY);
                            tr2D.setRightBottomX((int)tr2D.getRightBottomX() + changedX);
                            tr2D.setRightBottomY((int)tr2D.getRightBottomY() + changedY);
                            tr2D.getTtd().setX(tr2D.getTtd().getX() + changedX);
                            tr2D.getTtd().setY(tr2D.getTtd().getY() + changedY);
                            
                            textLocalX.setText(String.valueOf(tr2D.getTtd().getX() + changedX));
                            textLocalY.setText(String.valueOf(tr2D.getTtd().getY() + changedY));

                            localX.setText(String.valueOf((int)tr2D.getLeftTopX()));
                            localY.setText(String.valueOf((int)tr2D.getLeftTopY()));
                            
                            getStage().getTileList().remove(tr2D.getDepth());
                            getStage().getTileList().add(tr2D.getDepth(),tr2D);
                        break;
                        
                        case 6:
                            TileRoundRectangle2D oldtrr2D = (TileRoundRectangle2D)compareTile;
                            TileRoundRectangle2D trr2D = oldtrr2D.clone();
                            
                            trr2D.setLeftTopX((int)trr2D.getLeftTopX() + changedX);
                            trr2D.setLeftTopY((int)trr2D.getLeftTopY() + changedY);
                            trr2D.setRightBottomX((int)trr2D.getRightBottomX() + changedX);
                            trr2D.setRightBottomY((int)trr2D.getRightBottomY() + changedY);
                            trr2D.getTtd().setX(trr2D.getTtd().getX() + changedX);
                            trr2D.getTtd().setY(trr2D.getTtd().getY() + changedY);
                            
                            textLocalX.setText(String.valueOf(trr2D.getTtd().getX() + changedX));
                            textLocalY.setText(String.valueOf(trr2D.getTtd().getY() + changedY));

                            localX.setText(String.valueOf((int)trr2D.getLeftTopX()));
                            localY.setText(String.valueOf((int)trr2D.getLeftTopY()));
                            
                            getStage().getTileList().remove(trr2D.getDepth());
                            getStage().getTileList().add(trr2D.getDepth(),trr2D);
                        break;
                        
                        case 7:
                            TilePolygon2D oldtpp2D = (TilePolygon2D)compareTile;
                            TilePolygon2D tpp2D = oldtpp2D.clone();
                            
                            int[] tempX2 = new int[tpp2D.getPointSize()];
                            int[] tempY2 = new int[tpp2D.getPointSize()];
                            
                            for(int i = 0 ; i < tpp2D.getPointSize(); i++)   {
                                tempX2[i] = tpp2D.getXpoint()[i] + changedX;
                                tempY2[i] = tpp2D.getYpoint()[i] + changedY;
                            }
                            
                            tpp2D.setXpoint(tempX2);
                            tpp2D.setYpoint(tempY2);
                            
                            tpp2D.getTtd().setX(tpp2D.getTtd().getX() + changedX);
                            tpp2D.getTtd().setY(tpp2D.getTtd().getY() + changedY);
                            
                            textLocalX.setText(String.valueOf(tpp2D.getTtd().getX() + changedX));
                            textLocalY.setText(String.valueOf(tpp2D.getTtd().getY() + changedY));
                            
                            localX.setText(String.valueOf(tpp2D.getXpoint()[0]));
                            localY.setText(String.valueOf(tpp2D.getYpoint()[0]));

                            tpp2D.setBorderPoint();
                            
                            getStage().getTileList().remove(tpp2D.getDepth());
                            getStage().getTileList().add(tpp2D.getDepth(),tpp2D);
                        break;
                        
                        case 8:
                            TileImage2D oldti2D = (TileImage2D)compareTile;
                            TileImage2D ti2D = oldti2D.clone();
                            
                            ti2D.setX1((int)ti2D.getX1() + changedX);
                            ti2D.setY1((int)ti2D.getY1() + changedY);
                            ti2D.setX2((int)ti2D.getX2() + changedX);
                            ti2D.setY2((int)ti2D.getY2() + changedY);
                            
                            localX.setText(String.valueOf((int)ti2D.getX1()));
                            localY.setText(String.valueOf((int)ti2D.getY1()));
                            
                            getStage().getTileList().remove(ti2D.getDepth());
                            getStage().getTileList().add(ti2D.getDepth(),ti2D);
                        break;
                        
                        default:
                            
                        break;
                    }
                    
                    setDepth();
                    setPastState();
                    setDownStage();
                    getStage().repaint();
                }
            }
        }
    }//GEN-LAST:event_jButton26ActionPerformed

    private void jButton29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton29ActionPerformed
        // TODO add your handling code here:
        
        if(getSelectState())   {
            if(isSelected())    {
                if(getSelectNumber() == -1) {

                }
                else {
                    Drawable compareTile = getStage().getTileList().get(getSelectNumber());
                    int changedX = -5;
                    int changedY = 0;
                    localX.setText(String.valueOf(Integer.parseInt(localX.getText()) + changedX));
                    localY.setText(String.valueOf(Integer.parseInt(localY.getText()) + changedY));
                            
                    switch( compareTile.getShapeType() ) {
                        case 1:

                        break;
                        
                        case 2:
                            TileEllipse2D oldte2D = (TileEllipse2D)compareTile;
                            TileEllipse2D te2D = oldte2D.clone();
                            
                            te2D.setMinX((int)te2D.getMinX() + changedX);
                            te2D.setMinY((int)te2D.getMinY() + changedY);
                            te2D.setMaxX((int)te2D.getMaxX() + changedX);
                            te2D.setMaxY((int)te2D.getMaxY() + changedY);
                            te2D.getTtd().setX(te2D.getTtd().getX() + changedX);
                            te2D.getTtd().setY(te2D.getTtd().getY() + changedY);
                            
                            textLocalX.setText(String.valueOf(te2D.getTtd().getX() + changedX));
                            textLocalY.setText(String.valueOf(te2D.getTtd().getY() + changedY));

                            getStage().getTileList().remove(te2D.getDepth());
                            getStage().getTileList().add(te2D.getDepth(),te2D);
                        break;
                        
                        case 3:
                            TileLine2D oldtl2D = (TileLine2D)compareTile;
                            TileLine2D tl2D = oldtl2D.clone();
                            
                            tl2D.setX1((int)tl2D.getX1() + changedX);
                            tl2D.setY1((int)tl2D.getY1() + changedY);
                            tl2D.setX2((int)tl2D.getX2() + changedX);
                            tl2D.setY2((int)tl2D.getY2() + changedY);

                            getStage().getTileList().remove(tl2D.getDepth());
                            getStage().getTileList().add(tl2D.getDepth(),tl2D);
                        break;
                        
                        case 4:
                            TilePolygon2D oldtp2D = (TilePolygon2D)compareTile;
                            TilePolygon2D tp2D = oldtp2D.clone();
                           
                            int[] tempX = new int[tp2D.getPointSize()];
                            int[] tempY = new int[tp2D.getPointSize()];
                            
                            for(int i = 0 ; i < tp2D.getPointSize(); i++)   {
                                tempX[i] = tp2D.getXpoint()[i] + changedX;
                                tempY[i] = tp2D.getYpoint()[i] + changedY;
                            }
                            
                            tp2D.setXpoint(tempX);
                            tp2D.setYpoint(tempY);
                            
                            tp2D.setBorderPoint();
                            
                            getStage().getTileList().remove(tp2D.getDepth());
                            getStage().getTileList().add(tp2D.getDepth(),tp2D);
                        break;
                        
                        case 5:
                            TileRectangle2D oldtr2D = (TileRectangle2D)compareTile;
                            TileRectangle2D tr2D = oldtr2D.clone();
                            
                            tr2D.setLeftTopX((int)tr2D.getLeftTopX() + changedX);
                            tr2D.setLeftTopY((int)tr2D.getLeftTopY() + changedY);
                            tr2D.setRightBottomX((int)tr2D.getRightBottomX() + changedX);
                            tr2D.setRightBottomY((int)tr2D.getRightBottomY() + changedY);
                            tr2D.getTtd().setX(tr2D.getTtd().getX() + changedX);
                            tr2D.getTtd().setY(tr2D.getTtd().getY() + changedY);
                            
                            textLocalX.setText(String.valueOf(tr2D.getTtd().getX() + changedX));
                            textLocalY.setText(String.valueOf(tr2D.getTtd().getY() + changedY));

                            getStage().getTileList().remove(tr2D.getDepth());
                            getStage().getTileList().add(tr2D.getDepth(),tr2D);
                        break;
                        
                        case 6:
                            TileRoundRectangle2D oldtrr2D = (TileRoundRectangle2D)compareTile;
                            TileRoundRectangle2D trr2D = oldtrr2D.clone();
                            
                            trr2D.setLeftTopX((int)trr2D.getLeftTopX() + changedX);
                            trr2D.setLeftTopY((int)trr2D.getLeftTopY() + changedY);
                            trr2D.setRightBottomX((int)trr2D.getRightBottomX() + changedX);
                            trr2D.setRightBottomY((int)trr2D.getRightBottomY() + changedY);
                            trr2D.getTtd().setX(trr2D.getTtd().getX() + changedX);
                            trr2D.getTtd().setY(trr2D.getTtd().getY() + changedY);
                            
                            textLocalX.setText(String.valueOf(trr2D.getTtd().getX() + changedX));
                            textLocalY.setText(String.valueOf(trr2D.getTtd().getY() + changedY));

                            getStage().getTileList().remove(trr2D.getDepth());
                            getStage().getTileList().add(trr2D.getDepth(),trr2D);
                        break;
                        
                        case 7:
                            TilePolygon2D oldtpp2D = (TilePolygon2D)compareTile;
                            TilePolygon2D tpp2D = oldtpp2D.clone();
                            
                            int[] tempX2 = new int[tpp2D.getPointSize()];
                            int[] tempY2 = new int[tpp2D.getPointSize()];
                            
                            for(int i = 0 ; i < tpp2D.getPointSize(); i++)   {
                                tempX2[i] = tpp2D.getXpoint()[i] + changedX;
                                tempY2[i] = tpp2D.getYpoint()[i] + changedY;
                            }
                            
                            tpp2D.setXpoint(tempX2);
                            tpp2D.setYpoint(tempY2);
                            
                            tpp2D.getTtd().setX(tpp2D.getTtd().getX() + changedX);
                            tpp2D.getTtd().setY(tpp2D.getTtd().getY() + changedY);
                            
                            textLocalX.setText(String.valueOf(tpp2D.getTtd().getX() + changedX));
                            textLocalY.setText(String.valueOf(tpp2D.getTtd().getY() + changedY));
                            
                            tpp2D.setBorderPoint();
                            
                            getStage().getTileList().remove(tpp2D.getDepth());
                            getStage().getTileList().add(tpp2D.getDepth(),tpp2D);
                        break;
                        
                        case 8:
                            TileImage2D oldti2D = (TileImage2D)compareTile;
                            TileImage2D ti2D = oldti2D.clone();
                            
                            ti2D.setX1((int)ti2D.getX1() + changedX);
                            ti2D.setY1((int)ti2D.getY1() + changedY);
                            ti2D.setX2((int)ti2D.getX2() + changedX);
                            ti2D.setY2((int)ti2D.getY2() + changedY);
                            
                            getStage().getTileList().remove(ti2D.getDepth());
                            getStage().getTileList().add(ti2D.getDepth(),ti2D);
                        break;
                        
                        default:
                            
                        break;
                    }
                    
                    setDepth();
                    setPastState();
                    setDownStage();
                    getStage().repaint();
                }
            }
        }
    }//GEN-LAST:event_jButton29ActionPerformed

    private void jButton25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton25ActionPerformed
        // TODO add your handling code here:
        
        if(getSelectState())   {
            if(isSelected())    {
                if(getSelectNumber() == -1) {

                }
                else {
                    Drawable compareTile = getStage().getTileList().get(getSelectNumber());
                    int changedX = 0;
                    int changedY = 5;
                    localX.setText(String.valueOf(Integer.parseInt(localX.getText()) + changedX));
                    localY.setText(String.valueOf(Integer.parseInt(localY.getText()) + changedY));
                    switch( compareTile.getShapeType() ) {
                        case 1:

                        break;
                        
                        case 2:
                            TileEllipse2D oldte2D = (TileEllipse2D)compareTile;
                            TileEllipse2D te2D = oldte2D.clone();
                            
                            te2D.setMinX((int)te2D.getMinX() + changedX);
                            te2D.setMinY((int)te2D.getMinY() + changedY);
                            te2D.setMaxX((int)te2D.getMaxX() + changedX);
                            te2D.setMaxY((int)te2D.getMaxY() + changedY);
                            te2D.getTtd().setX(te2D.getTtd().getX() + changedX);
                            te2D.getTtd().setY(te2D.getTtd().getY() + changedY);
                            
                            textLocalX.setText(String.valueOf(te2D.getTtd().getX() + changedX));
                            textLocalY.setText(String.valueOf(te2D.getTtd().getY() + changedY));

                            getStage().getTileList().remove(te2D.getDepth());
                            getStage().getTileList().add(te2D.getDepth(),te2D);
                        break;
                        
                        case 3:
                            TileLine2D oldtl2D = (TileLine2D)compareTile;
                            TileLine2D tl2D = oldtl2D.clone();
                            
                            tl2D.setX1((int)tl2D.getX1() + changedX);
                            tl2D.setY1((int)tl2D.getY1() + changedY);
                            tl2D.setX2((int)tl2D.getX2() + changedX);
                            tl2D.setY2((int)tl2D.getY2() + changedY);

                            getStage().getTileList().remove(tl2D.getDepth());
                            getStage().getTileList().add(tl2D.getDepth(),tl2D);
                        break;
                        
                        case 4:
                            TilePolygon2D oldtp2D = (TilePolygon2D)compareTile;
                            TilePolygon2D tp2D = oldtp2D.clone();
                           
                            int[] tempX = new int[tp2D.getPointSize()];
                            int[] tempY = new int[tp2D.getPointSize()];
                            
                            for(int i = 0 ; i < tp2D.getPointSize(); i++)   {
                                tempX[i] = tp2D.getXpoint()[i] + changedX;
                                tempY[i] = tp2D.getYpoint()[i] + changedY;
                            }
                            
                            tp2D.setXpoint(tempX);
                            tp2D.setYpoint(tempY);
                            
                            tp2D.setBorderPoint();
                            
                            getStage().getTileList().remove(tp2D.getDepth());
                            getStage().getTileList().add(tp2D.getDepth(),tp2D);
                        break;
                        
                        case 5:
                            TileRectangle2D oldtr2D = (TileRectangle2D)compareTile;
                            TileRectangle2D tr2D = oldtr2D.clone();
                            
                            tr2D.setLeftTopX((int)tr2D.getLeftTopX() + changedX);
                            tr2D.setLeftTopY((int)tr2D.getLeftTopY() + changedY);
                            tr2D.setRightBottomX((int)tr2D.getRightBottomX() + changedX);
                            tr2D.setRightBottomY((int)tr2D.getRightBottomY() + changedY);
                            tr2D.getTtd().setX(tr2D.getTtd().getX() + changedX);
                            tr2D.getTtd().setY(tr2D.getTtd().getY() + changedY);
                            
                            textLocalX.setText(String.valueOf(tr2D.getTtd().getX() + changedX));
                            textLocalY.setText(String.valueOf(tr2D.getTtd().getY() + changedY));

                            getStage().getTileList().remove(tr2D.getDepth());
                            getStage().getTileList().add(tr2D.getDepth(),tr2D);
                        break;
                        
                        case 6:
                            TileRoundRectangle2D oldtrr2D = (TileRoundRectangle2D)compareTile;
                            TileRoundRectangle2D trr2D = oldtrr2D.clone();
                            
                            trr2D.setLeftTopX((int)trr2D.getLeftTopX() + changedX);
                            trr2D.setLeftTopY((int)trr2D.getLeftTopY() + changedY);
                            trr2D.setRightBottomX((int)trr2D.getRightBottomX() + changedX);
                            trr2D.setRightBottomY((int)trr2D.getRightBottomY() + changedY);
                            trr2D.getTtd().setX(trr2D.getTtd().getX() + changedX);
                            trr2D.getTtd().setY(trr2D.getTtd().getY() + changedY);
                            
                            textLocalX.setText(String.valueOf(trr2D.getTtd().getX() + changedX));
                            textLocalY.setText(String.valueOf(trr2D.getTtd().getY() + changedY));

                            getStage().getTileList().remove(trr2D.getDepth());
                            getStage().getTileList().add(trr2D.getDepth(),trr2D);
                        break;
                        
                        case 7:
                            TilePolygon2D oldtpp2D = (TilePolygon2D)compareTile;
                            TilePolygon2D tpp2D = oldtpp2D.clone();
                            
                            int[] tempX2 = new int[tpp2D.getPointSize()];
                            int[] tempY2 = new int[tpp2D.getPointSize()];
                            
                            for(int i = 0 ; i < tpp2D.getPointSize(); i++)   {
                                tempX2[i] = tpp2D.getXpoint()[i] + changedX;
                                tempY2[i] = tpp2D.getYpoint()[i] + changedY;
                            }
                            
                            tpp2D.setXpoint(tempX2);
                            tpp2D.setYpoint(tempY2);
                            
                            tpp2D.getTtd().setX(tpp2D.getTtd().getX() + changedX);
                            tpp2D.getTtd().setY(tpp2D.getTtd().getY() + changedY);
                            
                            textLocalX.setText(String.valueOf(tpp2D.getTtd().getX() + changedX));
                            textLocalY.setText(String.valueOf(tpp2D.getTtd().getY() + changedY));
                            
                            tpp2D.setBorderPoint();
                            
                            getStage().getTileList().remove(tpp2D.getDepth());
                            getStage().getTileList().add(tpp2D.getDepth(),tpp2D);
                        break;
                        
                        case 8:
                            TileImage2D oldti2D = (TileImage2D)compareTile;
                            TileImage2D ti2D = oldti2D.clone();
                            
                            ti2D.setX1((int)ti2D.getX1() + changedX);
                            ti2D.setY1((int)ti2D.getY1() + changedY);
                            ti2D.setX2((int)ti2D.getX2() + changedX);
                            ti2D.setY2((int)ti2D.getY2() + changedY);
                            
                            getStage().getTileList().remove(ti2D.getDepth());
                            getStage().getTileList().add(ti2D.getDepth(),ti2D);
                        break;
                        
                        default:
                            
                        break;
                    }
                    
                    setDepth();
                    setPastState();
                    setDownStage();
                    getStage().repaint();
                }
            }
        }
    }//GEN-LAST:event_jButton25ActionPerformed

    private void jButton28ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton28ActionPerformed
        // TODO add your handling code here:
        
        if(getSelectState())   {
            if(isSelected())    {
                if(getSelectNumber() == -1) {

                }
                else {
                    Drawable compareTile = getStage().getTileList().get(getSelectNumber());
                    int changedX = 5;
                    int changedY = 0;
                    localX.setText(String.valueOf(Integer.parseInt(localX.getText()) + changedX));
                    localY.setText(String.valueOf(Integer.parseInt(localY.getText()) + changedY));
                    switch( compareTile.getShapeType() ) {
                        case 1:

                        break;
                        
                        case 2:
                            TileEllipse2D oldte2D = (TileEllipse2D)compareTile;
                            TileEllipse2D te2D = oldte2D.clone();
                            
                            te2D.setMinX((int)te2D.getMinX() + changedX);
                            te2D.setMinY((int)te2D.getMinY() + changedY);
                            te2D.setMaxX((int)te2D.getMaxX() + changedX);
                            te2D.setMaxY((int)te2D.getMaxY() + changedY);
                            te2D.getTtd().setX(te2D.getTtd().getX() + changedX);
                            te2D.getTtd().setY(te2D.getTtd().getY() + changedY);
                            
                            textLocalX.setText(String.valueOf(te2D.getTtd().getX() + changedX));
                            textLocalY.setText(String.valueOf(te2D.getTtd().getY() + changedY));

                            getStage().getTileList().remove(te2D.getDepth());
                            getStage().getTileList().add(te2D.getDepth(),te2D);
                        break;
                        
                        case 3:
                            TileLine2D oldtl2D = (TileLine2D)compareTile;
                            TileLine2D tl2D = oldtl2D.clone();
                            
                            tl2D.setX1((int)tl2D.getX1() + changedX);
                            tl2D.setY1((int)tl2D.getY1() + changedY);
                            tl2D.setX2((int)tl2D.getX2() + changedX);
                            tl2D.setY2((int)tl2D.getY2() + changedY);

                            getStage().getTileList().remove(tl2D.getDepth());
                            getStage().getTileList().add(tl2D.getDepth(),tl2D);
                        break;
                        
                        case 4:
                            TilePolygon2D oldtp2D = (TilePolygon2D)compareTile;
                            TilePolygon2D tp2D = oldtp2D.clone();
                           
                            int[] tempX = new int[tp2D.getPointSize()];
                            int[] tempY = new int[tp2D.getPointSize()];
                            
                            for(int i = 0 ; i < tp2D.getPointSize(); i++)   {
                                tempX[i] = tp2D.getXpoint()[i] + changedX;
                                tempY[i] = tp2D.getYpoint()[i] + changedY;
                            }
                            
                            tp2D.setXpoint(tempX);
                            tp2D.setYpoint(tempY);
                            
                            tp2D.setBorderPoint();
                            
                            getStage().getTileList().remove(tp2D.getDepth());
                            getStage().getTileList().add(tp2D.getDepth(),tp2D);
                        break;
                        
                        case 5:
                            TileRectangle2D oldtr2D = (TileRectangle2D)compareTile;
                            TileRectangle2D tr2D = oldtr2D.clone();
                            
                            tr2D.setLeftTopX((int)tr2D.getLeftTopX() + changedX);
                            tr2D.setLeftTopY((int)tr2D.getLeftTopY() + changedY);
                            tr2D.setRightBottomX((int)tr2D.getRightBottomX() + changedX);
                            tr2D.setRightBottomY((int)tr2D.getRightBottomY() + changedY);
                            tr2D.getTtd().setX(tr2D.getTtd().getX() + changedX);
                            tr2D.getTtd().setY(tr2D.getTtd().getY() + changedY);
                            
                            textLocalX.setText(String.valueOf(tr2D.getTtd().getX() + changedX));
                            textLocalY.setText(String.valueOf(tr2D.getTtd().getY() + changedY));

                            getStage().getTileList().remove(tr2D.getDepth());
                            getStage().getTileList().add(tr2D.getDepth(),tr2D);
                        break;
                        
                        case 6:
                            TileRoundRectangle2D oldtrr2D = (TileRoundRectangle2D)compareTile;
                            TileRoundRectangle2D trr2D = oldtrr2D.clone();
                            
                            trr2D.setLeftTopX((int)trr2D.getLeftTopX() + changedX);
                            trr2D.setLeftTopY((int)trr2D.getLeftTopY() + changedY);
                            trr2D.setRightBottomX((int)trr2D.getRightBottomX() + changedX);
                            trr2D.setRightBottomY((int)trr2D.getRightBottomY() + changedY);
                            trr2D.getTtd().setX(trr2D.getTtd().getX() + changedX);
                            trr2D.getTtd().setY(trr2D.getTtd().getY() + changedY);
                            
                            textLocalX.setText(String.valueOf(trr2D.getTtd().getX() + changedX));
                            textLocalY.setText(String.valueOf(trr2D.getTtd().getY() + changedY));

                            getStage().getTileList().remove(trr2D.getDepth());
                            getStage().getTileList().add(trr2D.getDepth(),trr2D);
                        break;
                        
                        case 7:
                            TilePolygon2D oldtpp2D = (TilePolygon2D)compareTile;
                            TilePolygon2D tpp2D = oldtpp2D.clone();
                            
                            int[] tempX2 = new int[tpp2D.getPointSize()];
                            int[] tempY2 = new int[tpp2D.getPointSize()];
                            
                            for(int i = 0 ; i < tpp2D.getPointSize(); i++)   {
                                tempX2[i] = tpp2D.getXpoint()[i] + changedX;
                                tempY2[i] = tpp2D.getYpoint()[i] + changedY;
                            }
                            
                            tpp2D.setXpoint(tempX2);
                            tpp2D.setYpoint(tempY2);
                            
                            tpp2D.getTtd().setX(tpp2D.getTtd().getX() + changedX);
                            tpp2D.getTtd().setY(tpp2D.getTtd().getY() + changedY);
                            
                            textLocalX.setText(String.valueOf(tpp2D.getTtd().getX() + changedX));
                            textLocalY.setText(String.valueOf(tpp2D.getTtd().getY() + changedY));
                            
                            tpp2D.setBorderPoint();
                            
                            getStage().getTileList().remove(tpp2D.getDepth());
                            getStage().getTileList().add(tpp2D.getDepth(),tpp2D);
                        break;
                        
                        case 8:
                            TileImage2D oldti2D = (TileImage2D)compareTile;
                            TileImage2D ti2D = oldti2D.clone();
                            
                            ti2D.setX1((int)ti2D.getX1() + changedX);
                            ti2D.setY1((int)ti2D.getY1() + changedY);
                            ti2D.setX2((int)ti2D.getX2() + changedX);
                            ti2D.setY2((int)ti2D.getY2() + changedY);
                            
                            getStage().getTileList().remove(ti2D.getDepth());
                            getStage().getTileList().add(ti2D.getDepth(),ti2D);
                        break;
                        
                        default:
                            
                        break;
                    }
                    
                    setDepth();
                    setPastState();
                    setDownStage();
                    getStage().repaint();
                }
            }
        }
    }//GEN-LAST:event_jButton28ActionPerformed

    private void jButton34ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton34ActionPerformed
        // TODO add your handling code here:
        if(getSelectState())   {
            if(isSelected())    {
                if(getSelectNumber() == -1) {

                }
                else {
                    Drawable compareTile = getStage().getTileList().get(getSelectNumber());
                    int newWidth = Integer.parseInt(sizeX.getText());
                    int newHeight = Integer.parseInt(sizeY.getText());
                    
                    int oldWidth, oldHeight, changedX, changedY;
                    
                    switch( compareTile.getShapeType() ) {
                        case 1:

                        break;
                        
                        case 2:
                            TileEllipse2D oldte2D = (TileEllipse2D)compareTile;
                            TileEllipse2D te2D = oldte2D.clone();
                            
                            oldWidth = (int)te2D.getWidth();
                            oldHeight = (int)te2D.getHeight();
                            
                            changedX = newWidth - oldWidth;
                            changedY = newHeight - oldHeight;
                            
                            te2D.setMaxX((int)te2D.getMaxX() + changedX);
                            te2D.setMaxY((int)te2D.getMaxY() + changedY);

                            sizeX.setText(String.valueOf((int)te2D.getWidth()));
                            sizeY.setText(String.valueOf((int)te2D.getHeight()));
                            
                            getStage().getTileList().remove(te2D.getDepth());
                            getStage().getTileList().add(te2D.getDepth(),te2D);
                        break;
                        
                        case 3:
                            TileLine2D oldtl2D = (TileLine2D)compareTile;
                            TileLine2D tl2D = oldtl2D.clone();
                            
                            oldWidth = (int)tl2D.getWidth();
                            oldHeight = (int)tl2D.getHeight();
                            
                            changedX = newWidth - oldWidth;
                            changedY = newHeight - oldHeight;
                            
                            tl2D.setX2((int)tl2D.getX2() + changedX);
                            tl2D.setY2((int)tl2D.getY2() + changedY);

                            sizeX.setText(String.valueOf((int)tl2D.getWidth()));
                            sizeY.setText(String.valueOf((int)tl2D.getHeight()));

                            getStage().getTileList().remove(tl2D.getDepth());
                            getStage().getTileList().add(tl2D.getDepth(),tl2D);
                        break;
                        
                        case 4:
                            TilePolygon2D oldtp2D = (TilePolygon2D)compareTile;
                            TilePolygon2D tp2D = oldtp2D.clone();
                            
                            //how..?

                            getStage().getTileList().remove(tp2D.getDepth());
                            getStage().getTileList().add(tp2D.getDepth(),tp2D);
                        break;
                        
                        case 5:
                            TileRectangle2D oldtr2D = (TileRectangle2D)compareTile;
                            TileRectangle2D tr2D = oldtr2D.clone();
                            
                            oldWidth = (int)tr2D.getWidth();
                            oldHeight = (int)tr2D.getHeight();
                            
                            changedX = newWidth - oldWidth;
                            changedY = newHeight - oldHeight;
                            
                            tr2D.setRightBottomX((int)tr2D.getRightBottomX() + changedX);
                            tr2D.setRightBottomY((int)tr2D.getRightBottomY() + changedY);

                            sizeX.setText(String.valueOf((int)tr2D.getWidth()));
                            sizeY.setText(String.valueOf((int)tr2D.getHeight()));

                            getStage().getTileList().remove(tr2D.getDepth());
                            getStage().getTileList().add(tr2D.getDepth(),tr2D);
                        break;
                        
                        case 6:
                            TileRoundRectangle2D oldtrr2D = (TileRoundRectangle2D)compareTile;
                            TileRoundRectangle2D trr2D = oldtrr2D.clone();
                            
                            oldWidth = (int)trr2D.getWidth();
                            oldHeight = (int)trr2D.getHeight();
                            
                            changedX = newWidth - oldWidth;
                            changedY = newHeight - oldHeight;
                            
                            trr2D.setRightBottomX((int)trr2D.getRightBottomX() + changedX);
                            trr2D.setRightBottomY((int)trr2D.getRightBottomY() + changedY);

                            sizeX.setText(String.valueOf((int)trr2D.getWidth()));
                            sizeY.setText(String.valueOf((int)trr2D.getHeight()));

                            getStage().getTileList().remove(trr2D.getDepth());
                            getStage().getTileList().add(trr2D.getDepth(),trr2D);
                        break;
                        
                        case 7:
                            TilePolygon2D oldtpp2D = (TilePolygon2D)compareTile;
                            TilePolygon2D tpp2D = oldtpp2D.clone();
                            
                            //how..?
                            
                            getStage().getTileList().remove(tpp2D.getDepth());
                            getStage().getTileList().add(tpp2D.getDepth(),tpp2D);
                        break;
                        
                        case 8:
                            TileImage2D oldti2D = (TileImage2D)compareTile;
                            TileImage2D ti2D = oldti2D.clone();
                            
                            oldWidth = (int)ti2D.getWidth();
                            oldHeight = (int)ti2D.getHeight();
                            
                            changedX = newWidth - oldWidth;
                            changedY = newHeight - oldHeight;
                            
                            ti2D.setX2((int)ti2D.getX2() + changedX);
                            ti2D.setY2((int)ti2D.getY2() + changedY);

                            sizeX.setText(String.valueOf((int)ti2D.getWidth()));
                            sizeY.setText(String.valueOf((int)ti2D.getHeight()));
                            
                            getStage().getTileList().remove(ti2D.getDepth());
                            getStage().getTileList().add(ti2D.getDepth(),ti2D);
                        break;
                        
                        default:
                            
                        break;
                    }
                    
                    setDepth();
                    setPastState();
                    setDownStage();
                    getStage().repaint();
                }
            }
        }
    }//GEN-LAST:event_jButton34ActionPerformed

    private void sizeUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sizeUpActionPerformed
        // TODO add your handling code here:
        if(isLargerState()) {
            if(getSelectState())   {
                if(isSelected())    {
                    if(getSelectNumber() == -1) {

                    }
                    else {
                        Drawable compareTile = getStage().getTileList().get(getSelectNumber());
                        int changedX = 0;
                        int changedY = 5;

                        switch( compareTile.getShapeType() ) {
                            case 1:

                            break;

                            case 2:
                                TileEllipse2D oldte2D = (TileEllipse2D)compareTile;
                                TileEllipse2D te2D = oldte2D.clone();

                                te2D.setMinX((int)te2D.getMinX() - changedX);
                                te2D.setMinY((int)te2D.getMinY() - changedY);

                                sizeX.setText(String.valueOf((int)te2D.getWidth()));
                                sizeY.setText(String.valueOf((int)te2D.getHeight()));

                                getStage().getTileList().remove(te2D.getDepth());
                                getStage().getTileList().add(te2D.getDepth(),te2D);
                            break;

                            case 3:
                                TileLine2D oldtl2D = (TileLine2D)compareTile;
                                TileLine2D tl2D = oldtl2D.clone();

                                tl2D.setX1((int)tl2D.getX2() - changedX);
                                tl2D.setY1((int)tl2D.getY1() - changedY);

                                sizeX.setText(String.valueOf((int)tl2D.getWidth()));
                                sizeY.setText(String.valueOf((int)tl2D.getHeight()));

                                getStage().getTileList().remove(tl2D.getDepth());
                                getStage().getTileList().add(tl2D.getDepth(),tl2D);
                            break;

                            case 4:
                                TilePolygon2D oldtp2D = (TilePolygon2D)compareTile;
                                TilePolygon2D tp2D = oldtp2D.clone();

                                //how..?

                                getStage().getTileList().remove(tp2D.getDepth());
                                getStage().getTileList().add(tp2D.getDepth(),tp2D);
                            break;

                            case 5:
                                TileRectangle2D oldtr2D = (TileRectangle2D)compareTile;
                                TileRectangle2D tr2D = oldtr2D.clone();

                                tr2D.setLeftTopX((int)tr2D.getLeftTopX() - changedX);
                                tr2D.setLeftTopY((int)tr2D.getLeftTopY() - changedY);

                                sizeX.setText(String.valueOf((int)tr2D.getWidth()));
                                sizeY.setText(String.valueOf((int)tr2D.getHeight()));

                                getStage().getTileList().remove(tr2D.getDepth());
                                getStage().getTileList().add(tr2D.getDepth(),tr2D);
                            break;

                            case 6:
                                TileRoundRectangle2D oldtrr2D = (TileRoundRectangle2D)compareTile;
                                TileRoundRectangle2D trr2D = oldtrr2D.clone();

                                trr2D.setLeftTopX((int)trr2D.getLeftTopX() - changedX);
                                trr2D.setLeftTopY((int)trr2D.getLeftTopY() - changedY);

                                sizeX.setText(String.valueOf((int)trr2D.getWidth()));
                                sizeY.setText(String.valueOf((int)trr2D.getHeight()));

                                getStage().getTileList().remove(trr2D.getDepth());
                                getStage().getTileList().add(trr2D.getDepth(),trr2D);
                            break;

                            case 7:
                                TilePolygon2D oldtpp2D = (TilePolygon2D)compareTile;
                                TilePolygon2D tpp2D = oldtpp2D.clone();

                                //how..?

                                getStage().getTileList().remove(tpp2D.getDepth());
                                getStage().getTileList().add(tpp2D.getDepth(),tpp2D);
                            break;

                            case 8:
                                TileImage2D oldti2D = (TileImage2D)compareTile;
                                TileImage2D ti2D = oldti2D.clone();

                                ti2D.setX1((int)ti2D.getX1() + changedX);
                                ti2D.setY1((int)ti2D.getY1() + changedY);

                                sizeX.setText(String.valueOf((int)ti2D.getWidth()));
                                sizeY.setText(String.valueOf((int)ti2D.getHeight()));

                                getStage().getTileList().remove(ti2D.getDepth());
                                getStage().getTileList().add(ti2D.getDepth(),ti2D);
                            break;

                            default:

                            break;
                        }

                        setDepth();
                        setPastState();
                        setDownStage();
                        getStage().repaint();
                    }
                }
            }
        }
        else if(isSmallerState())   {
             if(getSelectState())   {
                if(isSelected())    {
                    if(getSelectNumber() == -1) {

                    }
                    else {
                        Drawable compareTile = getStage().getTileList().get(getSelectNumber());
                        int changedX = 0;
                        int changedY = -5;

                        switch( compareTile.getShapeType() ) {
                            case 1:

                            break;

                            case 2:
                                TileEllipse2D oldte2D = (TileEllipse2D)compareTile;
                                TileEllipse2D te2D = oldte2D.clone();

                                te2D.setMinX((int)te2D.getMinX() - changedX);
                                te2D.setMinY((int)te2D.getMinY() - changedY);

                                sizeX.setText(String.valueOf((int)te2D.getWidth()));
                                sizeY.setText(String.valueOf((int)te2D.getHeight()));

                                getStage().getTileList().remove(te2D.getDepth());
                                getStage().getTileList().add(te2D.getDepth(),te2D);
                            break;

                            case 3:
                                TileLine2D oldtl2D = (TileLine2D)compareTile;
                                TileLine2D tl2D = oldtl2D.clone();

                                tl2D.setX1((int)tl2D.getX2() - changedX);
                                tl2D.setY1((int)tl2D.getY1() - changedY);

                                sizeX.setText(String.valueOf((int)tl2D.getWidth()));
                                sizeY.setText(String.valueOf((int)tl2D.getHeight()));

                                getStage().getTileList().remove(tl2D.getDepth());
                                getStage().getTileList().add(tl2D.getDepth(),tl2D);
                            break;

                            case 4:
                                TilePolygon2D oldtp2D = (TilePolygon2D)compareTile;
                                TilePolygon2D tp2D = oldtp2D.clone();

                                //how..?

                                getStage().getTileList().remove(tp2D.getDepth());
                                getStage().getTileList().add(tp2D.getDepth(),tp2D);
                            break;

                            case 5:
                                TileRectangle2D oldtr2D = (TileRectangle2D)compareTile;
                                TileRectangle2D tr2D = oldtr2D.clone();

                                tr2D.setLeftTopX((int)tr2D.getLeftTopX() - changedX);
                                tr2D.setLeftTopY((int)tr2D.getLeftTopY() - changedY);

                                sizeX.setText(String.valueOf((int)tr2D.getWidth()));
                                sizeY.setText(String.valueOf((int)tr2D.getHeight()));

                                getStage().getTileList().remove(tr2D.getDepth());
                                getStage().getTileList().add(tr2D.getDepth(),tr2D);
                            break;

                            case 6:
                                TileRoundRectangle2D oldtrr2D = (TileRoundRectangle2D)compareTile;
                                TileRoundRectangle2D trr2D = oldtrr2D.clone();

                                trr2D.setLeftTopX((int)trr2D.getLeftTopX() - changedX);
                                trr2D.setLeftTopY((int)trr2D.getLeftTopY() - changedY);

                                sizeX.setText(String.valueOf((int)trr2D.getWidth()));
                                sizeY.setText(String.valueOf((int)trr2D.getHeight()));

                                getStage().getTileList().remove(trr2D.getDepth());
                                getStage().getTileList().add(trr2D.getDepth(),trr2D);
                            break;

                            case 7:
                                TilePolygon2D oldtpp2D = (TilePolygon2D)compareTile;
                                TilePolygon2D tpp2D = oldtpp2D.clone();

                                //how..?

                                getStage().getTileList().remove(tpp2D.getDepth());
                                getStage().getTileList().add(tpp2D.getDepth(),tpp2D);
                            break;

                            case 8:
                                TileImage2D oldti2D = (TileImage2D)compareTile;
                                TileImage2D ti2D = oldti2D.clone();

                                ti2D.setX1((int)ti2D.getX1() + changedX);
                                ti2D.setY1((int)ti2D.getY1() + changedY);

                                sizeX.setText(String.valueOf((int)ti2D.getWidth()));
                                sizeY.setText(String.valueOf((int)ti2D.getHeight()));

                                getStage().getTileList().remove(ti2D.getDepth());
                                getStage().getTileList().add(ti2D.getDepth(),ti2D);
                            break;

                            default:

                            break;
                        }

                        setDepth();
                        setPastState();
                        setDownStage();
                        getStage().repaint();
                    }
                }
            }
        }
    }//GEN-LAST:event_sizeUpActionPerformed

    private void sizeDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sizeDownActionPerformed
        // TODO add your handling code here:
        if(isLargerState()) {
            
            if(getSelectState())   {
                if(isSelected())    {
                    if(getSelectNumber() == -1) {

                    }
                    else {
                        Drawable compareTile = getStage().getTileList().get(getSelectNumber());
                        int changedX = 0;
                        int changedY = 5;

                        switch( compareTile.getShapeType() ) {
                            case 1:

                            break;

                            case 2:
                                TileEllipse2D oldte2D = (TileEllipse2D)compareTile;
                                TileEllipse2D te2D = oldte2D.clone();

                                te2D.setMaxX((int)te2D.getMaxX() + changedX);
                                te2D.setMaxY((int)te2D.getMaxY() + changedY);

                                sizeX.setText(String.valueOf((int)te2D.getWidth()));
                                sizeY.setText(String.valueOf((int)te2D.getHeight()));

                                getStage().getTileList().remove(te2D.getDepth());
                                getStage().getTileList().add(te2D.getDepth(),te2D);
                            break;

                            case 3:
                                TileLine2D oldtl2D = (TileLine2D)compareTile;
                                TileLine2D tl2D = oldtl2D.clone();

                                tl2D.setX2((int)tl2D.getX2() + changedX);
                                tl2D.setY2((int)tl2D.getY2() + changedY);

                                sizeX.setText(String.valueOf((int)tl2D.getWidth()));
                                sizeY.setText(String.valueOf((int)tl2D.getHeight()));

                                getStage().getTileList().remove(tl2D.getDepth());
                                getStage().getTileList().add(tl2D.getDepth(),tl2D);
                            break;

                            case 4:
                                TilePolygon2D oldtp2D = (TilePolygon2D)compareTile;
                                TilePolygon2D tp2D = oldtp2D.clone();

                                //how..?

                                getStage().getTileList().remove(tp2D.getDepth());
                                getStage().getTileList().add(tp2D.getDepth(),tp2D);
                            break;

                            case 5:
                                TileRectangle2D oldtr2D = (TileRectangle2D)compareTile;
                                TileRectangle2D tr2D = oldtr2D.clone();

                                tr2D.setRightBottomX((int)tr2D.getRightBottomX() + changedX);
                                tr2D.setRightBottomY((int)tr2D.getRightBottomY() + changedY);

                                sizeX.setText(String.valueOf((int)tr2D.getWidth()));
                                sizeY.setText(String.valueOf((int)tr2D.getHeight()));

                                getStage().getTileList().remove(tr2D.getDepth());
                                getStage().getTileList().add(tr2D.getDepth(),tr2D);
                            break;

                            case 6:
                                TileRoundRectangle2D oldtrr2D = (TileRoundRectangle2D)compareTile;
                                TileRoundRectangle2D trr2D = oldtrr2D.clone();

                                trr2D.setRightBottomX((int)trr2D.getRightBottomX() + changedX);
                                trr2D.setRightBottomY((int)trr2D.getRightBottomY() + changedY);

                                sizeX.setText(String.valueOf((int)trr2D.getWidth()));
                                sizeY.setText(String.valueOf((int)trr2D.getHeight()));

                                getStage().getTileList().remove(trr2D.getDepth());
                                getStage().getTileList().add(trr2D.getDepth(),trr2D);
                            break;

                            case 7:
                                TilePolygon2D oldtpp2D = (TilePolygon2D)compareTile;
                                TilePolygon2D tpp2D = oldtpp2D.clone();

                                //how..?

                                getStage().getTileList().remove(tpp2D.getDepth());
                                getStage().getTileList().add(tpp2D.getDepth(),tpp2D);
                            break;

                            case 8:
                                TileImage2D oldti2D = (TileImage2D)compareTile;
                                TileImage2D ti2D = oldti2D.clone();

                                ti2D.setX2((int)ti2D.getX2() + changedX);
                                ti2D.setY2((int)ti2D.getY2() + changedY);

                                sizeX.setText(String.valueOf((int)ti2D.getWidth()));
                                sizeY.setText(String.valueOf((int)ti2D.getHeight()));

                                getStage().getTileList().remove(ti2D.getDepth());
                                getStage().getTileList().add(ti2D.getDepth(),ti2D);
                            break;

                            default:

                            break;
                        }

                        setDepth();
                        setPastState();
                        setDownStage();
                        getStage().repaint();
                    }
                }
            }
        }
        else if(isSmallerState())   {
            
            if(getSelectState())   {
                if(isSelected())    {
                    if(getSelectNumber() == -1) {

                    }
                    else {
                        Drawable compareTile = getStage().getTileList().get(getSelectNumber());
                        int changedX = 0;
                        int changedY = -5;

                        switch( compareTile.getShapeType() ) {
                            case 1:

                            break;

                            case 2:
                                TileEllipse2D oldte2D = (TileEllipse2D)compareTile;
                                TileEllipse2D te2D = oldte2D.clone();

                                te2D.setMaxX((int)te2D.getMaxX() + changedX);
                                te2D.setMaxY((int)te2D.getMaxY() + changedY);

                                sizeX.setText(String.valueOf((int)te2D.getWidth()));
                                sizeY.setText(String.valueOf((int)te2D.getHeight()));

                                getStage().getTileList().remove(te2D.getDepth());
                                getStage().getTileList().add(te2D.getDepth(),te2D);
                            break;

                            case 3:
                                TileLine2D oldtl2D = (TileLine2D)compareTile;
                                TileLine2D tl2D = oldtl2D.clone();

                                tl2D.setX2((int)tl2D.getX2() + changedX);
                                tl2D.setY2((int)tl2D.getY2() + changedY);

                                sizeX.setText(String.valueOf((int)tl2D.getWidth()));
                                sizeY.setText(String.valueOf((int)tl2D.getHeight()));

                                getStage().getTileList().remove(tl2D.getDepth());
                                getStage().getTileList().add(tl2D.getDepth(),tl2D);
                            break;

                            case 4:
                                TilePolygon2D oldtp2D = (TilePolygon2D)compareTile;
                                TilePolygon2D tp2D = oldtp2D.clone();

                                //how..?

                                getStage().getTileList().remove(tp2D.getDepth());
                                getStage().getTileList().add(tp2D.getDepth(),tp2D);
                            break;

                            case 5:
                                TileRectangle2D oldtr2D = (TileRectangle2D)compareTile;
                                TileRectangle2D tr2D = oldtr2D.clone();

                                tr2D.setRightBottomX((int)tr2D.getRightBottomX() + changedX);
                                tr2D.setRightBottomY((int)tr2D.getRightBottomY() + changedY);

                                sizeX.setText(String.valueOf((int)tr2D.getWidth()));
                                sizeY.setText(String.valueOf((int)tr2D.getHeight()));

                                getStage().getTileList().remove(tr2D.getDepth());
                                getStage().getTileList().add(tr2D.getDepth(),tr2D);
                            break;

                            case 6:
                                TileRoundRectangle2D oldtrr2D = (TileRoundRectangle2D)compareTile;
                                TileRoundRectangle2D trr2D = oldtrr2D.clone();

                                trr2D.setRightBottomX((int)trr2D.getRightBottomX() + changedX);
                                trr2D.setRightBottomY((int)trr2D.getRightBottomY() + changedY);

                                sizeX.setText(String.valueOf((int)trr2D.getWidth()));
                                sizeY.setText(String.valueOf((int)trr2D.getHeight()));

                                getStage().getTileList().remove(trr2D.getDepth());
                                getStage().getTileList().add(trr2D.getDepth(),trr2D);
                            break;

                            case 7:
                                TilePolygon2D oldtpp2D = (TilePolygon2D)compareTile;
                                TilePolygon2D tpp2D = oldtpp2D.clone();

                                //how..?

                                getStage().getTileList().remove(tpp2D.getDepth());
                                getStage().getTileList().add(tpp2D.getDepth(),tpp2D);
                            break;

                            case 8:
                                TileImage2D oldti2D = (TileImage2D)compareTile;
                                TileImage2D ti2D = oldti2D.clone();

                                ti2D.setX2((int)ti2D.getX2() + changedX);
                                ti2D.setY2((int)ti2D.getY2() + changedY);

                                sizeX.setText(String.valueOf((int)ti2D.getWidth()));
                                sizeY.setText(String.valueOf((int)ti2D.getHeight()));

                                getStage().getTileList().remove(ti2D.getDepth());
                                getStage().getTileList().add(ti2D.getDepth(),ti2D);
                            break;

                            default:

                            break;
                        }

                        setDepth();
                        setPastState();
                        setDownStage();
                        getStage().repaint();
                    }
                }
            }
        }
    }//GEN-LAST:event_sizeDownActionPerformed

    private void sizeLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sizeLeftActionPerformed
        // TODO add your handling code here:
        if(isLargerState()) {
            
            if(getSelectState())   {
                if(isSelected())    {
                    if(getSelectNumber() == -1) {

                    }
                    else {
                        Drawable compareTile = getStage().getTileList().get(getSelectNumber());
                        int changedX = 5;
                        int changedY = 0;

                        switch( compareTile.getShapeType() ) {
                            case 1:

                            break;

                            case 2:
                                TileEllipse2D oldte2D = (TileEllipse2D)compareTile;
                                TileEllipse2D te2D = oldte2D.clone();

                                te2D.setMaxX((int)te2D.getMaxX() + changedX);
                                te2D.setMaxY((int)te2D.getMaxY() + changedY);

                                sizeX.setText(String.valueOf((int)te2D.getWidth()));
                                sizeY.setText(String.valueOf((int)te2D.getHeight()));

                                getStage().getTileList().remove(te2D.getDepth());
                                getStage().getTileList().add(te2D.getDepth(),te2D);
                            break;

                            case 3:
                                TileLine2D oldtl2D = (TileLine2D)compareTile;
                                TileLine2D tl2D = oldtl2D.clone();

                                tl2D.setX2((int)tl2D.getX2() + changedX);
                                tl2D.setY2((int)tl2D.getY2() + changedY);

                                sizeX.setText(String.valueOf((int)tl2D.getWidth()));
                                sizeY.setText(String.valueOf((int)tl2D.getHeight()));

                                getStage().getTileList().remove(tl2D.getDepth());
                                getStage().getTileList().add(tl2D.getDepth(),tl2D);
                            break;

                            case 4:
                                TilePolygon2D oldtp2D = (TilePolygon2D)compareTile;
                                TilePolygon2D tp2D = oldtp2D.clone();

                                //how..?

                                getStage().getTileList().remove(tp2D.getDepth());
                                getStage().getTileList().add(tp2D.getDepth(),tp2D);
                            break;

                            case 5:
                                TileRectangle2D oldtr2D = (TileRectangle2D)compareTile;
                                TileRectangle2D tr2D = oldtr2D.clone();

                                tr2D.setRightBottomX((int)tr2D.getRightBottomX() + changedX);
                                tr2D.setRightBottomY((int)tr2D.getRightBottomY() + changedY);

                                sizeX.setText(String.valueOf((int)tr2D.getWidth()));
                                sizeY.setText(String.valueOf((int)tr2D.getHeight()));

                                getStage().getTileList().remove(tr2D.getDepth());
                                getStage().getTileList().add(tr2D.getDepth(),tr2D);
                            break;

                            case 6:
                                TileRoundRectangle2D oldtrr2D = (TileRoundRectangle2D)compareTile;
                                TileRoundRectangle2D trr2D = oldtrr2D.clone();

                                trr2D.setRightBottomX((int)trr2D.getRightBottomX() + changedX);
                                trr2D.setRightBottomY((int)trr2D.getRightBottomY() + changedY);

                                sizeX.setText(String.valueOf((int)trr2D.getWidth()));
                                sizeY.setText(String.valueOf((int)trr2D.getHeight()));

                                getStage().getTileList().remove(trr2D.getDepth());
                                getStage().getTileList().add(trr2D.getDepth(),trr2D);
                            break;

                            case 7:
                                TilePolygon2D oldtpp2D = (TilePolygon2D)compareTile;
                                TilePolygon2D tpp2D = oldtpp2D.clone();

                                //how..?

                                getStage().getTileList().remove(tpp2D.getDepth());
                                getStage().getTileList().add(tpp2D.getDepth(),tpp2D);
                            break;

                            case 8:
                                TileImage2D oldti2D = (TileImage2D)compareTile;
                                TileImage2D ti2D = oldti2D.clone();

                                ti2D.setX2((int)ti2D.getX2() + changedX);
                                ti2D.setY2((int)ti2D.getY2() + changedY);

                                sizeX.setText(String.valueOf((int)ti2D.getWidth()));
                                sizeY.setText(String.valueOf((int)ti2D.getHeight()));

                                getStage().getTileList().remove(ti2D.getDepth());
                                getStage().getTileList().add(ti2D.getDepth(),ti2D);
                            break;

                            default:

                            break;
                        }

                        setDepth();
                        setPastState();
                        setDownStage();
                        getStage().repaint();
                    }
                }
            }
        }
        else if(isSmallerState())   {
            
            if(getSelectState())   {
                if(isSelected())    {
                    if(getSelectNumber() == -1) {

                    }
                    else {
                        Drawable compareTile = getStage().getTileList().get(getSelectNumber());
                        int changedX = -5;
                        int changedY = 0;

                        switch( compareTile.getShapeType() ) {
                            case 1:

                            break;

                            case 2:
                                TileEllipse2D oldte2D = (TileEllipse2D)compareTile;
                                TileEllipse2D te2D = oldte2D.clone();

                                te2D.setMaxX((int)te2D.getMaxX() + changedX);
                                te2D.setMaxY((int)te2D.getMaxY() + changedY);

                                sizeX.setText(String.valueOf((int)te2D.getWidth()));
                                sizeY.setText(String.valueOf((int)te2D.getHeight()));

                                getStage().getTileList().remove(te2D.getDepth());
                                getStage().getTileList().add(te2D.getDepth(),te2D);
                            break;

                            case 3:
                                TileLine2D oldtl2D = (TileLine2D)compareTile;
                                TileLine2D tl2D = oldtl2D.clone();

                                tl2D.setX2((int)tl2D.getX2() + changedX);
                                tl2D.setY2((int)tl2D.getY2() + changedY);

                                sizeX.setText(String.valueOf((int)tl2D.getWidth()));
                                sizeY.setText(String.valueOf((int)tl2D.getHeight()));

                                getStage().getTileList().remove(tl2D.getDepth());
                                getStage().getTileList().add(tl2D.getDepth(),tl2D);
                            break;

                            case 4:
                                TilePolygon2D oldtp2D = (TilePolygon2D)compareTile;
                                TilePolygon2D tp2D = oldtp2D.clone();

                                //how..?

                                getStage().getTileList().remove(tp2D.getDepth());
                                getStage().getTileList().add(tp2D.getDepth(),tp2D);
                            break;

                            case 5:
                                TileRectangle2D oldtr2D = (TileRectangle2D)compareTile;
                                TileRectangle2D tr2D = oldtr2D.clone();

                                tr2D.setRightBottomX((int)tr2D.getRightBottomX() + changedX);
                                tr2D.setRightBottomY((int)tr2D.getRightBottomY() + changedY);

                                sizeX.setText(String.valueOf((int)tr2D.getWidth()));
                                sizeY.setText(String.valueOf((int)tr2D.getHeight()));

                                getStage().getTileList().remove(tr2D.getDepth());
                                getStage().getTileList().add(tr2D.getDepth(),tr2D);
                            break;

                            case 6:
                                TileRoundRectangle2D oldtrr2D = (TileRoundRectangle2D)compareTile;
                                TileRoundRectangle2D trr2D = oldtrr2D.clone();

                                trr2D.setRightBottomX((int)trr2D.getRightBottomX() + changedX);
                                trr2D.setRightBottomY((int)trr2D.getRightBottomY() + changedY);

                                sizeX.setText(String.valueOf((int)trr2D.getWidth()));
                                sizeY.setText(String.valueOf((int)trr2D.getHeight()));

                                getStage().getTileList().remove(trr2D.getDepth());
                                getStage().getTileList().add(trr2D.getDepth(),trr2D);
                            break;

                            case 7:
                                TilePolygon2D oldtpp2D = (TilePolygon2D)compareTile;
                                TilePolygon2D tpp2D = oldtpp2D.clone();

                                //how..?

                                getStage().getTileList().remove(tpp2D.getDepth());
                                getStage().getTileList().add(tpp2D.getDepth(),tpp2D);
                            break;

                            case 8:
                                TileImage2D oldti2D = (TileImage2D)compareTile;
                                TileImage2D ti2D = oldti2D.clone();

                                ti2D.setX2((int)ti2D.getX2() + changedX);
                                ti2D.setY2((int)ti2D.getY2() + changedY);

                                sizeX.setText(String.valueOf((int)ti2D.getWidth()));
                                sizeY.setText(String.valueOf((int)ti2D.getHeight()));

                                getStage().getTileList().remove(ti2D.getDepth());
                                getStage().getTileList().add(ti2D.getDepth(),ti2D);
                            break;

                            default:

                            break;
                        }

                        setDepth();
                        setPastState();
                        setDownStage();
                        getStage().repaint();
                    }
                }
            }
        }
    }//GEN-LAST:event_sizeLeftActionPerformed

    private void sizeRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sizeRightActionPerformed
        // TODO add your handling code here:
        
        if(isLargerState()) {
            if(getSelectState())   {
                if(isSelected())    {
                    if(getSelectNumber() == -1) {

                    }
                    else {
                        Drawable compareTile = getStage().getTileList().get(getSelectNumber());
                        int changedX = 5;
                        int changedY = 0;

                        switch( compareTile.getShapeType() ) {
                            case 1:

                            break;

                            case 2:
                                TileEllipse2D oldte2D = (TileEllipse2D)compareTile;
                                TileEllipse2D te2D = oldte2D.clone();

                                te2D.setMinX((int)te2D.getMinX() - changedX);
                                te2D.setMinY((int)te2D.getMinY() - changedY);

                                sizeX.setText(String.valueOf((int)te2D.getWidth()));
                                sizeY.setText(String.valueOf((int)te2D.getHeight()));

                                getStage().getTileList().remove(te2D.getDepth());
                                getStage().getTileList().add(te2D.getDepth(),te2D);
                            break;

                            case 3:
                                TileLine2D oldtl2D = (TileLine2D)compareTile;
                                TileLine2D tl2D = oldtl2D.clone();

                                tl2D.setX1((int)tl2D.getX2() - changedX);
                                tl2D.setY1((int)tl2D.getY1() - changedY);

                                sizeX.setText(String.valueOf((int)tl2D.getWidth()));
                                sizeY.setText(String.valueOf((int)tl2D.getHeight()));

                                getStage().getTileList().remove(tl2D.getDepth());
                                getStage().getTileList().add(tl2D.getDepth(),tl2D);
                            break;

                            case 4:
                                TilePolygon2D oldtp2D = (TilePolygon2D)compareTile;
                                TilePolygon2D tp2D = oldtp2D.clone();

                                //how..?

                                getStage().getTileList().remove(tp2D.getDepth());
                                getStage().getTileList().add(tp2D.getDepth(),tp2D);
                            break;

                            case 5:
                                TileRectangle2D oldtr2D = (TileRectangle2D)compareTile;
                                TileRectangle2D tr2D = oldtr2D.clone();

                                tr2D.setLeftTopX((int)tr2D.getLeftTopX() - changedX);
                                tr2D.setLeftTopY((int)tr2D.getLeftTopY() - changedY);

                                sizeX.setText(String.valueOf((int)tr2D.getWidth()));
                                sizeY.setText(String.valueOf((int)tr2D.getHeight()));

                                getStage().getTileList().remove(tr2D.getDepth());
                                getStage().getTileList().add(tr2D.getDepth(),tr2D);
                            break;

                            case 6:
                                TileRoundRectangle2D oldtrr2D = (TileRoundRectangle2D)compareTile;
                                TileRoundRectangle2D trr2D = oldtrr2D.clone();

                                trr2D.setLeftTopX((int)trr2D.getLeftTopX() - changedX);
                                trr2D.setLeftTopY((int)trr2D.getLeftTopY() - changedY);

                                sizeX.setText(String.valueOf((int)trr2D.getWidth()));
                                sizeY.setText(String.valueOf((int)trr2D.getHeight()));

                                getStage().getTileList().remove(trr2D.getDepth());
                                getStage().getTileList().add(trr2D.getDepth(),trr2D);
                            break;

                            case 7:
                                TilePolygon2D oldtpp2D = (TilePolygon2D)compareTile;
                                TilePolygon2D tpp2D = oldtpp2D.clone();

                                //how..?

                                getStage().getTileList().remove(tpp2D.getDepth());
                                getStage().getTileList().add(tpp2D.getDepth(),tpp2D);
                            break;

                            case 8:
                                TileImage2D oldti2D = (TileImage2D)compareTile;
                                TileImage2D ti2D = oldti2D.clone();

                                ti2D.setX1((int)ti2D.getX1() + changedX);
                                ti2D.setY1((int)ti2D.getY1() + changedY);

                                sizeX.setText(String.valueOf((int)ti2D.getWidth()));
                                sizeY.setText(String.valueOf((int)ti2D.getHeight()));

                                getStage().getTileList().remove(ti2D.getDepth());
                                getStage().getTileList().add(ti2D.getDepth(),ti2D);
                            break;

                            default:

                            break;
                        }

                        setDepth();
                        setPastState();
                        setDownStage();
                        getStage().repaint();
                    }
                }
            }
        }
        else if(isSmallerState())   {
             if(getSelectState())   {
                if(isSelected())    {
                    if(getSelectNumber() == -1) {

                    }
                    else {
                        Drawable compareTile = getStage().getTileList().get(getSelectNumber());
                        int changedX = -5;
                        int changedY = 0;

                        switch( compareTile.getShapeType() ) {
                            case 1:

                            break;

                            case 2:
                                TileEllipse2D oldte2D = (TileEllipse2D)compareTile;
                                TileEllipse2D te2D = oldte2D.clone();

                                te2D.setMinX((int)te2D.getMinX() - changedX);
                                te2D.setMinY((int)te2D.getMinY() - changedY);

                                sizeX.setText(String.valueOf((int)te2D.getWidth()));
                                sizeY.setText(String.valueOf((int)te2D.getHeight()));

                                getStage().getTileList().remove(te2D.getDepth());
                                getStage().getTileList().add(te2D.getDepth(),te2D);
                            break;

                            case 3:
                                TileLine2D oldtl2D = (TileLine2D)compareTile;
                                TileLine2D tl2D = oldtl2D.clone();

                                tl2D.setX1((int)tl2D.getX2() - changedX);
                                tl2D.setY1((int)tl2D.getY1() - changedY);

                                sizeX.setText(String.valueOf((int)tl2D.getWidth()));
                                sizeY.setText(String.valueOf((int)tl2D.getHeight()));

                                getStage().getTileList().remove(tl2D.getDepth());
                                getStage().getTileList().add(tl2D.getDepth(),tl2D);
                            break;

                            case 4:
                                TilePolygon2D oldtp2D = (TilePolygon2D)compareTile;
                                TilePolygon2D tp2D = oldtp2D.clone();

                                //how..?

                                getStage().getTileList().remove(tp2D.getDepth());
                                getStage().getTileList().add(tp2D.getDepth(),tp2D);
                            break;

                            case 5:
                                TileRectangle2D oldtr2D = (TileRectangle2D)compareTile;
                                TileRectangle2D tr2D = oldtr2D.clone();

                                tr2D.setLeftTopX((int)tr2D.getLeftTopX() - changedX);
                                tr2D.setLeftTopY((int)tr2D.getLeftTopY() - changedY);

                                sizeX.setText(String.valueOf((int)tr2D.getWidth()));
                                sizeY.setText(String.valueOf((int)tr2D.getHeight()));

                                getStage().getTileList().remove(tr2D.getDepth());
                                getStage().getTileList().add(tr2D.getDepth(),tr2D);
                            break;

                            case 6:
                                TileRoundRectangle2D oldtrr2D = (TileRoundRectangle2D)compareTile;
                                TileRoundRectangle2D trr2D = oldtrr2D.clone();

                                trr2D.setLeftTopX((int)trr2D.getLeftTopX() - changedX);
                                trr2D.setLeftTopY((int)trr2D.getLeftTopY() - changedY);

                                sizeX.setText(String.valueOf((int)trr2D.getWidth()));
                                sizeY.setText(String.valueOf((int)trr2D.getHeight()));

                                getStage().getTileList().remove(trr2D.getDepth());
                                getStage().getTileList().add(trr2D.getDepth(),trr2D);
                            break;

                            case 7:
                                TilePolygon2D oldtpp2D = (TilePolygon2D)compareTile;
                                TilePolygon2D tpp2D = oldtpp2D.clone();

                                //how..?

                                getStage().getTileList().remove(tpp2D.getDepth());
                                getStage().getTileList().add(tpp2D.getDepth(),tpp2D);
                            break;

                            case 8:
                                TileImage2D oldti2D = (TileImage2D)compareTile;
                                TileImage2D ti2D = oldti2D.clone();

                                ti2D.setX1((int)ti2D.getX1() + changedX);
                                ti2D.setY1((int)ti2D.getY1() + changedY);

                                sizeX.setText(String.valueOf((int)ti2D.getWidth()));
                                sizeY.setText(String.valueOf((int)ti2D.getHeight()));

                                getStage().getTileList().remove(ti2D.getDepth());
                                getStage().getTileList().add(ti2D.getDepth(),ti2D);
                            break;

                            default:

                            break;
                        }

                        setDepth();
                        setPastState();
                        setDownStage();
                        getStage().repaint();
                    }
                }
            }
        }
    }//GEN-LAST:event_sizeRightActionPerformed

    private void jButton21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton21ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton21ActionPerformed
    
    private void setBorderColor(Color borderColor)   {
        getStage().setBoderColor(borderColor);
    }
    
    private void setFillingColor(Color fillingColor)    {
        getStage().setFillingColor(fillingColor);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu aniSettingMenu;
    private javax.swing.JPanel animationPanel1;
    private javax.swing.JPanel animationPanel2;
    private javax.swing.JPanel animationPanel3;
    private javax.swing.JPanel animationPanel4;
    private javax.swing.JPanel animationPanel5;
    private javax.swing.JPanel borderColorLabel;
    private javax.swing.JButton borderLineColorBtn;
    private javax.swing.JButton circleBtn;
    private javax.swing.JTextField circularPercentText;
    private javax.swing.JTextField depthTextField;
    private javax.swing.JTextField diameterTextField;
    private javax.swing.JButton eraserBtn;
    private javax.swing.JLabel eraserStateLabel;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton fillingColorBtn;
    private javax.swing.JPanel fillingColorLabel;
    private javax.swing.JButton freeArcBtn;
    private javax.swing.JButton inputTextBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton22;
    private javax.swing.JButton jButton23;
    private javax.swing.JButton jButton24;
    private javax.swing.JButton jButton25;
    private javax.swing.JButton jButton26;
    private javax.swing.JButton jButton27;
    private javax.swing.JButton jButton28;
    private javax.swing.JButton jButton29;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton34;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton largerBtn;
    private javax.swing.JButton lineBtn;
    private javax.swing.JPanel lineSizePanel;
    private javax.swing.JMenuItem loadFileItem;
    private javax.swing.JTextField localX;
    private javax.swing.JTextField localY;
    private javax.swing.JButton ovalBtn;
    private javax.swing.JButton polygonBtn;
    private javax.swing.JButton rectangleBtn;
    private javax.swing.JButton redoBtn;
    private javax.swing.JButton removeBtn;
    private javax.swing.JLabel removeStateLabel;
    private javax.swing.JTextField rotationTextField;
    private javax.swing.JMenuItem saveFileItem;
    private javax.swing.JMenuItem saveOtherName;
    private javax.swing.JButton selectBtn;
    private javax.swing.JLabel selectStateLabel;
    private javax.swing.JButton sizeDown;
    private javax.swing.JButton sizeLeft;
    private javax.swing.JButton sizeRight;
    private javax.swing.JButton sizeUp;
    private javax.swing.JTextField sizeX;
    private javax.swing.JTextField sizeY;
    private javax.swing.JButton smallerBtn;
    private javax.swing.JLabel stageLabel;
    private javax.swing.JPanel textColorPanel;
    private javax.swing.JTextArea textInput;
    private javax.swing.JTextField textLocalX;
    private javax.swing.JTextField textLocalY;
    private javax.swing.JTextField textSize;
    private javax.swing.JButton undoBtn;
    // End of variables declaration//GEN-END:variables
    public void setStage(Stage stage) {
        this.stage = stage;
    }

    public Stage getStage() {
        return this.stage;
    }

    public void setFirstX(int firstX)    {
        this.firstX = firstX;
    }
    
    public int getFirstX()    {
        return this.firstX;
    }
    
    public void setFirstY(int firstY)    {
        this.firstY = firstY;
    }
    
    public int getFirstY()   {
        return this.firstY;
    }
    
    public void setSecondX(int secondX)  {
        this.secondX = secondX;
    }
    
    public int getSecondX()  {
        return this.secondX;
    }
    
    public void setSecondY(int secondY)  {
        this.secondY = secondY;
    }
    
    public int getSecondY()  {
        return this.secondY;
    }
    
    public boolean getSelectState() {
        return this.selectState;
    }
    
    public boolean getRemoveState() {
        return this.removeState;
    }
    
    public boolean getEraserState() {
        return this.eraserState;
    }
    
    public void setSelectState(boolean selectState)    {
        this.selectState = selectState;
    }
    
    public void setRemoveState(boolean removeState)    {
        this.removeState = removeState;
    }
    
    public void setEraserState(boolean eraserState)    {
        this.eraserState = eraserState;
    }
    
    public void setSelectNumber(int selcetNumber)   {
        this.selcetNumber = selcetNumber;
    }
    
    public int getSelectNumber()    {
        return selcetNumber;
    }
    
    public boolean isSelected() {
        return this.selected;
    }
    
    public void setSelected(boolean selected)   {
        this.selected = selected;
    }
    
    public Drawable getTempShape()  {
        return this.tempShape;
    }
    
    public void setTempShape(Drawable tempShape)    {
        this.tempShape = tempShape;
    }
    
    public boolean isPolygonState() {
        return this.polygonState;
    }
    
    public void setPolygonState(boolean polygonState)   {
        this.polygonState = polygonState;
    }
    public ArrayList<Stage> getStageList() {
        return this.stageList;
    }
    
    public void setStageList(ArrayList<Stage> stageList)    {
        this.stageList = stageList;
    }
    
    public int getStageNumber() {
        return this.stageNumber;
    }
    
    public void setStageNumber(int stageNumber) {
        this.stageNumber = stageNumber;
    }
    public int getMaxStageNumber() {
        return this.maxStageNumber;
    }
    
    public void setMaxStageNumber(int maxStageNumber) {
        this.maxStageNumber = maxStageNumber;
    }
    
    public void setAnimationList( ArrayList<ArrayList<Stage>> animationList )  {
        this.animationList = animationList;
    }
    
    public ArrayList<ArrayList<Stage>> getAnimationList()   {
        return this.animationList;
    }
    public int getAnimationStageNumber ()  {
        return this.animationStageNumber;
    }
    
    public int getAnimationMaxStageNumber ()  {
        return this.animationMaxStageNumber;
    }
    
    public void setAnimationStageNumber ( int animationStageNumber )  {
        this.animationStageNumber = animationStageNumber;
    }
    
    public void setAnimationMaxStageNumber ( int animationMaxStageNumber )  {
        this.animationMaxStageNumber = animationMaxStageNumber;
    }
    
    public void setBufferedImage( BufferedImage bufferedImage )  {
        this.bufferedImage = bufferedImage;
    }
    
    public BufferedImage getBufferedImage() {
        return this.bufferedImage;
    }
    
    public boolean isImageSelected()   {
        return this.imageSlected;
    }
    
    public void setImageSelected(boolean imageSlected)  {
        this.imageSlected = imageSlected;
    }
    
    public void setLargerState(boolean largerState)    {
        this.largerState = largerState;
    }
    
    public void setSmallerState(boolean smallerState)   {
        this.smallerState = smallerState;
    }
    
    public boolean isLargerState()  {
        return this.largerState;
    }
    
    public boolean isSmallerState() {
        return this.smallerState;
    }
    
    public void saveDiary(String fileExtension)   {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileNameExtensionFilter(fileExtension,fileExtension));
        fileChooser.setMultiSelectionEnabled(false);
        
        if(fileChooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            String fileName = fileChooser.getSelectedFile().toString();
            if(fileName.endsWith(".md") || fileName.endsWith(".pmd")) {
                
            }
            else {
                fileName = (fileName.concat(".")).concat(fileExtension);
            }
            if(fileName.length() == 3)   {
                JOptionPane.showMessageDialog(null, "File name must be longer then 1", "Error!!", JOptionPane.ERROR_MESSAGE);
            }
            if(fileName.endsWith(".pmd"))   {
                File file = new File(fileName);
                try {
                    file.delete();
                    boolean a = file.createNewFile();
                    if(!a)  {
                        JOptionPane.showMessageDialog(null, "File Creation Error.", "Error!!", JOptionPane.ERROR_MESSAGE);
                    }
                    AnimationVeiwer aViewer = new AnimationVeiwer(getAnimationList());
                    
                    
                    FileOutputStream fos = new FileOutputStream(fileName);
                    ObjectOutputStream oos = new ObjectOutputStream(fos);
                    
                    oos.writeObject(aViewer.getSpecifiedTile());
                    
                    fos.close();
                    oos.close();

                } catch (FileNotFoundException ex) {

                } catch (IOException ex) {

                }
            }
            else if( fileName.endsWith(".md") ){
                File file = new File(fileName);
                try {
                    file.delete();
                    boolean a = file.createNewFile();
                    if(!a)  {
                        JOptionPane.showMessageDialog(null, "File Creation Error.", "Error!!", JOptionPane.ERROR_MESSAGE);
                    }
                    
                    FileOutputStream fos = new FileOutputStream(fileName);
                    ObjectOutputStream oos = new ObjectOutputStream(fos);
                    
                    oos.writeObject(getAnimationList());
                    
                    fos.close();
                    oos.close();

                } catch (FileNotFoundException ex) {

                } catch (IOException ex) {

                }
            }
        }
    }
    
    public void loadDiary(String fileExtension)  {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileNameExtensionFilter(fileExtension,fileExtension));
        fileChooser.setMultiSelectionEnabled(false);
        if(fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            String fileName = fileChooser.getSelectedFile().toString();
                if(fileName.endsWith(".md"))   {
                    try {
                        FileInputStream fis = new FileInputStream(fileName);
                        ObjectInputStream ois = new ObjectInputStream(fis);
                        ArrayList<ArrayList<Stage> > tempAnimationList = (ArrayList<ArrayList<Stage> >)ois.readObject();

                        minusStage();
                        setAnimationList(tempAnimationList);

                        setStageList(getAnimationList().get(0));
                        setStageNumber(getStageList().size() - 1);
                        setMaxStageNumber(getStageList().size());
                        setAnimationStageNumber(0);
                        setAnimationMaxStageNumber(getAnimationList().size());

                        addStage(getStageList().get(getStageList().size() - 1));


                        setDownStage();


                        fis.close();
                        ois.close();
                    } catch (FileNotFoundException ex) {

                    } catch (IOException ex) {

                    } catch (ClassNotFoundException ex) {
                    }
                }
                else if ( fileName.endsWith(".pmd") ) {
                    try {
                        FileInputStream fis = new FileInputStream(fileName);
                        ObjectInputStream ois = new ObjectInputStream(fis);
                        
                        
                        JFrame tempFrame = new JFrame("Animation Play Screen.");
                        JPanel tempPanel = new JPanel();
                        JPanel temp2Panel = new JPanel();
                        JButton startButton = new JButton("Start");
                        JButton rotationButton = new JButton("Rotation");
                        JButton stopButton = new JButton("Stop");
                        
                        AnimationVeiwer aniView = new AnimationVeiwer((ArrayList<ArrayList<Drawable> >)ois.readObject(), true);

                        fis.close();
                        ois.close();
                        
                        temp2Panel.setLayout(new BorderLayout());
                        tempFrame.setLayout(new BorderLayout());
                        tempPanel.setLayout(new BorderLayout());
                        tempFrame.add(aniView, BorderLayout.CENTER);
                        tempFrame.add(temp2Panel, BorderLayout.SOUTH);
                        temp2Panel.add(tempPanel, BorderLayout.SOUTH);
                        LoadingPanel nowPanel = new LoadingPanel(aniView.getMaxViewNumber(), aniView.getNowViewNumber(), 980);
                        
                        Thread veiwThread = new Thread() {
                                        @Override
                                        public void run() {
                                                while (true) {
                                                    nowPanel.setNow(aniView.getNowViewNumber());
                                                    aniView.repaint();
                                                    nowPanel.repaint();
                                                        try {
                                                                this.sleep(UPDATE_TIME_VAR);  // Milliseconds
                                                                } catch (InterruptedException ignore) {
                                                                }
                                                        }
                                                }
                                        };

                        temp2Panel.add(nowPanel, BorderLayout.NORTH);



                        startButton.addActionListener(new ActionListener()  {
                            @Override
                            public void actionPerformed(ActionEvent e) {
                                aniView.setStopped(false);
                                if(!veiwThread.isAlive())    {
                                    veiwThread.start();
                                    aniView.setNowViewNumber(0);
                                }
                            }
                        });
                        tempPanel.add(startButton , BorderLayout.WEST );

                        rotationButton.addActionListener(new ActionListener()  {
                            @Override
                            public void actionPerformed(ActionEvent e) {
                                if(aniView.isRotation())    {
                                    aniView.setRotation(false);
                                }
                                else {
                                    aniView.setRotation(true);
                                }
                            }
                        });
                        tempPanel.add(rotationButton , BorderLayout.CENTER);

                        stopButton.addActionListener(new ActionListener()  {
                            @Override
                                public void actionPerformed(ActionEvent e) {
                                    aniView.setStopped(true);
                            }
                        });
                        tempPanel.add(stopButton , BorderLayout.EAST);
                        aniView.setSize(962, 771);
                        tempFrame.setSize(980, 850);
                        tempFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
                        tempFrame.setVisible(true);
                        
                    } catch (IOException ex) {
                        
                    } catch (ClassNotFoundException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                }
        }
    }
    
    public void setLineDiameter(int lineDiameter)   {
        this.lineDiameter = lineDiameter;
    }
    
    public int getLineDiameter()    {
        return this.lineDiameter;
    }
    
    public void setPastState() {
        if(getStageList().size() > getMaxStageNumber()) {
            for(int i = getMaxStageNumber(); i < getStageList().size(); i++)   {
                getStageList().remove(i);
                i--;
            }
        }

        getStageList().add(getStage().clone());
        setStageNumber(getStageNumber() + 1);
        setMaxStageNumber(getStageNumber() + 1);
    }
    
    public void setDepth()  {
            for(int i = 0; i < getStage().getTileList().size(); i++)    {
                getStage().getTileList().get(i).setDepth(i);
            }
    }
    @Override
    public void mouseClicked(MouseEvent e) {
        if(getRemoveState()) {
            if(getStage().getTileTop(e.getX(), e.getY()) == -1) {
                
            }
            else {
                getStage().getTileList().remove(getStage().getTileTop(e.getX(),e.getY()));
                getStage().tempD = null;
                
                if(getStageList().size() > getMaxStageNumber()) {
                    for(int i = getMaxStageNumber(); i < getStageList().size(); i++)   {
                        getStageList().remove(i);
                        i--;
                    }
                }
                
                getStageList().add(getStage().clone());
                setStageNumber(getStageNumber() + 1);
                setMaxStageNumber(getStageNumber() + 1);
                setDownStage();
            }
        }
        else if(getSelectState())   {
            if(getStage().getTileTop(e.getX(), e.getY()) == -1) {
                for(int i = 0; i < getStage().getTileList().size(); i++)    {
                    getStage().getTileList().get(i).setClicked(false);
                    setSelected(false);
                    setSelectNumber(-1);
                    rotationTextField.setText("0");
                }
            }
            else {
                if(getStage().getTileList().get(getStage().getTileTop(e.getX(),e.getY())).isClicked())  {
                    getStage().getTileList().get(getStage().getTileTop(e.getX(),e.getY())).setClicked(false);
                    setSelected(false);
                    setSelectNumber(-1);
                    rotationTextField.setText("0");
                }
                else {
                    for(int i = 0; i < getStage().getTileList().size(); i++)    {
                        getStage().getTileList().get(i).setClicked(false);
                        setSelectNumber(-1);
                    }
                    getStage().getTileList().get(getStage().getTileTop(e.getX(),e.getY())).setClicked(true);
                    setSelected(true);
                    setSelectNumber(getStage().getTileTop(e.getX(),e.getY()));
                    
                    switch (getStage().getTileList().get(getSelectNumber()).getShapeType()) {
                        case 1:
                            
                            break;
                        case 2:
                            TileEllipse2D te2D = (TileEllipse2D)getStage().getTileList().get(getSelectNumber());
                            rotationTextField.setText(String.valueOf(te2D.getTd().getRotateDegree()));
                            depthTextField.setText(String.valueOf(te2D.getTd().getDepth()));
                            textInput.setText(te2D.getTtd().getTextContext());
                            textLocalX.setText(String.valueOf(te2D.getTtd().getX()));
                            textLocalY.setText(String.valueOf(te2D.getTtd().getY()));
                            textSize.setText(String.valueOf(te2D.getTtd().getTextFont().getSize()));
                            localX.setText(String.valueOf((int)te2D.getX()));
                            localY.setText(String.valueOf((int)te2D.getY()));
                            sizeX.setText(String.valueOf((int)te2D.getWidth()));
                            sizeY.setText(String.valueOf((int)te2D.getHeight()));
                            
                            break;
                        case 3:
                            TileLine2D tl2D = (TileLine2D)getStage().getTileList().get(getSelectNumber());
                            rotationTextField.setText(String.valueOf(tl2D.getTd().getRotateDegree()));
                            depthTextField.setText(String.valueOf(tl2D.getTd().getDepth()));
                            localX.setText(String.valueOf((int)tl2D.getX1()));
                            localY.setText(String.valueOf((int)tl2D.getY1()));
                            sizeX.setText(String.valueOf((int)tl2D.getWidth()));
                            sizeY.setText(String.valueOf((int)tl2D.getHeight()));
                            
                            break;
                        case 4:
                            TilePolygon2D tp2D = (TilePolygon2D)getStage().getTileList().get(getSelectNumber());
                            rotationTextField.setText(String.valueOf(tp2D.getTd().getRotateDegree()));
                            depthTextField.setText(String.valueOf(tp2D.getTd().getDepth()));
                            textInput.setText(tp2D.getTtd().getTextContext());
                            textLocalX.setText(String.valueOf(tp2D.getTtd().getX()));
                            textLocalY.setText(String.valueOf(tp2D.getTtd().getY()));
                            textSize.setText(String.valueOf(tp2D.getTtd().getTextFont().getSize()));
                            localX.setText(String.valueOf((int)tp2D.getXpoint()[0]));
                            localY.setText(String.valueOf((int)tp2D.getYpoint()[0]));
                            sizeX.setText(String.valueOf((int)tp2D.getWidth()));
                            sizeY.setText(String.valueOf((int)tp2D.getHeight()));
                            break;
                        case 5:
                            TileRectangle2D tr2D = (TileRectangle2D)getStage().getTileList().get(getSelectNumber());
                            rotationTextField.setText(String.valueOf(tr2D.getTd().getRotateDegree()));
                            depthTextField.setText(String.valueOf(tr2D.getTd().getDepth()));
                            textInput.setText(tr2D.getTtd().getTextContext());
                            textLocalX.setText(String.valueOf(tr2D.getTtd().getX()));
                            textLocalY.setText(String.valueOf(tr2D.getTtd().getY()));
                            textSize.setText(String.valueOf(tr2D.getTtd().getTextFont().getSize()));
                            localX.setText(String.valueOf((int)tr2D.getLeftTopX()));
                            localY.setText(String.valueOf((int)tr2D.getLeftTopY()));
                            sizeX.setText(String.valueOf((int)tr2D.getWidth()));
                            sizeY.setText(String.valueOf((int)tr2D.getHeight()));
                            break;
                        case 6:
                            TileRoundRectangle2D trr2D = (TileRoundRectangle2D)getStage().getTileList().get(getSelectNumber());
                            rotationTextField.setText(String.valueOf(trr2D.getTd().getRotateDegree()));
                            depthTextField.setText(String.valueOf(trr2D.getTd().getDepth()));
                            textInput.setText(trr2D.getTtd().getTextContext());
                            textLocalX.setText(String.valueOf(trr2D.getTtd().getX()));
                            textLocalY.setText(String.valueOf(trr2D.getTtd().getY()));
                            textSize.setText(String.valueOf(trr2D.getTtd().getTextFont().getSize()));
                            localX.setText(String.valueOf((int)trr2D.getLeftTopX()));
                            localY.setText(String.valueOf((int)trr2D.getLeftTopY()));
                            sizeX.setText(String.valueOf((int)trr2D.getWidth()));
                            sizeY.setText(String.valueOf((int)trr2D.getHeight()));
                            break;
                        case 7:
                            TilePolygon2D tpg2D = (TilePolygon2D)getStage().getTileList().get(getSelectNumber());
                            rotationTextField.setText(String.valueOf(tpg2D.getTd().getRotateDegree()));
                            depthTextField.setText(String.valueOf(tpg2D.getTd().getDepth()));
                            textInput.setText(tpg2D.getTtd().getTextContext());
                            textLocalX.setText(String.valueOf(tpg2D.getTtd().getX()));
                            textLocalY.setText(String.valueOf(tpg2D.getTtd().getY()));
                            textSize.setText(String.valueOf(tpg2D.getTtd().getTextFont().getSize()));
                            localX.setText(String.valueOf((int)tpg2D.getXpoint()[0]));
                            localY.setText(String.valueOf((int)tpg2D.getYpoint()[0]));
                            sizeX.setText(String.valueOf((int)tpg2D.getWidth()));
                            sizeY.setText(String.valueOf((int)tpg2D.getHeight()));
                            break;
                        case 8:
                            TileImage2D ti2D = (TileImage2D)getStage().getTileList().get(getSelectNumber());
                            rotationTextField.setText(String.valueOf(ti2D.getTd().getRotateDegree()));
                            depthTextField.setText(String.valueOf(ti2D.getTd().getDepth()));
                            localX.setText(String.valueOf((int)ti2D.getX1()));
                            localY.setText(String.valueOf((int)ti2D.getY1()));
                            sizeX.setText(String.valueOf((int)ti2D.getWidth()));
                            sizeY.setText(String.valueOf((int)ti2D.getHeight()));
                            break;
                        default:
                            break;
                    }
                }
            }
        }
        else if(getStage().isPolygon()) {
            if(getStage().isPolygonDrawing())  {
                if(Xpoint.get(0) <= e.getX() + 6 && Xpoint.get(0) >= e.getX() - 6 )    {
                    if(Ypoint.get(0) <= e.getY() + 6 && Ypoint.get(0) >= e.getY() - 6 )    {
                        
                        Xpoint.add(Xpoint.get(0));
                        Ypoint.add(Ypoint.get(0));
                        
                        getStage().setPolygonDrawing(false);
                        
                        int[] x = new int[Xpoint.size()];
                        int[] y = new int[Ypoint.size()];
                        
                        for(int i = 0 ; i < Xpoint.size(); i++) {
                            x[i] = Xpoint.get(i);
                            y[i] = Ypoint.get(i);
                        }
                        
                        TilePolygon2D tp = new TilePolygon2D(x,y,Xpoint.size(),true,Integer.parseInt(rotationTextField.getText()), getStage().getTileList().size() , "", x[0],y[0], "Serif", 0, 15, textColorPanel.getBackground() ,  getStage().getBorderColor(), getStage().getFillingColor());
                        
                        Xpoint.clear();
                        Ypoint.clear();
                        getStage().getTileList().add(tp);
                        getStage().repaint();
                        getStage().tempD = null;

                        if(getStageList().size() > getMaxStageNumber()) {
                            for(int i = getMaxStageNumber(); i < getStageList().size(); i++)   {
                                getStageList().remove(i);
                                i--;
                            }
                        }

                        getStageList().add(getStage().clone());
                        setStageNumber(getStageNumber() + 1);
                        setMaxStageNumber(getStageNumber() + 1);
                        
                    }
                    else {
                        Xpoint.add(e.getX());
                        Ypoint.add(e.getY());
                        int[] x = new int[Xpoint.size()];
                        int[] y = new int[Ypoint.size()];
                        
                        for(int i = 0 ; i < Xpoint.size(); i++) {
                            x[i] = Xpoint.get(i);
                            y[i] = Ypoint.get(i);
                        }
                        
                        TilePolygon2D tp = new TilePolygon2D(x,y,Xpoint.size(),false,Integer.parseInt(rotationTextField.getText()), getStage().getTileList().size() , "", x[0],y[0], "Serif", 0, 15, textColorPanel.getBackground() ,  getStage().getBorderColor(), getStage().getFillingColor());
                        
                        getStage().tempD = tp;
                    }
                }
                else {
                    Xpoint.add(e.getX());
                    Ypoint.add(e.getY());
                    int[] x = new int[Xpoint.size()];
                    int[] y = new int[Ypoint.size()];

                    for(int i = 0 ; i < Xpoint.size(); i++) {
                        x[i] = Xpoint.get(i);
                        y[i] = Ypoint.get(i);
                    }

                    TilePolygon2D tp = new TilePolygon2D(x,y,Xpoint.size(),false,Integer.parseInt(rotationTextField.getText()), getStage().getTileList().size() , "", x[0],y[0], "Serif", 0, 15, textColorPanel.getBackground() ,  getStage().getBorderColor(), getStage().getFillingColor());

                    getStage().tempD = tp;
                }
            }
            else {
                getStage().setPolygonDrawing(true);
                Xpoint.add(e.getX());
                Ypoint.add(e.getY());
            }
        }
        getStage().repaint();
    }

    @Override
    public void mousePressed(MouseEvent e) {
        xList.clear();
        yList.clear();
        
        setFirstX(e.getX());
        setFirstY(e.getY());
        
        setSecondX(e.getX());
        setSecondY(e.getY());
       
        if(getRemoveState()) {
            
        }
        
        else if(getSelectState())   {
            if(isSelected())    {
                if(getSelectNumber() == -1)   {
                    
                }
                else if(getSelectNumber() != -1) {
                    if(getSelectNumber() == getStage().getTileTop(e.getX(),e.getY()))   {
                        setTempShape(getStage().getTileList().get(getSelectNumber()));
                        getStage().getTileList().remove(getSelectNumber());
                        getStage().tempD = getTempShape();
                        getStage().repaint();
                    }
                    else {
                        setSelectNumber(-1);
                        setTempShape(null);
                    }
                }
            }
        }
    }

    
    @Override
    public void mouseReleased(MouseEvent e) {
        setSecondX(e.getX());
        setSecondY(e.getY());
        
        int minX,minY,maxX,maxY;
        
        if(getFirstX() >= getSecondX()) {
            minX = getSecondX();
            maxX = getFirstX();
        }
        else {
            maxX = getSecondX();
            minX = getFirstX();
        }
        if(getFirstY() >= getSecondY()) {
            minY = getSecondY();
            maxY = getFirstY();
        }
        else  {
            maxY = getSecondY();
            minY = getFirstY();
        }
        int width = maxX - minX;
        int height = maxY - minY;
        
        if(getRemoveState()) {
            
        }
        else if(getSelectState())   {
            if(isSelected())    {
                if(getSelectNumber() == -1) {

                }
                else {
                    switch (getTempShape().getShapeType()) {
                        case 1:
                            
                            break;
                        case 2:
                            setTempShape(new TileEllipse2D((int)((TileEllipse2D)getTempShape()).getMinX() + draggedX, (int)((TileEllipse2D)getTempShape()).getMinY() + draggedY, (int)((TileEllipse2D)getTempShape()).getMaxX() + draggedX, (int)((TileEllipse2D)getTempShape()).getMaxY() + draggedY,((TileEllipse2D)getTempShape()).getTd().getRotateDegree(), ((TileEllipse2D)getTempShape()).getTd().getDepth(),  (( TileEllipse2D )getTempShape()).getTtd().getTextContext(), (( TileEllipse2D )getTempShape()).getTtd().getX() + draggedX, (( TileEllipse2D )getTempShape()).getTtd().getY() + draggedY, (( TileEllipse2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TileEllipse2D )getTempShape()).getTtd().getTextFont().getStyle(), (( TileEllipse2D )getTempShape()).getTtd().getTextFont().getSize(), ((  TileEllipse2D)getTempShape()).getTtd().getTextColor(), ((TileEllipse2D)getTempShape()).getTd().getBorderColor(), ((TileEllipse2D)getTempShape()).getTd().getFillingColor()));
                            getStage().getTileList().add(getSelectNumber(),(TileEllipse2D)getTempShape());
                            break;
                        case 3:
                            setTempShape(new TileLine2D((int)((TileLine2D)getTempShape()).getX1() + draggedX, (int)((TileLine2D)getTempShape()).getY1() + draggedY, (int)((TileLine2D)getTempShape()).getX2() + draggedX, (int)((TileLine2D)getTempShape()).getY2() + draggedY, ((TileLine2D)getTempShape()).getTd().getRotateDegree(),((TileLine2D)getTempShape()).getTd().getDepth(), ((TileLine2D)getTempShape()).getTd().getBorderColor()));
                            getStage().getTileList().add(getSelectNumber(),(TileLine2D)getTempShape());
                            break;
                        case 4:
                            int[] x1 = new int[((TilePolygon2D)getTempShape()).getPointSize()];
                            int[] y1 = new int[((TilePolygon2D)getTempShape()).getPointSize()];
                            
                            for(int i = 0; i < ((TilePolygon2D)getTempShape()).getPointSize(); i++) {
                                x1[i] = ((TilePolygon2D)getTempShape()).getXpoint()[i] + draggedX;
                                y1[i] = ((TilePolygon2D)getTempShape()).getYpoint()[i] + draggedY;
                            }
                            setTempShape(new TilePolygon2D(x1, y1, ((TilePolygon2D)getTempShape()).getPointSize(), false, ((TilePolygon2D)getTempShape()).getTd().getRotateDegree(), ((TilePolygon2D)getTempShape()).getTd().getDepth(), (( TilePolygon2D )getTempShape()).getTtd().getTextContext(), (( TilePolygon2D )getTempShape()).getTtd().getX(), (( TilePolygon2D )getTempShape()).getTtd().getY(), (( TilePolygon2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TilePolygon2D )getTempShape()).getTtd().getTextFont().getStyle(), ((TilePolygon2D  )getTempShape()).getTtd().getTextFont().getSize(), (( TilePolygon2D )getTempShape()).getTtd().getTextColor(), ((TilePolygon2D)getTempShape()).getTd().getBorderColor(),((TilePolygon2D)getTempShape()).getTd().getFillingColor()));
                            getStage().getTileList().add(getSelectNumber(),(TilePolygon2D)getTempShape());
                            break;
                        case 5:
                            setTempShape(new TileRectangle2D(((TileRectangle2D)getTempShape()).getLeftTopX() + draggedX, ((TileRectangle2D)getTempShape()).getLeftTopY() + draggedY, ((TileRectangle2D)getTempShape()).getRightBottomX() + draggedX, ((TileRectangle2D)getTempShape()).getRightBottomY() + draggedY,((TileRectangle2D)getTempShape()).getTd().getRotateDegree(),((TileRectangle2D)getTempShape()).getTd().getDepth(),  (( TileRectangle2D )getTempShape()).getTtd().getTextContext(), (( TileRectangle2D )getTempShape()).getTtd().getX() + draggedX, (( TileRectangle2D )getTempShape()).getTtd().getY() + draggedY, (( TileRectangle2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TileRectangle2D )getTempShape()).getTtd().getTextFont().getStyle(), (( TileRectangle2D )getTempShape()).getTtd().getTextFont().getSize(), (( TileRectangle2D )getTempShape()).getTtd().getTextColor(), ((TileRectangle2D)getTempShape()).getTd().getBorderColor(), ((TileRectangle2D)getTempShape()).getTd().getFillingColor()));
                            getStage().getTileList().add(getSelectNumber(),(TileRectangle2D)getTempShape());
                            break;
                        case 6:
                            setTempShape(new TileRoundRectangle2D((int)((TileRoundRectangle2D)getTempShape()).getLeftTopX() + draggedX,(int)((TileRoundRectangle2D)getTempShape()).getLeftTopY() + draggedY,(int)((TileRoundRectangle2D)getTempShape()).getRightBottomX() + draggedX, (int)((TileRoundRectangle2D)getTempShape()).getRightBottomY() + draggedY, (int)((TileRoundRectangle2D)getTempShape()).getArcWidth(), (int)((TileRoundRectangle2D)getTempShape()).getArcHeight(), (int)((TileRoundRectangle2D)getTempShape()).getTd().getRotateDegree() , ((TileRoundRectangle2D)getTempShape()).getTd().getDepth(),  (( TileRoundRectangle2D )getTempShape()).getTtd().getTextContext(), ((  TileRoundRectangle2D)getTempShape()).getTtd().getX() + draggedX, (( TileRoundRectangle2D )getTempShape()).getTtd().getY() + draggedY, (( TileRoundRectangle2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TileRoundRectangle2D )getTempShape()).getTtd().getTextFont().getStyle(), ((  TileRoundRectangle2D)getTempShape()).getTtd().getTextFont().getSize(), (( TileRoundRectangle2D )getTempShape()).getTtd().getTextColor(), ((TileRoundRectangle2D)getTempShape()).getTd().getBorderColor(), ((TileRoundRectangle2D)getTempShape()).getTd().getFillingColor()));
                            getStage().getTileList().add(getSelectNumber(),(TileRoundRectangle2D)getTempShape());
                            break;
                        case 7:
                            int[] x2 = new int[((TilePolygon2D)getTempShape()).getPointSize()];
                            int[] y2 = new int[((TilePolygon2D)getTempShape()).getPointSize()];
                            
                            for(int i = 0; i < ((TilePolygon2D)getTempShape()).getPointSize(); i++) {
                                x2[i] = ((TilePolygon2D)getTempShape()).getXpoint()[i] + draggedX;
                                y2[i] = ((TilePolygon2D)getTempShape()).getYpoint()[i] + draggedY;
                            }
                            setTempShape(new TilePolygon2D(x2, y2, ((TilePolygon2D)getTempShape()).getPointSize(), true, ((TilePolygon2D)getTempShape()).getTd().getRotateDegree(), ((TilePolygon2D)getTempShape()).getTd().getDepth(),  (( TilePolygon2D )getTempShape()).getTtd().getTextContext(), (( TilePolygon2D )getTempShape()).getTtd().getX() + draggedX, (( TilePolygon2D )getTempShape()).getTtd().getY() + draggedY, (( TilePolygon2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TilePolygon2D )getTempShape()).getTtd().getTextFont().getStyle(), ((TilePolygon2D  )getTempShape()).getTtd().getTextFont().getSize(), (( TilePolygon2D )getTempShape()).getTtd().getTextColor(), ((TilePolygon2D)getTempShape()).getTd().getBorderColor(),((TilePolygon2D)getTempShape()).getTd().getFillingColor()));
                            getStage().getTileList().add(getSelectNumber(),(TilePolygon2D)getTempShape());
                            break;
                        case 8://int x1,int y1,int x2,int y2,int rotateDegree,int depth, BufferedImage bufferedImage,  Color borderColor, Color fillingColor
                            setTempShape(new TileImage2D((int)((TileImage2D)getTempShape()).getX1() + draggedX,(int)((TileImage2D)getTempShape()).getY1() + draggedY,(int)((TileImage2D)getTempShape()).getX2() + draggedX, (int)((TileImage2D)getTempShape()).getY2() + draggedY,  (int)((TileImage2D)getTempShape()).getTd().getRotateDegree() , ((TileImage2D)getTempShape()).getTd().getDepth(), ((TileImage2D)getTempShape()).getBufferedImage(), ((TileImage2D)getTempShape()).getTd().getBorderColor(), ((TileImage2D)getTempShape()).getTd().getFillingColor()));
                            getStage().getTileList().add(getSelectNumber(),(TileImage2D)getTempShape());
                            break;
                        default:
                            break;
                    }
                    getStage().repaint();
                    getStage().tempD = null;
                    if(getStageList().size() > getMaxStageNumber()) {
                        for(int i = getMaxStageNumber(); i < getStageList().size(); i++)   {
                            getStageList().remove(i);
                            i--;
                        }
                    }

                    getStageList().add(getStage().clone());
                    setStageNumber(getStageNumber() + 1);
                    setMaxStageNumber(getStageNumber() + 1);
                    setTempShape(null);
                    setSelectNumber(-1);
                    setDownStage();
                }
            }
        }
        else if(getEraserState()) {
            if(getStage().isFreeLine()) {
                int[] x1 = new int[xList.size()];
                int[] y1 = new int[xList.size()];

                for(int i = 0; i < xList.size(); i++) {
                    x1[i] = xList.get(i);
                    y1[i] = yList.get(i);
                }
                getStage().getTileList().add(new TilePolygon2D(x1, y1, xList.size(), false, Integer.parseInt(rotationTextField.getText()), getStage().getTileList().size() , "", 0, 0, "Serif" , 0, 15, textColorPanel.getBackground() , Color.WHITE, Color.WHITE));

                getStage().tempD = null;
                
                if(getStageList().size() > getMaxStageNumber()) {
                    for(int i = getMaxStageNumber(); i < getStageList().size(); i++)   {
                        getStageList().remove(i);
                        i--;
                    }
                }
                
                getStageList().add(getStage().clone());
                setStageNumber(getStageNumber() + 1);
                setMaxStageNumber(getStageNumber() + 1);
            }
            else if(getStage().isLine())    {
                getStage().getTileList().add(new TileLine2D(getFirstX(), getFirstY(), getSecondX(), Integer.parseInt(rotationTextField.getText()), getStage().getTileList().size() , getSecondY(),Color.WHITE));
                
                getStage().tempD = null;
                
                if(getStageList().size() > getMaxStageNumber()) {
                    for(int i = getMaxStageNumber(); i < getStageList().size(); i++)   {
                        getStageList().remove(i);
                        i--;
                    }
                }
                
                getStageList().add(getStage().clone());
                setStageNumber(getStageNumber() + 1);
                setMaxStageNumber(getStageNumber() + 1);
            }
            else if(getStage().isRectangle())   {
                rotationTextField.setText("0");
                getStage().getTileList().add(new TileRectangle2D(minX, minY, maxX, maxY,Integer.parseInt(rotationTextField.getText()), getStage().getTileList().size() , "", minX, minY, "Serif" , 0, 15, textColorPanel.getBackground() , Color.WHITE, Color.WHITE));
           
                getStage().tempD = null;
                
                if(getStageList().size() > getMaxStageNumber()) {
                    for(int i = getMaxStageNumber(); i < getStageList().size(); i++)   {
                        getStageList().remove(i);
                        i--;
                    }
                }
                
                getStageList().add(getStage().clone());
                setStageNumber(getStageNumber() + 1);
                setMaxStageNumber(getStageNumber() + 1);
            }
            else if(getStage().isCircle())  {
                if(width > height)  {
                    maxY = minY + width;
                }
                else if(width <= height)    {
                    maxX = minX + height;
                }
                getStage().getTileList().add(new TileEllipse2D(minX, minY, maxX, maxY,Integer.parseInt(rotationTextField.getText()), getStage().getTileList().size(),"", minX, minY, "Serif" , 0, 15, textColorPanel.getBackground() ,  Color.WHITE, Color.WHITE));
                
                getStage().tempD = null;
                
                if(getStageList().size() > getMaxStageNumber()) {
                    for(int i = getMaxStageNumber(); i < getStageList().size(); i++)   {
                        getStageList().remove(i);
                    }
                }
                
                getStageList().add(getStage().clone());
                setStageNumber(getStageNumber() + 1);
                setMaxStageNumber(getStageNumber() + 1);

            }
            else if(getStage().isOval())    {
                getStage().getTileList().add(new TileEllipse2D(minX, minY, maxX, maxY,Integer.parseInt(rotationTextField.getText()), getStage().getTileList().size(),"", minX, minY, "Serif" , 0, 15, textColorPanel.getBackground() ,  Color.WHITE, Color.WHITE));
                
                getStage().tempD = null;
                
                if(getStageList().size() > getMaxStageNumber()) {
                    for(int i = getMaxStageNumber(); i < getStageList().size(); i++)   {
                        getStageList().remove(i);
                    }
                }
                
                getStageList().add(getStage().clone());
                setStageNumber(getStageNumber() + 1);
                setMaxStageNumber(getStageNumber() + 1);
            }
            else if(getStage().isRoundRect())   {
                getStage().getTileList().add(new TileRoundRectangle2D(minX, minY, maxX, maxY, (int)(width/Integer.parseInt(circularPercentText.getText())), (int)(height/Integer.parseInt(circularPercentText.getText())), Integer.parseInt(rotationTextField.getText()), getStage().getTileList().size(), "", 0, 0, "Serif" , 0, 15, textColorPanel.getBackground() ,  Color.WHITE, Color.WHITE));
                
                getStage().tempD = null;
                
                if(getStageList().size() > getMaxStageNumber()) {
                    for(int i = getMaxStageNumber(); i < getStageList().size(); i++)   {
                        getStageList().remove(i);
                    }
                }
                
                getStageList().add(getStage().clone());
                setStageNumber(getStageNumber() + 1);
                setMaxStageNumber(getStageNumber() + 1);
            }
            setDownStage();
        }
        else {
            if(getStage().isFreeLine()) {
                int[] x = new int[xList.size()];
                int[] y = new int[yList.size()];
                
                for(int i = 0 ; i < xList.size(); i++)  {
                    x[i] = xList.get(i);
                    y[i] = yList.get(i);
                }
                
                getStage().getTileList().add(new TilePolygon2D(x,y, xList.size(), false, Integer.parseInt(rotationTextField.getText()), getStage().getTileList().size() ,"", 0, 0, "Serif" , 0, 15, textColorPanel.getBackground() , getStage().getBorderColor(), getStage().getFillingColor()));
            
                getStage().tempD = null;
                
                if(getStageList().size() > getMaxStageNumber()) {
                    for(int i = getMaxStageNumber(); i < getStageList().size(); i++)   {
                        getStageList().remove(i);
                    }
                }
                
                getStageList().add(getStage().clone());
                setStageNumber(getStageNumber() + 1);
                setMaxStageNumber(getStageNumber() + 1);
            }
            else if(getStage().isLine())    {
                getStage().getTileList().add(new TileLine2D(getFirstX(), getFirstY(), getSecondX(), getSecondY(), Integer.parseInt(rotationTextField.getText()), getStage().getTileList().size() , getStage().getBorderColor()));
            
                getStage().tempD = null;
                
                if(getStageList().size() > getMaxStageNumber()) {
                    for(int i = getMaxStageNumber(); i < getStageList().size(); i++)   {
                        getStageList().remove(i);
                    }
                }
                
                getStageList().add(getStage().clone());
                setStageNumber(getStageNumber() + 1);
                setMaxStageNumber(getStageNumber() + 1);
            }
            else if(getStage().isRectangle())   {
                rotationTextField.setText("0");
                getStage().getTileList().add(new TileRectangle2D(minX, minY, maxX, maxY,Integer.parseInt(rotationTextField.getText()), getStage().getTileList().size(),"", minX, minY, "Serif" , 0, 15, textColorPanel.getBackground() ,  getStage().getBorderColor(), getStage().getFillingColor()));
            
                getStage().tempD = null;
                
                if(getStageList().size() > getMaxStageNumber()) {
                    for(int i = getMaxStageNumber(); i < getStageList().size(); i++)   {
                        getStageList().remove(i);
                    }
                }
                
                getStageList().add(getStage().clone());
                setStageNumber(getStageNumber() + 1);
                setMaxStageNumber(getStageNumber() + 1);
            }
            else if(getStage().isCircle())  {
                width = maxX - minX;
                height = maxY - minY;

                if(width > height)  {
                    maxY = minY + width;
                }
                else if(width <= height)    {
                    maxX = minX + height;
                }
                getStage().getTileList().add(new TileEllipse2D(minX, minY, maxX, maxY,Integer.parseInt(rotationTextField.getText()), getStage().getTileList().size() ,"", minX, minY, "Serif" , 0, 15, textColorPanel.getBackground() ,  getStage().getBorderColor(), getStage().getFillingColor()));
           
                getStage().tempD = null;
                
                if(getStageList().size() > getMaxStageNumber()) {
                    for(int i = getMaxStageNumber(); i < getStageList().size(); i++)   {
                        getStageList().remove(i);
                        i--;
                    }
                }
                
                getStageList().add(getStage().clone());
                setStageNumber(getStageNumber() + 1);
                setMaxStageNumber(getStageNumber() + 1);
                
            }
            else if(getStage().isOval())    {
                getStage().getTileList().add(new TileEllipse2D(minX, minY, maxX, maxY,Integer.parseInt(rotationTextField.getText()), getStage().getTileList().size() ,"", minX, minY, "Serif" , 0, 15, textColorPanel.getBackground() , getStage().getBorderColor(), getStage().getFillingColor()));
            
                getStage().tempD = null;
                
                if(getStageList().size() > getMaxStageNumber()) {
                    for(int i = getMaxStageNumber(); i < getStageList().size(); i++)   {
                        getStageList().remove(i);
                        i--;
                    }
                }
                
                getStageList().add(getStage().clone());
                setStageNumber(getStageNumber() + 1);
                setMaxStageNumber(getStageNumber() + 1);
            }
            else if(getStage().isRoundRect())   {
                getStage().getTileList().add(new TileRoundRectangle2D(minX, minY, maxX, maxY, (int)(width/Integer.parseInt(circularPercentText.getText())),(int)(height/Integer.parseInt(circularPercentText.getText())), Integer.parseInt(rotationTextField.getText()),  getStage().getTileList().size(),"", minX, minY, "Serif" , 0, 15, textColorPanel.getBackground() ,  getStage().getBorderColor(), getStage().getFillingColor()));
            
                getStage().tempD = null;
                
                if(getStageList().size() > getMaxStageNumber()) {
                    for(int i = getMaxStageNumber(); i < getStageList().size(); i++)   {
                        getStageList().remove(i);
                        i--;
                    }
                }
                
                getStageList().add(getStage().clone());
                setStageNumber(getStageNumber() + 1);
                setMaxStageNumber(getStageNumber() + 1);
            }
            else if(getStage().isImage())   {
                if(isImageSelected())   {
                    getStage().getTileList().add(new TileImage2D(minX, minY, maxX, maxY,Integer.parseInt(rotationTextField.getText()),getStage().getTileList().size(),getBufferedImage(), getStage().getBorderColor(), getStage().getFillingColor()));
                    setBufferedImage(new BufferedImage(1000,1000,BufferedImage.TYPE_INT_RGB));
                    setImageSelected(false);
                    
                    getStage().tempD = null;

                    if(getStageList().size() > getMaxStageNumber()) {
                        for(int i = getMaxStageNumber(); i < getStageList().size(); i++)   {
                            getStageList().remove(i);
                            i--;
                        }
                    }

                    getStageList().add(getStage().clone());
                    setStageNumber(getStageNumber() + 1);
                    setMaxStageNumber(getStageNumber() + 1);
                    
                }
            }
            setDownStage();
        }
        getStage().tempD = null;
        getStage().repaint();
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

    @Override
    public void mouseDragged(MouseEvent e) {
        int minX = 0;
        int minY = 0;
        int maxX = 0;
        int maxY = 0;
        
        xList.add(e.getX());
        yList.add(e.getY());
        setSecondX(e.getX());
        setSecondY(e.getY());
        
        if(getFirstX() >= getSecondX()) {
            minX = getSecondX();
            maxX = getFirstX();
        }
        else if(getFirstX() < getSecondX()) {
            maxX = getSecondX();
            minX = getFirstX();
        }
        if(getFirstY() >= getSecondY()) {
            minY = getSecondY();
            maxY = getFirstY();
        }
        else if(getFirstY() < getSecondY()) {
            maxY = getSecondY();
            minY = getFirstY();
        }
        
        int width = maxX - minX;
        int height = maxY - minY;

        draggedX = getSecondX() - getFirstX();
        draggedY = getSecondY() - getFirstY();
        
        if(getRemoveState()) {
            
        }
        else if(getSelectState())   {
            if(isSelected())    {
                if(getSelectNumber() == -1) {
                    
                }
                else {
                    switch (getTempShape().getShapeType()) {
                        case 1:
                            
                            break;
                        case 2:
                            TileEllipse2D tr2 = new TileEllipse2D((int)((TileEllipse2D)getTempShape()).getMinX() + draggedX, (int)((TileEllipse2D)getTempShape()).getMinY() + draggedY, (int)((TileEllipse2D)getTempShape()).getMaxX() + draggedX, (int)((TileEllipse2D)getTempShape()).getMaxY() + draggedY,((TileEllipse2D)getTempShape()).getTd().getRotateDegree(), getStage().getTileList().size(), (( TileEllipse2D )getTempShape()).getTtd().getTextContext(), (( TileEllipse2D )getTempShape()).getTtd().getX()  + draggedX, (( TileEllipse2D )getTempShape()).getTtd().getY() + draggedY, (( TileEllipse2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TileEllipse2D )getTempShape()).getTtd().getTextFont().getStyle(), (( TileEllipse2D )getTempShape()).getTtd().getTextFont().getSize(), ((  TileEllipse2D)getTempShape()).getTtd().getTextColor(), ((TileEllipse2D)getTempShape()).getTd().getBorderColor(), ((TileEllipse2D)getTempShape()).getTd().getFillingColor());
                            getStage().tempD = tr2;
                            textLocalX.setText(String.valueOf(tr2.getTtd().getX()));
                            textLocalY.setText(String.valueOf(tr2.getTtd().getY()));
                            localX.setText(String.valueOf((int)tr2.getX()));
                            localY.setText(String.valueOf((int)tr2.getY()));
                            sizeX.setText(String.valueOf((int)tr2.getWidth()));
                            sizeY.setText(String.valueOf((int)tr2.getHeight()));
                            break;
                        case 3:
                            TileLine2D tr3 = new TileLine2D((int)((TileLine2D)getTempShape()).getX1() + draggedX, (int)((TileLine2D)getTempShape()).getY1() + draggedY, (int)((TileLine2D)getTempShape()).getX2() + draggedX, (int)((TileLine2D)getTempShape()).getY2() + draggedY, ((TileLine2D)getTempShape()).getTd().getRotateDegree(), getStage().getTileList().size() , ((TileLine2D)getTempShape()).getTd().getBorderColor());
                            getStage().tempD = tr3;
                            break;
                        case 4:
                            int[] x1 = new int[((TilePolygon2D)getTempShape()).getPointSize()];
                            int[] y1 = new int[((TilePolygon2D)getTempShape()).getPointSize()];
                            
                            for(int i = 0; i < ((TilePolygon2D)getTempShape()).getPointSize(); i++) {
                                x1[i] = ((TilePolygon2D)getTempShape()).getXpoint()[i] + draggedX;
                                y1[i] = ((TilePolygon2D)getTempShape()).getYpoint()[i] + draggedY;
                            }
                            TilePolygon2D tr4 = new TilePolygon2D(x1,y1, ((TilePolygon2D)getTempShape()).getPointSize(), false,((TilePolygon2D)getTempShape()).getTd().getRotateDegree(), getStage().getTileList().size() ,  (( TilePolygon2D )getTempShape()).getTtd().getTextContext(), (( TilePolygon2D )getTempShape()).getTtd().getX(), (( TilePolygon2D )getTempShape()).getTtd().getY(), (( TilePolygon2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TilePolygon2D )getTempShape()).getTtd().getTextFont().getStyle(), ((TilePolygon2D  )getTempShape()).getTtd().getTextFont().getSize(), (( TilePolygon2D )getTempShape()).getTtd().getTextColor(), ((TilePolygon2D)getTempShape()).getTd().getBorderColor(),((TilePolygon2D)getTempShape()).getTd().getFillingColor());
                            getStage().tempD = tr4;
                            localX.setText(String.valueOf((int)tr4.getXpoint()[0]));
                            localY.setText(String.valueOf((int)tr4.getYpoint()[0]));
                            sizeX.setText(String.valueOf((int)tr4.getWidth()));
                            sizeY.setText(String.valueOf((int)tr4.getHeight()));
                            break;
                        case 5:
                            TileRectangle2D tr5 = new TileRectangle2D(((TileRectangle2D)getTempShape()).getLeftTopX() + draggedX, ((TileRectangle2D)getTempShape()).getLeftTopY() + draggedY, ((TileRectangle2D)getTempShape()).getRightBottomX() + draggedX, ((TileRectangle2D)getTempShape()).getRightBottomY() + draggedY,((TileRectangle2D)getTempShape()). getTd().getRotateDegree(), getStage().getTileList().size(),  (( TileRectangle2D )getTempShape()).getTtd().getTextContext(), (( TileRectangle2D )getTempShape()).getTtd().getX() + draggedX, (( TileRectangle2D )getTempShape()).getTtd().getY() + draggedY, (( TileRectangle2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TileRectangle2D )getTempShape()).getTtd().getTextFont().getStyle(), (( TileRectangle2D )getTempShape()).getTtd().getTextFont().getSize(), (( TileRectangle2D )getTempShape()).getTtd().getTextColor(), ((TileRectangle2D)getTempShape()).getTd().getBorderColor(), ((TileRectangle2D)getTempShape()).getTd().getFillingColor());
                            getStage().tempD = tr5;
                            textLocalX.setText(String.valueOf(tr5.getTtd().getX()));
                            textLocalY.setText(String.valueOf(tr5.getTtd().getY()));
                            localX.setText(String.valueOf((int)tr5.getLeftTopX()));
                            localY.setText(String.valueOf((int)tr5.getLeftTopY()));
                            sizeX.setText(String.valueOf((int)tr5.getWidth()));
                            sizeY.setText(String.valueOf((int)tr5.getHeight()));
                            break;
                        case 6:
                            TileRoundRectangle2D tr6 = new TileRoundRectangle2D((int)((TileRoundRectangle2D)getTempShape()).getLeftTopX() + draggedX,(int)((TileRoundRectangle2D)getTempShape()).getLeftTopY() + draggedY,(int)((TileRoundRectangle2D)getTempShape()).getRightBottomX() + draggedX, (int)((TileRoundRectangle2D)getTempShape()).getRightBottomY() + draggedY, (int)((TileRoundRectangle2D)getTempShape()).getArcWidth(), (int)((TileRoundRectangle2D)getTempShape()).getArcHeight(), (int)((TileRoundRectangle2D)getTempShape()).getTd().getRotateDegree(),  getStage().getTileList().size(),  (( TileRoundRectangle2D )getTempShape()).getTtd().getTextContext(), ((  TileRoundRectangle2D)getTempShape()).getTtd().getX() + draggedX, (( TileRoundRectangle2D )getTempShape()).getTtd().getY() + draggedY, (( TileRoundRectangle2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TileRoundRectangle2D )getTempShape()).getTtd().getTextFont().getStyle(), ((  TileRoundRectangle2D)getTempShape()).getTtd().getTextFont().getSize(), (( TileRoundRectangle2D )getTempShape()).getTtd().getTextColor(), ((TileRoundRectangle2D)getTempShape()).getTd().getBorderColor(), ((TileRoundRectangle2D)getTempShape()).getTd().getFillingColor());
                            getStage().tempD = tr6;
                            textLocalX.setText(String.valueOf(tr6.getTtd().getX()));
                            textLocalY.setText(String.valueOf(tr6.getTtd().getY()));
                            localX.setText(String.valueOf((int)tr6.getLeftTopX()));
                            localY.setText(String.valueOf((int)tr6.getLeftTopY()));
                            sizeX.setText(String.valueOf((int)tr6.getWidth()));
                            sizeY.setText(String.valueOf((int)tr6.getHeight()));
                            break;
                        case 7 :
                            int[] x2 = new int[((TilePolygon2D)getTempShape()).getPointSize()];
                            int[] y2 = new int[((TilePolygon2D)getTempShape()).getPointSize()];
                            
                            for(int i = 0; i < ((TilePolygon2D)getTempShape()).getPointSize(); i++) {
                                x2[i] = ((TilePolygon2D)getTempShape()).getXpoint()[i] + draggedX;
                                y2[i] = ((TilePolygon2D)getTempShape()).getYpoint()[i] + draggedY;
                            }
                            TilePolygon2D tr7 = new TilePolygon2D(x2,y2, ((TilePolygon2D)getTempShape()).getPointSize(), true, ((TilePolygon2D)getTempShape()).getTd().getRotateDegree(), getStage().getTileList().size() , (( TilePolygon2D )getTempShape()).getTtd().getTextContext(), (( TilePolygon2D )getTempShape()).getTtd().getX() + draggedX, (( TilePolygon2D )getTempShape()).getTtd().getY() + draggedY, (( TilePolygon2D )getTempShape()).getTtd().getTextFont().getFontName(), (( TilePolygon2D )getTempShape()).getTtd().getTextFont().getStyle(), ((TilePolygon2D  )getTempShape()).getTtd().getTextFont().getSize(), (( TilePolygon2D )getTempShape()).getTtd().getTextColor(), ((TilePolygon2D)getTempShape()).getTd().getBorderColor(),((TilePolygon2D)getTempShape()).getTd().getFillingColor());
                            getStage().tempD = tr7;
                            textLocalX.setText(String.valueOf(tr7.getTtd().getX()));
                            textLocalY.setText(String.valueOf(tr7.getTtd().getY()));
                            localX.setText(String.valueOf((int)tr7.getXpoint()[0]));
                            localY.setText(String.valueOf((int)tr7.getYpoint()[0]));
                            sizeX.setText(String.valueOf((int)tr7.getWidth()));
                            sizeY.setText(String.valueOf((int)tr7.getHeight()));
                            break;
                        case 8 :
                            TileImage2D tr8 = new TileImage2D((int)((TileImage2D)getTempShape()).getX1() + draggedX,(int)((TileImage2D)getTempShape()).getY1() + draggedY,(int)((TileImage2D)getTempShape()).getX2() + draggedX, (int)((TileImage2D)getTempShape()).getY2() + draggedY,  (int)((TileImage2D)getTempShape()).getTd().getRotateDegree() , ((TileImage2D)getTempShape()).getTd().getDepth(), ((TileImage2D)getTempShape()).getBufferedImage(), ((TileImage2D)getTempShape()).getTd().getBorderColor(), ((TileImage2D)getTempShape()).getTd().getFillingColor()); 
                            getStage().tempD = tr8;
                            textLocalX.setText(String.valueOf( e.getX() ));
                            textLocalY.setText(String.valueOf( e.getY() ));
                            localX.setText(String.valueOf((int)tr8.getX1()));
                            localY.setText(String.valueOf((int)tr8.getY1()));
                            sizeX.setText(String.valueOf((int)tr8.getWidth()));
                            sizeY.setText(String.valueOf((int)tr8.getHeight()));
                            break;
                        default:
                            break;
                    }
                    getStage().repaint();
                }
            }
        }
        else if(getEraserState()) {
            if(getStage().isFreeLine()) {
                int[] x = new int[xList.size()];
                int[] y = new int[yList.size()];
                
                for(int i = 0 ; i < xList.size(); i++)  {
                    x[i] = xList.get(i);
                    y[i] = yList.get(i);
                }
                
                TilePolygon2D tp = new TilePolygon2D(x,y, xList.size(), false, Integer.parseInt(rotationTextField.getText()), getStage().getTileList().size() , "", 0, 0, "Serif" , 0, 15, textColorPanel.getBackground() , Color.WHITE, Color.WHITE);
                getStage().tempD = tp;
                getStage().repaint();
            }
            else if(getStage().isLine())    {
                TileLine2D tl = new TileLine2D(getFirstX(), getFirstY(), getSecondX(), Integer.parseInt(rotationTextField.getText()), getStage().getTileList().size() , getSecondY(),Color.WHITE);
                getStage().tempD = tl;
                getStage().repaint();
            }
            else if(getStage().isRectangle())   {
                TileRectangle2D tr = new TileRectangle2D(minX, minY, maxX, maxY,Integer.parseInt(rotationTextField.getText()),getStage().getTileList().size(), "", 0, 0, "Serif" , 0, 15, textColorPanel.getBackground() ,  Color.WHITE,Color.WHITE);
                getStage().tempD = tr;
                getStage().repaint();
            }
            else if(getStage().isCircle())  {
                if(width > height)  {
                    maxY = minY + width;
                }
                else if(width <= height)    {
                    maxX = minX + height;
                }
                TileEllipse2D te = new TileEllipse2D(minX, minY, maxX, maxY, Integer.parseInt(rotationTextField.getText()), getStage().getTileList().size(), "", 0, 0, "Serif" , 0, 15, textColorPanel.getBackground() ,  Color.WHITE,Color.WHITE);
                getStage().tempD = te;
                getStage().repaint();
            }
            else if(getStage().isOval())    {
                TileEllipse2D te = new TileEllipse2D(minX, minY, maxX, maxY, Integer.parseInt(rotationTextField.getText()), getStage().getTileList().size(),  "", 0, 0, "Serif" , 0, 15, textColorPanel.getBackground() , Color.WHITE,Color.WHITE);
                getStage().tempD = te;
                getStage().repaint();
            }
            else if(getStage().isRoundRect())   {
                TileRoundRectangle2D te = new TileRoundRectangle2D(minX, minY, maxX, maxY, (int)(width/Integer.parseInt(circularPercentText.getText())), (int)(height/Integer.parseInt(circularPercentText.getText())), Integer.parseInt(rotationTextField.getText()), getStage().getTileList().size(),  "", 0, 0, "Serif" , 0, 15, textColorPanel.getBackground() , Color.WHITE, Color.WHITE);
                getStage().tempD = te;
                getStage().repaint();
            }
        }
        else {
            if(getStage().isFreeLine()) {
                int[] x = new int[xList.size()];
                int[] y = new int[yList.size()];
                
                for(int i = 0 ; i < xList.size(); i++)  {
                    x[i] = xList.get(i);
                    y[i] = yList.get(i);
                }
                TilePolygon2D tp = new TilePolygon2D(x,y, xList.size(), false, Integer.parseInt(rotationTextField.getText()), getStage().getTileList().size() , "", 0, 0, "Serif" , 0, 15, textColorPanel.getBackground() , getStage().getBorderColor(), getStage().getFillingColor());
                getStage().tempD = tp;
                getStage().repaint();
            }
            else if(getStage().isLine() == true)    {
                TileLine2D tl = new TileLine2D(getFirstX(), getFirstY(), getSecondX(), getSecondY(),Integer.parseInt(rotationTextField.getText()), getStage().getTileList().size() , getStage().getBorderColor());
                getStage().tempD = tl;
                getStage().repaint();
            }
            else if(getStage().isRectangle() == true)   {
                TileRectangle2D tr = new TileRectangle2D(minX, minY, maxX, maxY,Integer.parseInt(rotationTextField.getText()),getStage(). getTileList().size(), "", 0, 0, "Serif" , 0, 15, textColorPanel.getBackground() ,  getStage().getBorderColor(), getStage().getFillingColor());
                getStage().tempD = tr;
                getStage().repaint();
            }
            else if(getStage().isCircle())  {
                if(width > height)  {
                    maxY = minY + width;
                }
                else if(width <= height)    {
                    maxX = minX + height;
                }
                TileEllipse2D te = new TileEllipse2D(minX, minY, maxX, maxY, Integer.parseInt(rotationTextField.getText()), getStage().getTileList().size(), "", 0, 0, "Serif" , 0, 15, textColorPanel.getBackground() ,  getStage().getBorderColor(), getStage().getFillingColor());
                getStage().tempD = te;
                getStage().repaint();
            }
            else if(getStage().isOval())    {
                TileEllipse2D te = new TileEllipse2D(minX, minY, maxX, maxY, Integer.parseInt(rotationTextField.getText()), getStage().getTileList().size(), "", 0, 0, "Serif" , 0, 15, textColorPanel.getBackground() ,  getStage().getBorderColor(), getStage().getFillingColor());
                getStage().tempD = te;
                getStage().repaint();
            }
            else if(getStage().isRoundRect())   {
                TileRoundRectangle2D te = new TileRoundRectangle2D(minX, minY, maxX, maxY,(int)(width/Integer.parseInt(circularPercentText.getText())),(int)(height/Integer.parseInt(circularPercentText.getText())), Integer.parseInt(rotationTextField.getText()),  getStage().getTileList().size(), "", 0, 0, "Serif" , 0, 15, textColorPanel.getBackground() ,  getStage().getBorderColor(), getStage().getFillingColor());
                getStage().tempD = te;
                getStage().repaint();
            }
            else if(getStage().isImage())   {
                if(isImageSelected())   {
                    TileImage2D ti = new TileImage2D(minX, minY, maxX, maxY,Integer.parseInt(rotationTextField.getText()),getStage().getTileList().size(),getBufferedImage(), getStage().getBorderColor(), getStage().getFillingColor());
                    getStage().tempD = ti;
                    getStage().repaint();
                }
            }
        }
    }

    @Override
    public void mouseMoved(MouseEvent e) {
        if(getStage().isPolygonDrawing())   {
            ArrayList<Integer> tempXpoint = new ArrayList<Integer>();
            ArrayList<Integer> tempYpoint = new ArrayList<Integer>();
            
            for(int i = 0 ; i < Xpoint.size(); i++) {
                tempXpoint.add(Xpoint.get(i));
                tempYpoint.add(Ypoint.get(i));
            }
            tempXpoint.add(e.getX());
            tempYpoint.add(e.getY());

            int[] x = new int[tempXpoint.size()];
            int[] y = new int[tempYpoint.size()];

            for(int i = 0 ; i < tempXpoint.size(); i++) {
                x[i] = tempXpoint.get(i);
                y[i] = tempYpoint.get(i);
            }
            TilePolygon2D tp = new TilePolygon2D(x, y, tempXpoint.size(),false, Integer.parseInt(rotationTextField.getText()), getStage().getTileList().size() ,  "", 0, 0, "Serif" , 0, 15, textColorPanel.getBackground() ,  getStage().getBorderColor(), getStage().getFillingColor());
            getStage().tempD = tp;
            getStage().repaint();
        }
    }
}
